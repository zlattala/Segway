
module Segway_P2
exports 

	transparent diamond
	transparent sbisim
	transparent wbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel leftMotorVelocity: InOut.core_real
	channel rightMotorVelocity: InOut.core_real
	channel angle: InOut.core_real
	channel gyroX: InOut.core_real
	channel gyroY: InOut.core_real
	channel gyroZ: InOut.core_real
	
	channel setLeftMotorSpeedCall: core_real
	channel setRightMotorSpeedCall: core_real
	channel enableInterruptsCall
	channel disableInterruptsCall
	
	-- declaring module termination channel
	channel terminate
				
	-- declaring robotic platform variables
	
		module SegwayController
			Timed(OneStep) {
				shared_variable_events = {|
				|}		
			}	
		exports
			transparent diamond
			transparent sbisim
			transparent wbisim
			transparent chase
			
					module stm_ref0
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_currAngle, set_currAngle: core_real
							channel get_currGyroX, set_currGyroX: core_real
							channel get_currGyroY, set_currGyroY: core_real
							channel get_currGyroZ, set_currGyroZ: core_real
							channel get_currLeftVel, set_currLeftVel: core_real
							channel get_currRightVel, set_currRightVel: core_real
							channel get_speedCount, set_speedCount: core_nat
							channel get_rotationCount, set_rotationCount: core_nat
							channel get_angleOutput, set_angleOutput: core_real
							channel get_speedOutput, set_speedOutput: core_real
							channel get_rotationOutput, set_rotationOutput: core_real
							channel get_speedSent, set_speedSent: core_boolean
							channel get_angleSent, set_angleSent: core_boolean
							channel get_rotationSent, set_rotationSent: core_boolean
							channel get_angleReceived, set_angleReceived: core_boolean
							channel get_speedIntegral, set_speedIntegral: core_real
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel leftMotorVelocity__: TIDS.InOut.core_real
							channel leftMotorVelocity: InOut.core_real
							channel rightMotorVelocity__: TIDS.InOut.core_real
							channel rightMotorVelocity: InOut.core_real
							channel angle__: TIDS.InOut.core_real
							channel angle: InOut.core_real
							channel gyroX__: TIDS.InOut.core_real
							channel gyroX: InOut.core_real
							channel gyroY__: TIDS.InOut.core_real
							channel gyroY: InOut.core_real
							channel gyroZ__: TIDS.InOut.core_real
							channel gyroZ: InOut.core_real
							channel angleOutputE__: TIDS.InOut.core_real
							channel angleOutputE: InOut.core_real
							channel anewError__: TIDS.InOut.core_real
							channel anewError: InOut.core_real
							channel adiff__: TIDS.InOut.core_real
							channel adiff: InOut.core_real
							channel snewError__: TIDS.InOut.core_real
							channel snewError: InOut.core_real
							channel speedOutputE__: TIDS.InOut.core_real
							channel speedOutputE: InOut.core_real
							channel rdiff__: TIDS.InOut.core_real
							channel rdiff: InOut.core_real
							channel rotationOutputE__: TIDS.InOut.core_real
							channel rotationOutputE: InOut.core_real
							
							-- declaring call and ret events for undefined operations
							channel setLeftMotorSpeedCall: core_real
							channel setRightMotorSpeedCall: core_real
							channel disableInterruptsCall
							channel enableInterruptsCall
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							CALL__setLeftMotorSpeed(id__,
									    speed) =  EDeadline(setLeftMotorSpeedCall.speed,0)		
							CALL__setRightMotorSpeed(id__,
									    speed) =  EDeadline(setRightMotorSpeedCall.speed,0)		
							CALL__disableInterrupts(id__) =  EDeadline(disableInterruptsCall,0)		
							CALL__enableInterrupts(id__) =  EDeadline(enableInterruptsCall,0)		
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_BalanceSTM_P2
							              | SID_BalanceSTM_P2_Initialisation
							              | SID_BalanceSTM_P2_WaitForNextIteration
							              | SID_BalanceSTM_P2_Setup
							              | SID_BalanceSTM_P2_ReceiveInput
							              | SID_BalanceSTM_P2_SendSpeed
							              | SID_BalanceSTM_P2_SendAngle
							              | SID_BalanceSTM_P2_SendRotation
							              | SID_BalanceSTM_P2_SetMotors
							              | SID_BalanceSTM_P2_StopMotors
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_BalanceSTM_P2_t6
							              | TID_BalanceSTM_P2_t5
							              | TID_BalanceSTM_P2_t8
							              | TID_BalanceSTM_P2_t7
							              | TID_BalanceSTM_P2_t11
							              | TID_BalanceSTM_P2_t13
							              | TID_BalanceSTM_P2_t14
							              | TID_BalanceSTM_P2_t15
							              | TID_BalanceSTM_P2_t16
							              | TID_BalanceSTM_P2_t17
							              | TID_BalanceSTM_P2_t1
							              | TID_BalanceSTM_P2_t4
							              | TID_BalanceSTM_P2_t12
							              | TID_BalanceSTM_P2_t18
							              | TID_BalanceSTM_P2_t9
							              | TID_BalanceSTM_P2_t10
							              | TID_BalanceSTM_P2_t19
							              | TID_BalanceSTM_P2_t20
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_BalanceSTM_P2_t6,	TID_BalanceSTM_P2_t5,	TID_BalanceSTM_P2_t8,	TID_BalanceSTM_P2_t7,	TID_BalanceSTM_P2_t11,	TID_BalanceSTM_P2_t13,	TID_BalanceSTM_P2_t14,	TID_BalanceSTM_P2_t15,	TID_BalanceSTM_P2_t16,	TID_BalanceSTM_P2_t17,	TID_BalanceSTM_P2_t4,	TID_BalanceSTM_P2_t12,	TID_BalanceSTM_P2_t18,	TID_BalanceSTM_P2_t19,	TID_BalanceSTM_P2_t20
							}
							
							int_int = {|
								leftMotorVelocity__.TID_BalanceSTM_P2_t6,
								rightMotorVelocity__.TID_BalanceSTM_P2_t6,
								angle__.TID_BalanceSTM_P2_t6,
								gyroX__.TID_BalanceSTM_P2_t6,
								gyroY__.TID_BalanceSTM_P2_t6,
								gyroZ__.TID_BalanceSTM_P2_t6,
								angleOutputE__.TID_BalanceSTM_P2_t6,
								anewError__.TID_BalanceSTM_P2_t6,
								adiff__.TID_BalanceSTM_P2_t6,
								snewError__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t6,
								rdiff__.TID_BalanceSTM_P2_t6,
								rotationOutputE__.TID_BalanceSTM_P2_t6,
								internal__.TID_BalanceSTM_P2_t6,
								leftMotorVelocity__.TID_BalanceSTM_P2_t5,
								rightMotorVelocity__.TID_BalanceSTM_P2_t5,
								angle__.TID_BalanceSTM_P2_t5,
								gyroX__.TID_BalanceSTM_P2_t5,
								gyroY__.TID_BalanceSTM_P2_t5,
								gyroZ__.TID_BalanceSTM_P2_t5,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								anewError__.TID_BalanceSTM_P2_t5,
								adiff__.TID_BalanceSTM_P2_t5,
								snewError__.TID_BalanceSTM_P2_t5,
								speedOutputE__.TID_BalanceSTM_P2_t5,
								rdiff__.TID_BalanceSTM_P2_t5,
								rotationOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t5,
								leftMotorVelocity__.TID_BalanceSTM_P2_t8,
								rightMotorVelocity__.TID_BalanceSTM_P2_t8,
								angle__.TID_BalanceSTM_P2_t8,
								gyroX__.TID_BalanceSTM_P2_t8,
								gyroY__.TID_BalanceSTM_P2_t8,
								gyroZ__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t8,
								anewError__.TID_BalanceSTM_P2_t8,
								adiff__.TID_BalanceSTM_P2_t8,
								snewError__.TID_BalanceSTM_P2_t8,
								speedOutputE__.TID_BalanceSTM_P2_t8,
								rdiff__.TID_BalanceSTM_P2_t8,
								rotationOutputE__.TID_BalanceSTM_P2_t8,
								internal__.TID_BalanceSTM_P2_t8,
								leftMotorVelocity__.TID_BalanceSTM_P2_t7,
								rightMotorVelocity__.TID_BalanceSTM_P2_t7,
								angle__.TID_BalanceSTM_P2_t7,
								gyroX__.TID_BalanceSTM_P2_t7,
								gyroY__.TID_BalanceSTM_P2_t7,
								gyroZ__.TID_BalanceSTM_P2_t7,
								angleOutputE__.TID_BalanceSTM_P2_t7,
								anewError__.TID_BalanceSTM_P2_t7,
								adiff__.TID_BalanceSTM_P2_t7,
								snewError__.TID_BalanceSTM_P2_t7,
								speedOutputE__.TID_BalanceSTM_P2_t7,
								rdiff__.TID_BalanceSTM_P2_t7,
								rotationOutputE__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t7,
								leftMotorVelocity__.TID_BalanceSTM_P2_t11,
								rightMotorVelocity__.TID_BalanceSTM_P2_t11,
								angle__.TID_BalanceSTM_P2_t11,
								gyroX__.TID_BalanceSTM_P2_t11,
								gyroY__.TID_BalanceSTM_P2_t11,
								gyroZ__.TID_BalanceSTM_P2_t11,
								angleOutputE__.TID_BalanceSTM_P2_t11,
								anewError__.TID_BalanceSTM_P2_t11,
								adiff__.TID_BalanceSTM_P2_t11,
								snewError__.TID_BalanceSTM_P2_t11,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								rdiff__.TID_BalanceSTM_P2_t11,
								rotationOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t11,
								leftMotorVelocity__.TID_BalanceSTM_P2_t13,
								rightMotorVelocity__.TID_BalanceSTM_P2_t13,
								angle__.TID_BalanceSTM_P2_t13,
								gyroX__.TID_BalanceSTM_P2_t13,
								gyroY__.TID_BalanceSTM_P2_t13,
								gyroZ__.TID_BalanceSTM_P2_t13,
								angleOutputE__.TID_BalanceSTM_P2_t13,
								anewError__.TID_BalanceSTM_P2_t13,
								adiff__.TID_BalanceSTM_P2_t13,
								snewError__.TID_BalanceSTM_P2_t13,
								speedOutputE__.TID_BalanceSTM_P2_t13,
								rdiff__.TID_BalanceSTM_P2_t13,
								rotationOutputE__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t13,
								leftMotorVelocity__.TID_BalanceSTM_P2_t14,
								rightMotorVelocity__.TID_BalanceSTM_P2_t14,
								angle__.TID_BalanceSTM_P2_t14,
								gyroX__.TID_BalanceSTM_P2_t14,
								gyroY__.TID_BalanceSTM_P2_t14,
								gyroZ__.TID_BalanceSTM_P2_t14,
								angleOutputE__.TID_BalanceSTM_P2_t14,
								anewError__.TID_BalanceSTM_P2_t14,
								adiff__.TID_BalanceSTM_P2_t14,
								snewError__.TID_BalanceSTM_P2_t14,
								speedOutputE__.TID_BalanceSTM_P2_t14,
								rdiff__.TID_BalanceSTM_P2_t14,
								rotationOutputE__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t14,
								leftMotorVelocity__.TID_BalanceSTM_P2_t15,
								rightMotorVelocity__.TID_BalanceSTM_P2_t15,
								angle__.TID_BalanceSTM_P2_t15,
								gyroX__.TID_BalanceSTM_P2_t15,
								gyroY__.TID_BalanceSTM_P2_t15,
								gyroZ__.TID_BalanceSTM_P2_t15,
								angleOutputE__.TID_BalanceSTM_P2_t15,
								anewError__.TID_BalanceSTM_P2_t15,
								adiff__.TID_BalanceSTM_P2_t15,
								snewError__.TID_BalanceSTM_P2_t15,
								speedOutputE__.TID_BalanceSTM_P2_t15,
								rdiff__.TID_BalanceSTM_P2_t15,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t15,
								leftMotorVelocity__.TID_BalanceSTM_P2_t16,
								rightMotorVelocity__.TID_BalanceSTM_P2_t16,
								angle__.TID_BalanceSTM_P2_t16,
								gyroX__.TID_BalanceSTM_P2_t16,
								gyroY__.TID_BalanceSTM_P2_t16,
								gyroZ__.TID_BalanceSTM_P2_t16,
								angleOutputE__.TID_BalanceSTM_P2_t16,
								anewError__.TID_BalanceSTM_P2_t16,
								adiff__.TID_BalanceSTM_P2_t16,
								snewError__.TID_BalanceSTM_P2_t16,
								speedOutputE__.TID_BalanceSTM_P2_t16,
								rdiff__.TID_BalanceSTM_P2_t16,
								rotationOutputE__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t16,
								leftMotorVelocity__.TID_BalanceSTM_P2_t17,
								rightMotorVelocity__.TID_BalanceSTM_P2_t17,
								angle__.TID_BalanceSTM_P2_t17,
								gyroX__.TID_BalanceSTM_P2_t17,
								gyroY__.TID_BalanceSTM_P2_t17,
								gyroZ__.TID_BalanceSTM_P2_t17,
								angleOutputE__.TID_BalanceSTM_P2_t17,
								anewError__.TID_BalanceSTM_P2_t17,
								adiff__.TID_BalanceSTM_P2_t17,
								snewError__.TID_BalanceSTM_P2_t17,
								speedOutputE__.TID_BalanceSTM_P2_t17,
								rdiff__.TID_BalanceSTM_P2_t17,
								rotationOutputE__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t17,
								leftMotorVelocity__.TID_BalanceSTM_P2_t4,
								rightMotorVelocity__.TID_BalanceSTM_P2_t4,
								angle__.TID_BalanceSTM_P2_t4,
								gyroX__.TID_BalanceSTM_P2_t4,
								gyroY__.TID_BalanceSTM_P2_t4,
								gyroZ__.TID_BalanceSTM_P2_t4,
								angleOutputE__.TID_BalanceSTM_P2_t4,
								anewError__.TID_BalanceSTM_P2_t4,
								adiff__.TID_BalanceSTM_P2_t4,
								snewError__.TID_BalanceSTM_P2_t4,
								speedOutputE__.TID_BalanceSTM_P2_t4,
								rdiff__.TID_BalanceSTM_P2_t4,
								rotationOutputE__.TID_BalanceSTM_P2_t4,
								internal__.TID_BalanceSTM_P2_t4,
								leftMotorVelocity__.TID_BalanceSTM_P2_t12,
								rightMotorVelocity__.TID_BalanceSTM_P2_t12,
								angle__.TID_BalanceSTM_P2_t12,
								gyroX__.TID_BalanceSTM_P2_t12,
								gyroY__.TID_BalanceSTM_P2_t12,
								gyroZ__.TID_BalanceSTM_P2_t12,
								angleOutputE__.TID_BalanceSTM_P2_t12,
								anewError__.TID_BalanceSTM_P2_t12,
								adiff__.TID_BalanceSTM_P2_t12,
								snewError__.TID_BalanceSTM_P2_t12,
								speedOutputE__.TID_BalanceSTM_P2_t12,
								rdiff__.TID_BalanceSTM_P2_t12,
								rotationOutputE__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t12,
								leftMotorVelocity__.TID_BalanceSTM_P2_t18,
								rightMotorVelocity__.TID_BalanceSTM_P2_t18,
								angle__.TID_BalanceSTM_P2_t18,
								gyroX__.TID_BalanceSTM_P2_t18,
								gyroY__.TID_BalanceSTM_P2_t18,
								gyroZ__.TID_BalanceSTM_P2_t18,
								angleOutputE__.TID_BalanceSTM_P2_t18,
								anewError__.TID_BalanceSTM_P2_t18,
								adiff__.TID_BalanceSTM_P2_t18,
								snewError__.TID_BalanceSTM_P2_t18,
								speedOutputE__.TID_BalanceSTM_P2_t18,
								rdiff__.TID_BalanceSTM_P2_t18,
								rotationOutputE__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t18,
								leftMotorVelocity__.TID_BalanceSTM_P2_t19,
								rightMotorVelocity__.TID_BalanceSTM_P2_t19,
								angle__.TID_BalanceSTM_P2_t19,
								gyroX__.TID_BalanceSTM_P2_t19,
								gyroY__.TID_BalanceSTM_P2_t19,
								gyroZ__.TID_BalanceSTM_P2_t19,
								angleOutputE__.TID_BalanceSTM_P2_t19,
								anewError__.TID_BalanceSTM_P2_t19,
								adiff__.TID_BalanceSTM_P2_t19,
								snewError__.TID_BalanceSTM_P2_t19,
								speedOutputE__.TID_BalanceSTM_P2_t19,
								rdiff__.TID_BalanceSTM_P2_t19,
								rotationOutputE__.TID_BalanceSTM_P2_t19,
								internal__.TID_BalanceSTM_P2_t19,
								leftMotorVelocity__.TID_BalanceSTM_P2_t20,
								rightMotorVelocity__.TID_BalanceSTM_P2_t20,
								angle__.TID_BalanceSTM_P2_t20,
								gyroX__.TID_BalanceSTM_P2_t20,
								gyroY__.TID_BalanceSTM_P2_t20,
								gyroZ__.TID_BalanceSTM_P2_t20,
								angleOutputE__.TID_BalanceSTM_P2_t20,
								anewError__.TID_BalanceSTM_P2_t20,
								adiff__.TID_BalanceSTM_P2_t20,
								snewError__.TID_BalanceSTM_P2_t20,
								speedOutputE__.TID_BalanceSTM_P2_t20,
								rdiff__.TID_BalanceSTM_P2_t20,
								rotationOutputE__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t20
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_BalanceSTM_P2_Initialisation_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_Initialisation}
							|}
							
							
							BalanceSTM_P2_Initialisation_triggers = {|
								internal__.TID_BalanceSTM_P2_t4,
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_Initialisation(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t4(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t4 ->  exit.SID_BalanceSTM_P2_Initialisation.SID_BalanceSTM_P2_Initialisation -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_Initialisation.SID_BalanceSTM_P2_Initialisation -> SKIP;
													enter!SID_BalanceSTM_P2_Initialisation!SID_BalanceSTM_P2_WaitForNextIteration -> entered!SID_BalanceSTM_P2_Initialisation!SID_BalanceSTM_P2_WaitForNextIteration ->
													State_BalanceSTM_P2_Initialisation(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_Initialisation_execute(id__,o____) = true & (set_speedCount!0 -> SKIP);true & (set_rotationCount!0 -> SKIP);WAIT(const_BalanceSTM_P2_startupDelay);DoClockReset({clockReset.CLID_loopTimer});true & (set_speedSent!false -> SKIP);true & (set_angleSent!false -> SKIP);true & (set_rotationSent!false -> SKIP); 
									entered!o____!SID_BalanceSTM_P2_Initialisation ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t4(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t4,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Initialisation -> SKIP);
												State_BalanceSTM_P2_Initialisation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_Initialisation})!SID_BalanceSTM_P2_Initialisation -> (State_BalanceSTM_P2_Initialisation_execute(id__,x____))
							
							CS_BalanceSTM_P2_WaitForNextIteration_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_WaitForNextIteration}
							|}
							
							
							BalanceSTM_P2_WaitForNextIteration_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_WaitForNextIteration(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t12(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t12 ->  exit.SID_BalanceSTM_P2_WaitForNextIteration.SID_BalanceSTM_P2_WaitForNextIteration -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_WaitForNextIteration.SID_BalanceSTM_P2_WaitForNextIteration -> SKIP;
													true&CALL__disableInterrupts(
																id__
															);enter!SID_BalanceSTM_P2_WaitForNextIteration!SID_BalanceSTM_P2_Setup -> entered!SID_BalanceSTM_P2_WaitForNextIteration!SID_BalanceSTM_P2_Setup ->
													State_BalanceSTM_P2_WaitForNextIteration(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_WaitForNextIteration_execute(id__,o____) = SKIP; 
									entered!o____!SID_BalanceSTM_P2_WaitForNextIteration ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t12(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_WaitForNextIteration -> SKIP);
												State_BalanceSTM_P2_WaitForNextIteration(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_WaitForNextIteration})!SID_BalanceSTM_P2_WaitForNextIteration -> (State_BalanceSTM_P2_WaitForNextIteration_execute(id__,x____))
							
							CS_BalanceSTM_P2_Setup_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_Setup}
							|}
							
							
							BalanceSTM_P2_Setup_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_Setup(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t18(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t18 ->  exit.SID_BalanceSTM_P2_Setup.SID_BalanceSTM_P2_Setup -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_Setup.SID_BalanceSTM_P2_Setup -> SKIP;
													enter!SID_BalanceSTM_P2_Setup!SID_BalanceSTM_P2_ReceiveInput -> entered!SID_BalanceSTM_P2_Setup!SID_BalanceSTM_P2_ReceiveInput ->
													State_BalanceSTM_P2_Setup(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_Setup_execute(id__,o____) = true&CALL__enableInterrupts(
											id__
										);get_rotationCount?rotationCount -> true & (set_rotationCount!Plus(rotationCount, 1, core_nat) -> SKIP);get_speedCount?speedCount -> true & (set_speedCount!Plus(speedCount, 1, core_nat) -> SKIP);true & (set_angleReceived!false -> SKIP); 
									entered!o____!SID_BalanceSTM_P2_Setup ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t18(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_Setup -> SKIP);
												State_BalanceSTM_P2_Setup(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_Setup})!SID_BalanceSTM_P2_Setup -> (State_BalanceSTM_P2_Setup_execute(id__,x____))
							
							CS_BalanceSTM_P2_ReceiveInput_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_ReceiveInput}
							|}
							
							
							BalanceSTM_P2_ReceiveInput_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_ReceiveInput(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t6(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t6 ->  exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													J_BalanceSTM_P2_j2(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								T_BalanceSTM_P2_t5(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = angleOutputE__!TID_BalanceSTM_P2_t5.in?angleOutput -> set_angleOutput!angleOutput ->  (exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													true & (set_angleSent!false -> SKIP);true & (set_angleReceived!true -> SKIP);enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_ReceiveInput -> State_BalanceSTM_P2_ReceiveInput_execute(id__,SID_BalanceSTM_P2_ReceiveInput)
								)
								T_BalanceSTM_P2_t8(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t8 ->  exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SendAngle -> entered!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SendAngle ->
													State_BalanceSTM_P2_ReceiveInput(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								T_BalanceSTM_P2_t11(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = speedOutputE__!TID_BalanceSTM_P2_t11.in?speedOutput -> set_speedOutput!speedOutput ->  (exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													true & (set_speedSent!false -> SKIP);enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_ReceiveInput -> State_BalanceSTM_P2_ReceiveInput_execute(id__,SID_BalanceSTM_P2_ReceiveInput)
								)
								T_BalanceSTM_P2_t13(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t13 ->  exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SendSpeed -> entered!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SendSpeed ->
													State_BalanceSTM_P2_ReceiveInput(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								T_BalanceSTM_P2_t15(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = rotationOutputE__!TID_BalanceSTM_P2_t15.in?rotationOutput -> set_rotationOutput!rotationOutput ->  (exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													true & (set_rotationSent!false -> SKIP);enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_ReceiveInput -> State_BalanceSTM_P2_ReceiveInput_execute(id__,SID_BalanceSTM_P2_ReceiveInput)
								)
								T_BalanceSTM_P2_t16(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t16 ->  exit.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_ReceiveInput.SID_BalanceSTM_P2_ReceiveInput -> SKIP;
													enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SendRotation -> entered!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SendRotation ->
													State_BalanceSTM_P2_ReceiveInput(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								J_BalanceSTM_P2_j2(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = (
											(internal__!TID_BalanceSTM_P2_t9 -> enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SetMotors -> entered!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_SetMotors ->
											State_BalanceSTM_P2_ReceiveInput(id__,
													    const_BalanceSTM_P2_maxAngle,
													    const_BalanceSTM_P2_loopTime,
													    const_BalanceSTM_P2_startupDelay,
													    const_BalanceSTM_P2_speedUpdate,
													    const_BalanceSTM_P2_rotationUpdate,
													    const_BalanceSTM_P2_motorBudget,
													    const_BalanceSTM_P2_angleBudget,
													    const_BalanceSTM_P2_speedBudget,
													    const_BalanceSTM_P2_rotationBudget)
											)[]
											(internal__!TID_BalanceSTM_P2_t10 -> enter!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_StopMotors -> entered!SID_BalanceSTM_P2_ReceiveInput!SID_BalanceSTM_P2_StopMotors ->
											State_BalanceSTM_P2_ReceiveInput(id__,
													    const_BalanceSTM_P2_maxAngle,
													    const_BalanceSTM_P2_loopTime,
													    const_BalanceSTM_P2_startupDelay,
													    const_BalanceSTM_P2_speedUpdate,
													    const_BalanceSTM_P2_rotationUpdate,
													    const_BalanceSTM_P2_motorBudget,
													    const_BalanceSTM_P2_angleBudget,
													    const_BalanceSTM_P2_speedBudget,
													    const_BalanceSTM_P2_rotationBudget)
											)
											)
								State_BalanceSTM_P2_ReceiveInput_execute(id__,o____) = SKIP; 
									entered!o____!SID_BalanceSTM_P2_ReceiveInput ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t6(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)[]
										T_BalanceSTM_P2_t5(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)[]
										T_BalanceSTM_P2_t8(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)[]
										T_BalanceSTM_P2_t11(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)[]
										T_BalanceSTM_P2_t13(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)[]
										T_BalanceSTM_P2_t15(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)[]
										T_BalanceSTM_P2_t16(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_ReceiveInput -> SKIP);
												State_BalanceSTM_P2_ReceiveInput(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_ReceiveInput})!SID_BalanceSTM_P2_ReceiveInput -> (State_BalanceSTM_P2_ReceiveInput_execute(id__,x____))
							
							CS_BalanceSTM_P2_SendSpeed_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_SendSpeed}
							|}
							
							
							BalanceSTM_P2_SendSpeed_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_SendSpeed(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t14(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t14 ->  exit.SID_BalanceSTM_P2_SendSpeed.SID_BalanceSTM_P2_SendSpeed -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_SendSpeed.SID_BalanceSTM_P2_SendSpeed -> SKIP;
													true & (set_speedSent!true -> SKIP);enter!SID_BalanceSTM_P2_SendSpeed!SID_BalanceSTM_P2_ReceiveInput -> entered!SID_BalanceSTM_P2_SendSpeed!SID_BalanceSTM_P2_ReceiveInput ->
													State_BalanceSTM_P2_SendSpeed(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_SendSpeed_execute(id__,o____) = Deadline(true&(leftMotorVelocity.in?currLeftVel -> set_currLeftVel!currLeftVel -> SKIP),0);Deadline(true&(rightMotorVelocity.in?currRightVel -> set_currRightVel!currRightVel -> SKIP),0);get_currRightVel?currRightVel -> get_currLeftVel?currLeftVel -> true&(snewError.out!(Plus(currLeftVel, currRightVel, core_real)) -> SKIP);true & (set_speedCount!0 -> SKIP);WAIT_INTERVAL({ x | x <- { 0..const_BalanceSTM_P2_speedBudget}, 0<= x, x <=const_BalanceSTM_P2_speedBudget}); 
									entered!o____!SID_BalanceSTM_P2_SendSpeed ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t14(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendSpeed -> SKIP);
												State_BalanceSTM_P2_SendSpeed(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_SendSpeed})!SID_BalanceSTM_P2_SendSpeed -> (State_BalanceSTM_P2_SendSpeed_execute(id__,x____))
							
							CS_BalanceSTM_P2_SendAngle_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_SendAngle}
							|}
							
							
							BalanceSTM_P2_SendAngle_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_SendAngle(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t7(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t7 ->  exit.SID_BalanceSTM_P2_SendAngle.SID_BalanceSTM_P2_SendAngle -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_SendAngle.SID_BalanceSTM_P2_SendAngle -> SKIP;
													true & (set_angleSent!true -> SKIP);enter!SID_BalanceSTM_P2_SendAngle!SID_BalanceSTM_P2_ReceiveInput -> entered!SID_BalanceSTM_P2_SendAngle!SID_BalanceSTM_P2_ReceiveInput ->
													State_BalanceSTM_P2_SendAngle(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_SendAngle_execute(id__,o____) = Deadline(true&(angle.in?currAngle -> set_currAngle!currAngle -> SKIP),0);Deadline(true&(gyroX.in?currGyroX -> set_currGyroX!currGyroX -> SKIP),0);Deadline(get_currAngle?currAngle -> true&(anewError.out!currAngle -> SKIP),0);Deadline(get_currGyroX?currGyroX -> true&(adiff.out!currGyroX -> SKIP),0);WAIT_INTERVAL({ x | x <- { 0..const_BalanceSTM_P2_angleBudget}, 0<= x, x <=const_BalanceSTM_P2_angleBudget}); 
									entered!o____!SID_BalanceSTM_P2_SendAngle ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t7(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendAngle -> SKIP);
												State_BalanceSTM_P2_SendAngle(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_SendAngle})!SID_BalanceSTM_P2_SendAngle -> (State_BalanceSTM_P2_SendAngle_execute(id__,x____))
							
							CS_BalanceSTM_P2_SendRotation_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_SendRotation}
							|}
							
							
							BalanceSTM_P2_SendRotation_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_SendRotation(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t17(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t17 ->  exit.SID_BalanceSTM_P2_SendRotation.SID_BalanceSTM_P2_SendRotation -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_SendRotation.SID_BalanceSTM_P2_SendRotation -> SKIP;
													true & (set_rotationSent!true -> SKIP);enter!SID_BalanceSTM_P2_SendRotation!SID_BalanceSTM_P2_ReceiveInput -> entered!SID_BalanceSTM_P2_SendRotation!SID_BalanceSTM_P2_ReceiveInput ->
													State_BalanceSTM_P2_SendRotation(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_SendRotation_execute(id__,o____) = Deadline(true&(gyroZ.in?currGyroZ -> set_currGyroZ!currGyroZ -> SKIP),0);get_currGyroZ?currGyroZ -> true&(rdiff.out!currGyroZ -> SKIP);true & (set_rotationCount!0 -> SKIP);WAIT_INTERVAL({ x | x <- { 0..const_BalanceSTM_P2_rotationBudget}, 0<= x, x <=const_BalanceSTM_P2_rotationBudget}); 
									entered!o____!SID_BalanceSTM_P2_SendRotation ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t17(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SendRotation -> SKIP);
												State_BalanceSTM_P2_SendRotation(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_SendRotation})!SID_BalanceSTM_P2_SendRotation -> (State_BalanceSTM_P2_SendRotation_execute(id__,x____))
							
							CS_BalanceSTM_P2_SetMotors_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_SetMotors}
							|}
							
							
							BalanceSTM_P2_SetMotors_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_SetMotors(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t19(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t19 ->  exit.SID_BalanceSTM_P2_SetMotors.SID_BalanceSTM_P2_SetMotors -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_SetMotors.SID_BalanceSTM_P2_SetMotors -> SKIP;
													enter!SID_BalanceSTM_P2_SetMotors!SID_BalanceSTM_P2_WaitForNextIteration -> entered!SID_BalanceSTM_P2_SetMotors!SID_BalanceSTM_P2_WaitForNextIteration ->
													State_BalanceSTM_P2_SetMotors(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_SetMotors_execute(id__,o____) = get_rotationOutput?rotationOutput -> get_speedOutput?speedOutput -> get_angleOutput?angleOutput -> true&CALL__setLeftMotorSpeed(
											id__,
											Minus(Plus(angleOutput, speedOutput, core_real), rotationOutput, core_real)
										);get_rotationOutput?rotationOutput -> get_speedOutput?speedOutput -> get_angleOutput?angleOutput -> true&CALL__setRightMotorSpeed(
											id__,
											Plus(Plus(angleOutput, speedOutput, core_real), rotationOutput, core_real)
										);WAIT_INTERVAL({ x | x <- { 0..const_BalanceSTM_P2_motorBudget}, 0<= x, x <=const_BalanceSTM_P2_motorBudget}); 
									entered!o____!SID_BalanceSTM_P2_SetMotors ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t19(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_SetMotors -> SKIP);
												State_BalanceSTM_P2_SetMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_SetMotors})!SID_BalanceSTM_P2_SetMotors -> (State_BalanceSTM_P2_SetMotors_execute(id__,x____))
							
							CS_BalanceSTM_P2_StopMotors_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors},
								y____ <- {SID_BalanceSTM_P2_StopMotors}
							|}
							
							
							BalanceSTM_P2_StopMotors_triggers = {|
								internal__.TID_BalanceSTM_P2_t17,
								internal__.TID_BalanceSTM_P2_t7,
								internal__.TID_BalanceSTM_P2_t18,
								internal__.TID_BalanceSTM_P2_t13,
								internal__.TID_BalanceSTM_P2_t9,
								rotationOutputE__.TID_BalanceSTM_P2_t15,
								internal__.TID_BalanceSTM_P2_t12,
								internal__.TID_BalanceSTM_P2_t20,
								internal__.TID_BalanceSTM_P2_t16,
								internal__.TID_BalanceSTM_P2_t6,
								speedOutputE__.TID_BalanceSTM_P2_t11,
								internal__.TID_BalanceSTM_P2_t8,
								angleOutputE__.TID_BalanceSTM_P2_t5,
								internal__.TID_BalanceSTM_P2_t10,
								internal__.TID_BalanceSTM_P2_t14,
								internal__.TID_BalanceSTM_P2_t19
							|}
							
							State_BalanceSTM_P2_StopMotors(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t20(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t20 ->  exit.SID_BalanceSTM_P2_StopMotors.SID_BalanceSTM_P2_StopMotors -> SKIP;
													SKIP;exited.SID_BalanceSTM_P2_StopMotors.SID_BalanceSTM_P2_StopMotors -> SKIP;
													enter!SID_BalanceSTM_P2_StopMotors!SID_BalanceSTM_P2_WaitForNextIteration -> entered!SID_BalanceSTM_P2_StopMotors!SID_BalanceSTM_P2_WaitForNextIteration ->
													State_BalanceSTM_P2_StopMotors(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
								State_BalanceSTM_P2_StopMotors_execute(id__,o____) = true&CALL__setLeftMotorSpeed(
											id__,
											0
										);true&CALL__setRightMotorSpeed(
											id__,
											0
										);WAIT_INTERVAL({ x | x <- { 0..const_BalanceSTM_P2_motorBudget}, 0<= x, x <=const_BalanceSTM_P2_motorBudget}); 
									entered!o____!SID_BalanceSTM_P2_StopMotors ->
									(SKIP; STOP /\ (
										T_BalanceSTM_P2_t20(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_P2_t17,TID_BalanceSTM_P2_t7,TID_BalanceSTM_P2_t18,TID_BalanceSTM_P2_t13,TID_BalanceSTM_P2_t9,TID_BalanceSTM_P2_t15,TID_BalanceSTM_P2_t12,TID_BalanceSTM_P2_t20,TID_BalanceSTM_P2_t16,TID_BalanceSTM_P2_t6,TID_BalanceSTM_P2_t11,TID_BalanceSTM_P2_t8,TID_BalanceSTM_P2_t5,TID_BalanceSTM_P2_t10,TID_BalanceSTM_P2_t14,TID_BalanceSTM_P2_t19})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (
												SKIP;
												exited!y____!SID_BalanceSTM_P2_StopMotors -> SKIP);
												State_BalanceSTM_P2_StopMotors(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
									))
							within
								enter?x____:diff(SIDS,{SID_BalanceSTM_P2_StopMotors})!SID_BalanceSTM_P2_StopMotors -> (State_BalanceSTM_P2_StopMotors_execute(id__,x____))
							
							
							I_BalanceSTM_P2_i0(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = let
								T_BalanceSTM_P2_t1(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget) = internal__!TID_BalanceSTM_P2_t1 -> enter!SID_BalanceSTM_P2!SID_BalanceSTM_P2_Initialisation -> entered!SID_BalanceSTM_P2!SID_BalanceSTM_P2_Initialisation ->
								SKIP
							within
								T_BalanceSTM_P2_t1(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
							
							
							State_BalanceSTM_P2_Initialisation_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_Initialisation(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_Initialisation_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_WaitForNextIteration_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_WaitForNextIteration(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_WaitForNextIteration_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_Setup_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_Setup(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_Setup_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_ReceiveInput_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_ReceiveInput(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_ReceiveInput_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_SendSpeed_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_SendSpeed(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_SendSpeed_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_SendAngle_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_SendAngle(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_SendAngle_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_SendRotation_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_SendRotation(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_SendRotation_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_SetMotors_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_SetMotors(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_SetMotors_triggers)|]
								SKIP
									 		
							State_BalanceSTM_P2_StopMotors_R(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								State_BalanceSTM_P2_StopMotors(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|diff(int_int,BalanceSTM_P2_StopMotors_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = (
								I_BalanceSTM_P2_i0(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors}),
											y____ <- {SID_BalanceSTM_P2_Initialisation,SID_BalanceSTM_P2_WaitForNextIteration,SID_BalanceSTM_P2_Setup,SID_BalanceSTM_P2_ReceiveInput,SID_BalanceSTM_P2_SendSpeed,SID_BalanceSTM_P2_SendAngle,SID_BalanceSTM_P2_SendRotation,SID_BalanceSTM_P2_SetMotors,SID_BalanceSTM_P2_StopMotors}
									|}|]
								(
									State_BalanceSTM_P2_Initialisation_R(id__,
											    const_BalanceSTM_P2_maxAngle,
											    const_BalanceSTM_P2_loopTime,
											    const_BalanceSTM_P2_startupDelay,
											    const_BalanceSTM_P2_speedUpdate,
											    const_BalanceSTM_P2_rotationUpdate,
											    const_BalanceSTM_P2_motorBudget,
											    const_BalanceSTM_P2_angleBudget,
											    const_BalanceSTM_P2_speedBudget,
											    const_BalanceSTM_P2_rotationBudget)
										[|inter(CS_BalanceSTM_P2_Initialisation_sync,union(union(union(union(union(union(union(CS_BalanceSTM_P2_WaitForNextIteration_sync,CS_BalanceSTM_P2_Setup_sync),CS_BalanceSTM_P2_ReceiveInput_sync),CS_BalanceSTM_P2_SendSpeed_sync),CS_BalanceSTM_P2_SendAngle_sync),CS_BalanceSTM_P2_SendRotation_sync),CS_BalanceSTM_P2_SetMotors_sync),CS_BalanceSTM_P2_StopMotors_sync))|]
									(
										State_BalanceSTM_P2_WaitForNextIteration_R(id__,
												    const_BalanceSTM_P2_maxAngle,
												    const_BalanceSTM_P2_loopTime,
												    const_BalanceSTM_P2_startupDelay,
												    const_BalanceSTM_P2_speedUpdate,
												    const_BalanceSTM_P2_rotationUpdate,
												    const_BalanceSTM_P2_motorBudget,
												    const_BalanceSTM_P2_angleBudget,
												    const_BalanceSTM_P2_speedBudget,
												    const_BalanceSTM_P2_rotationBudget)
											[|inter(CS_BalanceSTM_P2_WaitForNextIteration_sync,union(union(union(union(union(union(CS_BalanceSTM_P2_Setup_sync,CS_BalanceSTM_P2_ReceiveInput_sync),CS_BalanceSTM_P2_SendSpeed_sync),CS_BalanceSTM_P2_SendAngle_sync),CS_BalanceSTM_P2_SendRotation_sync),CS_BalanceSTM_P2_SetMotors_sync),CS_BalanceSTM_P2_StopMotors_sync))|]
										(
											State_BalanceSTM_P2_Setup_R(id__,
													    const_BalanceSTM_P2_maxAngle,
													    const_BalanceSTM_P2_loopTime,
													    const_BalanceSTM_P2_startupDelay,
													    const_BalanceSTM_P2_speedUpdate,
													    const_BalanceSTM_P2_rotationUpdate,
													    const_BalanceSTM_P2_motorBudget,
													    const_BalanceSTM_P2_angleBudget,
													    const_BalanceSTM_P2_speedBudget,
													    const_BalanceSTM_P2_rotationBudget)
												[|inter(CS_BalanceSTM_P2_Setup_sync,union(union(union(union(union(CS_BalanceSTM_P2_ReceiveInput_sync,CS_BalanceSTM_P2_SendSpeed_sync),CS_BalanceSTM_P2_SendAngle_sync),CS_BalanceSTM_P2_SendRotation_sync),CS_BalanceSTM_P2_SetMotors_sync),CS_BalanceSTM_P2_StopMotors_sync))|]
											(
												State_BalanceSTM_P2_ReceiveInput_R(id__,
														    const_BalanceSTM_P2_maxAngle,
														    const_BalanceSTM_P2_loopTime,
														    const_BalanceSTM_P2_startupDelay,
														    const_BalanceSTM_P2_speedUpdate,
														    const_BalanceSTM_P2_rotationUpdate,
														    const_BalanceSTM_P2_motorBudget,
														    const_BalanceSTM_P2_angleBudget,
														    const_BalanceSTM_P2_speedBudget,
														    const_BalanceSTM_P2_rotationBudget)
													[|inter(CS_BalanceSTM_P2_ReceiveInput_sync,union(union(union(union(CS_BalanceSTM_P2_SendSpeed_sync,CS_BalanceSTM_P2_SendAngle_sync),CS_BalanceSTM_P2_SendRotation_sync),CS_BalanceSTM_P2_SetMotors_sync),CS_BalanceSTM_P2_StopMotors_sync))|]
												(
													State_BalanceSTM_P2_SendSpeed_R(id__,
															    const_BalanceSTM_P2_maxAngle,
															    const_BalanceSTM_P2_loopTime,
															    const_BalanceSTM_P2_startupDelay,
															    const_BalanceSTM_P2_speedUpdate,
															    const_BalanceSTM_P2_rotationUpdate,
															    const_BalanceSTM_P2_motorBudget,
															    const_BalanceSTM_P2_angleBudget,
															    const_BalanceSTM_P2_speedBudget,
															    const_BalanceSTM_P2_rotationBudget)
														[|inter(CS_BalanceSTM_P2_SendSpeed_sync,union(union(union(CS_BalanceSTM_P2_SendAngle_sync,CS_BalanceSTM_P2_SendRotation_sync),CS_BalanceSTM_P2_SetMotors_sync),CS_BalanceSTM_P2_StopMotors_sync))|]
													(
														State_BalanceSTM_P2_SendAngle_R(id__,
																    const_BalanceSTM_P2_maxAngle,
																    const_BalanceSTM_P2_loopTime,
																    const_BalanceSTM_P2_startupDelay,
																    const_BalanceSTM_P2_speedUpdate,
																    const_BalanceSTM_P2_rotationUpdate,
																    const_BalanceSTM_P2_motorBudget,
																    const_BalanceSTM_P2_angleBudget,
																    const_BalanceSTM_P2_speedBudget,
																    const_BalanceSTM_P2_rotationBudget)
															[|inter(CS_BalanceSTM_P2_SendAngle_sync,union(union(CS_BalanceSTM_P2_SendRotation_sync,CS_BalanceSTM_P2_SetMotors_sync),CS_BalanceSTM_P2_StopMotors_sync))|]
														(
															State_BalanceSTM_P2_SendRotation_R(id__,
																	    const_BalanceSTM_P2_maxAngle,
																	    const_BalanceSTM_P2_loopTime,
																	    const_BalanceSTM_P2_startupDelay,
																	    const_BalanceSTM_P2_speedUpdate,
																	    const_BalanceSTM_P2_rotationUpdate,
																	    const_BalanceSTM_P2_motorBudget,
																	    const_BalanceSTM_P2_angleBudget,
																	    const_BalanceSTM_P2_speedBudget,
																	    const_BalanceSTM_P2_rotationBudget)
																[|inter(CS_BalanceSTM_P2_SendRotation_sync,union(CS_BalanceSTM_P2_SetMotors_sync,CS_BalanceSTM_P2_StopMotors_sync))|]
															(
																State_BalanceSTM_P2_SetMotors_R(id__,
																		    const_BalanceSTM_P2_maxAngle,
																		    const_BalanceSTM_P2_loopTime,
																		    const_BalanceSTM_P2_startupDelay,
																		    const_BalanceSTM_P2_speedUpdate,
																		    const_BalanceSTM_P2_rotationUpdate,
																		    const_BalanceSTM_P2_motorBudget,
																		    const_BalanceSTM_P2_angleBudget,
																		    const_BalanceSTM_P2_speedBudget,
																		    const_BalanceSTM_P2_rotationBudget)
																	[|inter(CS_BalanceSTM_P2_SetMotors_sync,CS_BalanceSTM_P2_StopMotors_sync)|]
																State_BalanceSTM_P2_StopMotors_R(id__,
																		    const_BalanceSTM_P2_maxAngle,
																		    const_BalanceSTM_P2_loopTime,
																		    const_BalanceSTM_P2_startupDelay,
																		    const_BalanceSTM_P2_speedUpdate,
																		    const_BalanceSTM_P2_rotationUpdate,
																		    const_BalanceSTM_P2_motorBudget,
																		    const_BalanceSTM_P2_angleBudget,
																		    const_BalanceSTM_P2_speedBudget,
																		    const_BalanceSTM_P2_rotationBudget)
															)
														)
													)
												)
											)
										)
									)
								)
							)
							
							-- optimized memory process
							channel getV_currAngle: core_real
							channel getV_currGyroX: core_real
							channel getV_currGyroY: core_real
							channel getV_currGyroZ: core_real
							channel getV_currLeftVel: core_real
							channel getV_currRightVel: core_real
							channel getV_speedCount: core_nat
							channel getV_rotationCount: core_nat
							channel getV_angleOutput: core_real
							channel getV_speedOutput: core_real
							channel getV_rotationOutput: core_real
							channel getV_speedSent: core_boolean
							channel getV_angleSent: core_boolean
							channel getV_rotationSent: core_boolean
							channel getV_angleReceived: core_boolean
							channel getV_speedIntegral: core_real
							
							-- individual memory processes
							Memory_currAngle(x__) = ( 
								get_currAngle!x__ -> Memory_currAngle(x__)
								[]
								getV_currAngle!x__ -> Memory_currAngle(x__)
								[]
								set_currAngle?x__ -> Memory_currAngle(x__)
							)
							Memory_currGyroX(x__) = ( 
								get_currGyroX!x__ -> Memory_currGyroX(x__)
								[]
								getV_currGyroX!x__ -> Memory_currGyroX(x__)
								[]
								set_currGyroX?x__ -> Memory_currGyroX(x__)
							)
							Memory_currGyroY(x__) = ( 
								get_currGyroY!x__ -> Memory_currGyroY(x__)
								[]
								getV_currGyroY!x__ -> Memory_currGyroY(x__)
								[]
								set_currGyroY?x__ -> Memory_currGyroY(x__)
							)
							Memory_currGyroZ(x__) = ( 
								get_currGyroZ!x__ -> Memory_currGyroZ(x__)
								[]
								getV_currGyroZ!x__ -> Memory_currGyroZ(x__)
								[]
								set_currGyroZ?x__ -> Memory_currGyroZ(x__)
							)
							Memory_currLeftVel(x__) = ( 
								get_currLeftVel!x__ -> Memory_currLeftVel(x__)
								[]
								getV_currLeftVel!x__ -> Memory_currLeftVel(x__)
								[]
								set_currLeftVel?x__ -> Memory_currLeftVel(x__)
							)
							Memory_currRightVel(x__) = ( 
								get_currRightVel!x__ -> Memory_currRightVel(x__)
								[]
								getV_currRightVel!x__ -> Memory_currRightVel(x__)
								[]
								set_currRightVel?x__ -> Memory_currRightVel(x__)
							)
							Memory_speedCount(x__) = ( 
								get_speedCount!x__ -> Memory_speedCount(x__)
								[]
								getV_speedCount!x__ -> Memory_speedCount(x__)
								[]
								set_speedCount?x__ -> Memory_speedCount(x__)
							)
							Memory_rotationCount(x__) = ( 
								get_rotationCount!x__ -> Memory_rotationCount(x__)
								[]
								getV_rotationCount!x__ -> Memory_rotationCount(x__)
								[]
								set_rotationCount?x__ -> Memory_rotationCount(x__)
							)
							Memory_angleOutput(x__) = ( 
								get_angleOutput!x__ -> Memory_angleOutput(x__)
								[]
								getV_angleOutput!x__ -> Memory_angleOutput(x__)
								[]
								set_angleOutput?x__ -> Memory_angleOutput(x__)
								[]
								angleOutputE__!TID_BalanceSTM_P2_t5.in?angleOutput -> Memory_angleOutput(angleOutput)
							)
							Memory_speedOutput(x__) = ( 
								get_speedOutput!x__ -> Memory_speedOutput(x__)
								[]
								getV_speedOutput!x__ -> Memory_speedOutput(x__)
								[]
								set_speedOutput?x__ -> Memory_speedOutput(x__)
								[]
								speedOutputE__!TID_BalanceSTM_P2_t11.in?speedOutput -> Memory_speedOutput(speedOutput)
							)
							Memory_rotationOutput(x__) = ( 
								get_rotationOutput!x__ -> Memory_rotationOutput(x__)
								[]
								getV_rotationOutput!x__ -> Memory_rotationOutput(x__)
								[]
								set_rotationOutput?x__ -> Memory_rotationOutput(x__)
								[]
								rotationOutputE__!TID_BalanceSTM_P2_t15.in?rotationOutput -> Memory_rotationOutput(rotationOutput)
							)
							Memory_speedSent(x__) = ( 
								get_speedSent!x__ -> Memory_speedSent(x__)
								[]
								getV_speedSent!x__ -> Memory_speedSent(x__)
								[]
								set_speedSent?x__ -> Memory_speedSent(x__)
							)
							Memory_angleSent(x__) = ( 
								get_angleSent!x__ -> Memory_angleSent(x__)
								[]
								getV_angleSent!x__ -> Memory_angleSent(x__)
								[]
								set_angleSent?x__ -> Memory_angleSent(x__)
							)
							Memory_rotationSent(x__) = ( 
								get_rotationSent!x__ -> Memory_rotationSent(x__)
								[]
								getV_rotationSent!x__ -> Memory_rotationSent(x__)
								[]
								set_rotationSent?x__ -> Memory_rotationSent(x__)
							)
							Memory_angleReceived(x__) = ( 
								get_angleReceived!x__ -> Memory_angleReceived(x__)
								[]
								getV_angleReceived!x__ -> Memory_angleReceived(x__)
								[]
								set_angleReceived?x__ -> Memory_angleReceived(x__)
							)
							Memory_speedIntegral(x__) = ( 
								get_speedIntegral!x__ -> Memory_speedIntegral(x__)
								[]
								getV_speedIntegral!x__ -> Memory_speedIntegral(x__)
								[]
								set_speedIntegral?x__ -> Memory_speedIntegral(x__)
							)
							Memory_WC_TID_BalanceSTM_P2_t12_0(x__) = (
								getWC.WC_TID_BalanceSTM_P2_t12_0_ID!x__ -> Memory_WC_TID_BalanceSTM_P2_t12_0(x__)
								[]
								setWC.WC_TID_BalanceSTM_P2_t12_0_ID?x__ -> Memory_WC_TID_BalanceSTM_P2_t12_0(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 currAngle,
								 currGyroX,
								 currGyroY,
								 currGyroZ,
								 currLeftVel,
								 currRightVel,
								 speedCount,
								 rotationCount,
								 angleOutput,
								 speedOutput,
								 rotationOutput,
								 speedSent,
								 angleSent,
								 rotationSent,
								 angleReceived,
								 speedIntegral,
								 WC_TID_BalanceSTM_P2_t12_0,
								 const_BalanceSTM_P2_maxAngle,
								 const_BalanceSTM_P2_loopTime,
								 const_BalanceSTM_P2_startupDelay,
								 const_BalanceSTM_P2_speedUpdate,
								 const_BalanceSTM_P2_rotationUpdate,
								 const_BalanceSTM_P2_motorBudget,
								 const_BalanceSTM_P2_angleBudget,
								 const_BalanceSTM_P2_speedBudget,
								 const_BalanceSTM_P2_rotationBudget) = (
								(((((angleReceived==true)) and ((((speedCount==0)) or ((speedCount<const_BalanceSTM_P2_speedUpdate))))) and ((((rotationCount==0)) or ((rotationCount<const_BalanceSTM_P2_rotationUpdate))))))&internal__!TID_BalanceSTM_P2_t6 -> SKIP
								[]
								angleOutputE__!TID_BalanceSTM_P2_t5.in?angleOutput:{angleOutput|angleOutput <- core_real, (((angleSent==true) and (angleReceived==false)))} -> SKIP
								[]
								((((angleSent==false) and ((angleReceived==false)))))&internal__!TID_BalanceSTM_P2_t8 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t7 -> SKIP
								[]
								speedOutputE__!TID_BalanceSTM_P2_t11.in?speedOutput:{speedOutput|speedOutput <- core_real, (speedSent==true)} -> SKIP
								[]
								(((((speedSent==false) and (((speedCount>=const_BalanceSTM_P2_speedUpdate) and (speedCount>0))))) and (angleSent==true)))&internal__!TID_BalanceSTM_P2_t13 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t14 -> SKIP
								[]
								rotationOutputE__!TID_BalanceSTM_P2_t15.in?rotationOutput:{rotationOutput|rotationOutput <- core_real, (rotationSent==true)} -> SKIP
								[]
								((((((rotationSent==false) and (((rotationCount>=const_BalanceSTM_P2_rotationUpdate) and (rotationCount>0))))) and (angleSent==true)) and ((((speedCount==0)) or ((speedCount<const_BalanceSTM_P2_speedUpdate))))))&internal__!TID_BalanceSTM_P2_t16 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t17 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t1 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t4 -> SKIP
								[]
								(WC_TID_BalanceSTM_P2_t12_0)&internal__!TID_BalanceSTM_P2_t12 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t18 -> SKIP
								[]
								(((currAngle<=const_BalanceSTM_P2_maxAngle) and (currAngle>=Neg(const_BalanceSTM_P2_maxAngle, core_int))))&internal__!TID_BalanceSTM_P2_t9 -> SKIP
								[]
								(((currAngle>const_BalanceSTM_P2_maxAngle) or (currAngle<Neg(const_BalanceSTM_P2_maxAngle, core_int))))&internal__!TID_BalanceSTM_P2_t10 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t19 -> SKIP
								[]
								internal__!TID_BalanceSTM_P2_t20 -> SKIP
							
								[]
									set_currAngle?x__ -> SKIP
								[]
								set_currGyroX?x__ -> SKIP
								[]
								set_currGyroY?x__ -> SKIP
								[]
								set_currGyroZ?x__ -> SKIP
								[]
								set_currLeftVel?x__ -> SKIP
								[]
								set_currRightVel?x__ -> SKIP
								[]
								set_speedCount?x__ -> SKIP
								[]
								set_rotationCount?x__ -> SKIP
								[]
								set_angleOutput?x__ -> SKIP
								[]
								set_speedOutput?x__ -> SKIP
								[]
								set_rotationOutput?x__ -> SKIP
								[]
								set_speedSent?x__ -> SKIP
								[]
								set_angleSent?x__ -> SKIP
								[]
								set_rotationSent?x__ -> SKIP
								[]
								set_angleReceived?x__ -> SKIP
								[]
								set_speedIntegral?x__ -> SKIP
							
								[]
									setWC.WC_TID_BalanceSTM_P2_t12_0_ID?x__ -> SKIP
							 	)
							MemoryTransitions_BalanceSTM_P2(id__,
								 const_BalanceSTM_P2_maxAngle,
								 const_BalanceSTM_P2_loopTime,
								 const_BalanceSTM_P2_startupDelay,
								 const_BalanceSTM_P2_speedUpdate,
								 const_BalanceSTM_P2_rotationUpdate,
								 const_BalanceSTM_P2_motorBudget,
								 const_BalanceSTM_P2_angleBudget,
								 const_BalanceSTM_P2_speedBudget,
								 const_BalanceSTM_P2_rotationBudget) =
								(
								getV_currAngle?currAngle ->	
								getV_currGyroX?currGyroX ->	
								getV_currGyroY?currGyroY ->	
								getV_currGyroZ?currGyroZ ->	
								getV_currLeftVel?currLeftVel ->	
								getV_currRightVel?currRightVel ->	
								getV_speedCount?speedCount ->	
								getV_rotationCount?rotationCount ->	
								getV_angleOutput?angleOutput ->	
								getV_speedOutput?speedOutput ->	
								getV_rotationOutput?rotationOutput ->	
								getV_speedSent?speedSent ->	
								getV_angleSent?angleSent ->	
								getV_rotationSent?rotationSent ->	
								getV_angleReceived?angleReceived ->	
								getV_speedIntegral?speedIntegral ->	
								getWC.WC_TID_BalanceSTM_P2_t12_0_ID?WC_TID_BalanceSTM_P2_t12_0 ->
								 MemoryTransitions(id__,
								 	 currAngle,
								 	 currGyroX,
								 	 currGyroY,
								 	 currGyroZ,
								 	 currLeftVel,
								 	 currRightVel,
								 	 speedCount,
								 	 rotationCount,
								 	 angleOutput,
								 	 speedOutput,
								 	 rotationOutput,
								 	 speedSent,
								 	 angleSent,
								 	 rotationSent,
								 	 angleReceived,
								 	 speedIntegral,
								 	 WC_TID_BalanceSTM_P2_t12_0,
								 	 const_BalanceSTM_P2_maxAngle,
								 	 const_BalanceSTM_P2_loopTime,
								 	 const_BalanceSTM_P2_startupDelay,
								 	 const_BalanceSTM_P2_speedUpdate,
								 	 const_BalanceSTM_P2_rotationUpdate,
								 	 const_BalanceSTM_P2_motorBudget,
								 	 const_BalanceSTM_P2_angleBudget,
								 	 const_BalanceSTM_P2_speedBudget,
								 	 const_BalanceSTM_P2_rotationBudget);
								 MemoryTransitions_BalanceSTM_P2(id__,
								 	 const_BalanceSTM_P2_maxAngle,
								 	 const_BalanceSTM_P2_loopTime,
								 	 const_BalanceSTM_P2_startupDelay,
								 	 const_BalanceSTM_P2_speedUpdate,
								 	 const_BalanceSTM_P2_rotationUpdate,
								 	 const_BalanceSTM_P2_motorBudget,
								 	 const_BalanceSTM_P2_angleBudget,
								 	 const_BalanceSTM_P2_speedBudget,
								 	 const_BalanceSTM_P2_rotationBudget)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_BalanceSTM_P2 = Union(
								{
									{
										Memory_currAngle(0),
										Memory_currGyroX(0),
										Memory_currGyroY(0),
										Memory_currGyroZ(0),
										Memory_currLeftVel(0),
										Memory_currRightVel(0),
										Memory_speedCount(0),
										Memory_rotationCount(0),
										Memory_angleOutput(0),
										Memory_speedOutput(0),
										Memory_rotationOutput(0),
										Memory_speedSent(true),
										Memory_angleSent(true),
										Memory_rotationSent(true),
										Memory_angleReceived(true),
										Memory_speedIntegral(0),
										Memory_WC_TID_BalanceSTM_P2_t12_0(false)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_angleReceived,
									set_currLeftVel,
									getV_rotationCount,
									getV_currRightVel,
									rotationOutputE__.TID_BalanceSTM_P2_t15,
									set_angleSent,
									getWC.WC_TID_BalanceSTM_P2_t12_0_ID,
									set_speedSent,
									getV_angleOutput,
									set_speedCount,
									getV_rotationSent,
									getV_angleSent,
									set_speedIntegral,
									getV_speedSent,
									setWC.WC_TID_BalanceSTM_P2_t12_0_ID,
									set_rotationCount,
									getV_speedOutput,
									getV_rotationOutput,
									getV_angleReceived,
									getV_currGyroZ,
									getV_currGyroX,
									setWC,
									getV_currGyroY,
									speedOutputE__.TID_BalanceSTM_P2_t11,
									set_currAngle,
									set_currRightVel,
									getV_speedCount,
									set_angleOutput,
									set_rotationSent,
									set_rotationOutput,
									set_currGyroZ,
									getV_currAngle,
									getV_currLeftVel,
									set_speedOutput,
									set_currGyroX,
									set_currGyroY,
									angleOutputE__.TID_BalanceSTM_P2_t5,
									getV_speedIntegral
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_rotationCount,
									getV_speedOutput,
									getV_rotationOutput,
									getV_angleReceived,
									getV_currGyroZ,
									getV_currRightVel,
									getV_currGyroX,
									getV_currGyroY,
									getV_angleOutput,
									getV_speedCount,
									getV_rotationSent,
									getV_angleSent,
									getWC,
									getV_currAngle,
									getV_speedSent,
									getV_currLeftVel,
									getV_speedIntegral
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_BalanceSTM_P2 @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_BalanceSTM_P2_maxAngle,
								 const_BalanceSTM_P2_loopTime,
								 const_BalanceSTM_P2_startupDelay,
								 const_BalanceSTM_P2_speedUpdate,
								 const_BalanceSTM_P2_rotationUpdate,
								 const_BalanceSTM_P2_motorBudget,
								 const_BalanceSTM_P2_angleBudget,
								 const_BalanceSTM_P2_speedBudget,
								 const_BalanceSTM_P2_rotationBudget) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_BalanceSTM_P2(id__,
								 const_BalanceSTM_P2_maxAngle,
								 const_BalanceSTM_P2_loopTime,
								 const_BalanceSTM_P2_startupDelay,
								 const_BalanceSTM_P2_speedUpdate,
								 const_BalanceSTM_P2_rotationUpdate,
								 const_BalanceSTM_P2_motorBudget,
								 const_BalanceSTM_P2_angleBudget,
								 const_BalanceSTM_P2_speedBudget,
								 const_BalanceSTM_P2_rotationBudget)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {maxAngle,currAngle}
							-- {}
							-- {speedUpdate,rotationUpdate,angleSent,rotationCount,speedCount,rotationSent}
							-- {speedUpdate,rotationUpdate,rotationCount,angleReceived,speedCount}
							-- {WC_TID_BalanceSTM_P2_t12_0}
							-- {speedUpdate,speedSent,angleSent,speedCount}
							-- {angleSent,angleReceived}
							-- Summary of all identified named elements:
							-- {
							-- speedIntegral
							-- rotationUpdate
							-- speedOutput
							-- speedSent
							-- maxAngle
							-- rotationCount
							-- angleReceived
							-- currAngle
							-- WC_TID_BalanceSTM_P2_t12_0
							-- rotationSent
							-- currGyroY
							-- speedUpdate
							-- currGyroX
							-- currGyroZ
							-- angleSent
							-- rotationOutput
							-- currRightVel
							-- currLeftVel
							-- angleOutput
							-- speedCount
							-- }
							
							-- Allocation plan:
							-- 2:{maxAngle,currAngle}
							--	=> {
							--		TID_BalanceSTM_P2_t10,
							--		TID_BalanceSTM_P2_t9}
							-- 0:{}
							--	=> {
							--		TID_BalanceSTM_P2_t7,
							--		TID_BalanceSTM_P2_t18,
							--		TID_BalanceSTM_P2_t17,
							--		TID_BalanceSTM_P2_t1,
							--		TID_BalanceSTM_P2_t19,
							--		TID_BalanceSTM_P2_t20,
							--		TID_BalanceSTM_P2_t14,
							--		TID_BalanceSTM_P2_t4}
							-- 6:{speedUpdate,rotationUpdate,angleSent,rotationCount,speedCount,rotationSent}
							--	=> {
							--		TID_BalanceSTM_P2_t16,
							--		TID_BalanceSTM_P2_t15}
							-- 5:{speedUpdate,rotationUpdate,rotationCount,angleReceived,speedCount}
							--	=> {
							--		TID_BalanceSTM_P2_t6}
							-- 1:{WC_TID_BalanceSTM_P2_t12_0}
							--	=> {
							--		TID_BalanceSTM_P2_t12}
							-- 4:{speedUpdate,speedSent,angleSent,speedCount}
							--	=> {
							--		TID_BalanceSTM_P2_t13,
							--		TID_BalanceSTM_P2_t11}
							-- 3:{angleSent,angleReceived}
							--	=> {
							--		TID_BalanceSTM_P2_t5,
							--		TID_BalanceSTM_P2_t8}
							
							-- Memory transition processes
							MemoryTransitions_opt_2(id__,
								 const_BalanceSTM_P2_maxAngle) =
							(
								let
									Update = 
									get_currAngle?currAngle ->
									Current(id__,
										 currAngle)
									Current(id__,
										 currAngle)
									 	   = 
									 	   (((currAngle>const_BalanceSTM_P2_maxAngle) or (currAngle<Neg(const_BalanceSTM_P2_maxAngle, core_int))))&(internal__!TID_BalanceSTM_P2_t10 -> Update)
									 	   []
									 	   (((currAngle<=const_BalanceSTM_P2_maxAngle) and (currAngle>=Neg(const_BalanceSTM_P2_maxAngle, core_int))))&(internal__!TID_BalanceSTM_P2_t9 -> Update)
									 	   	 
									 	   	 []
									 	   	 set_currAngle?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_BalanceSTM_P2_t7 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t18 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t17 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t1 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t19 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t20 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t14 -> Update
									 	   []
									 	   internal__!TID_BalanceSTM_P2_t4 -> Update
								within
									Update
							)
							MemoryTransitions_opt_6(id__,
								 const_BalanceSTM_P2_speedUpdate,
								 const_BalanceSTM_P2_rotationUpdate) =
							(
								let
									Update = 
									get_angleSent?angleSent ->
									get_rotationCount?rotationCount ->
									get_speedCount?speedCount ->
									get_rotationSent?rotationSent ->
									Current(id__,
										 angleSent,
										 rotationCount,
										 speedCount,
										 rotationSent)
									Current(id__,
										 angleSent,
										 rotationCount,
										 speedCount,
										 rotationSent)
									 	   = 
									 	   ((((((rotationSent==false) and (((rotationCount>=const_BalanceSTM_P2_rotationUpdate) and (rotationCount>0))))) and (angleSent==true)) and ((((speedCount==0)) or ((speedCount<const_BalanceSTM_P2_speedUpdate))))))&(internal__!TID_BalanceSTM_P2_t16 -> Update)
									 	   []
									 	   rotationOutputE__!TID_BalanceSTM_P2_t15.in?rotationOutput:{rotationOutput|rotationOutput <- core_real, (rotationSent==true)} -> Update
									 	   	 
									 	   	 []
									 	   	 set_angleSent?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_rotationCount?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_speedCount?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_rotationSent?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_5(id__,
								 const_BalanceSTM_P2_speedUpdate,
								 const_BalanceSTM_P2_rotationUpdate) =
							(
								let
									Update = 
									get_rotationCount?rotationCount ->
									get_angleReceived?angleReceived ->
									get_speedCount?speedCount ->
									Current(id__,
										 rotationCount,
										 angleReceived,
										 speedCount)
									Current(id__,
										 rotationCount,
										 angleReceived,
										 speedCount)
									 	   = 
									 	   (((((angleReceived==true)) and ((((speedCount==0)) or ((speedCount<const_BalanceSTM_P2_speedUpdate))))) and ((((rotationCount==0)) or ((rotationCount<const_BalanceSTM_P2_rotationUpdate))))))&(internal__!TID_BalanceSTM_P2_t6 -> Update)
									 	   	 
									 	   	 []
									 	   	 set_rotationCount?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_angleReceived?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_speedCount?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_1(id__) =
							(
								let
									Update = 
									getWC.WC_TID_BalanceSTM_P2_t12_0_ID?WC_TID_BalanceSTM_P2_t12_0 ->
									Current(id__,
										 WC_TID_BalanceSTM_P2_t12_0)
									Current(id__,
										 WC_TID_BalanceSTM_P2_t12_0)
									 	   = 
									 	   (WC_TID_BalanceSTM_P2_t12_0)&(internal__!TID_BalanceSTM_P2_t12 -> Update)
									 	   	 
									 	   	 []
									 	   	 setWC.WC_TID_BalanceSTM_P2_t12_0_ID?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_4(id__,
								 const_BalanceSTM_P2_speedUpdate) =
							(
								let
									Update = 
									get_speedSent?speedSent ->
									get_angleSent?angleSent ->
									get_speedCount?speedCount ->
									Current(id__,
										 speedSent,
										 angleSent,
										 speedCount)
									Current(id__,
										 speedSent,
										 angleSent,
										 speedCount)
									 	   = 
									 	   (((((speedSent==false) and (((speedCount>=const_BalanceSTM_P2_speedUpdate) and (speedCount>0))))) and (angleSent==true)))&(internal__!TID_BalanceSTM_P2_t13 -> Update)
									 	   []
									 	   speedOutputE__!TID_BalanceSTM_P2_t11.in?speedOutput:{speedOutput|speedOutput <- core_real, (speedSent==true)} -> Update
									 	   	 
									 	   	 []
									 	   	 set_speedSent?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_angleSent?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_speedCount?x__ -> Update
								within
									Update
							)
							MemoryTransitions_opt_3(id__) =
							(
								let
									Update = 
									get_angleSent?angleSent ->
									get_angleReceived?angleReceived ->
									Current(id__,
										 angleSent,
										 angleReceived)
									Current(id__,
										 angleSent,
										 angleReceived)
									 	   = 
									 	   angleOutputE__!TID_BalanceSTM_P2_t5.in?angleOutput:{angleOutput|angleOutput <- core_real, (((angleSent==true) and (angleReceived==false)))} -> Update
									 	   []
									 	   ((((angleSent==false) and ((angleReceived==false)))))&(internal__!TID_BalanceSTM_P2_t8 -> Update)
									 	   	 
									 	   	 []
									 	   	 set_angleSent?x__ -> Update
									 	   	 []
									 	   	 
									 	   	 set_angleReceived?x__ -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_speedIntegral(x__) = ( 
								get_speedIntegral!x__ -> Memory_opt_speedIntegral(x__)
								[]
								set_speedIntegral?x__ -> Memory_opt_speedIntegral(x__)
							)
							Memory_opt_speedOutput(x__) = ( 
								get_speedOutput!x__ -> Memory_opt_speedOutput(x__)
								[]
								set_speedOutput?x__ -> Memory_opt_speedOutput(x__)
							)
							Memory_opt_speedSent(x__) = ( 
								get_speedSent!x__ -> Memory_opt_speedSent(x__)
								[]
								set_speedSent?x__ -> Memory_opt_speedSent(x__)
							)
							Memory_opt_rotationCount(x__) = ( 
								get_rotationCount!x__ -> Memory_opt_rotationCount(x__)
								[]
								set_rotationCount?x__ -> Memory_opt_rotationCount(x__)
							)
							Memory_opt_angleReceived(x__) = ( 
								get_angleReceived!x__ -> Memory_opt_angleReceived(x__)
								[]
								set_angleReceived?x__ -> Memory_opt_angleReceived(x__)
							)
							Memory_opt_currAngle(x__) = ( 
								get_currAngle!x__ -> Memory_opt_currAngle(x__)
								[]
								set_currAngle?x__ -> Memory_opt_currAngle(x__)
							)
							Memory_opt_WC_TID_BalanceSTM_P2_t12_0(x__) = ( 
								getWC.WC_TID_BalanceSTM_P2_t12_0_ID!x__ -> Memory_opt_WC_TID_BalanceSTM_P2_t12_0(x__)
								[]
								setWC.WC_TID_BalanceSTM_P2_t12_0_ID?x__ -> Memory_opt_WC_TID_BalanceSTM_P2_t12_0(x__)
							)
							Memory_opt_rotationSent(x__) = ( 
								get_rotationSent!x__ -> Memory_opt_rotationSent(x__)
								[]
								set_rotationSent?x__ -> Memory_opt_rotationSent(x__)
							)
							Memory_opt_currGyroY(x__) = ( 
								get_currGyroY!x__ -> Memory_opt_currGyroY(x__)
								[]
								set_currGyroY?x__ -> Memory_opt_currGyroY(x__)
							)
							Memory_opt_currGyroX(x__) = ( 
								get_currGyroX!x__ -> Memory_opt_currGyroX(x__)
								[]
								set_currGyroX?x__ -> Memory_opt_currGyroX(x__)
							)
							Memory_opt_currGyroZ(x__) = ( 
								get_currGyroZ!x__ -> Memory_opt_currGyroZ(x__)
								[]
								set_currGyroZ?x__ -> Memory_opt_currGyroZ(x__)
							)
							Memory_opt_angleSent(x__) = ( 
								get_angleSent!x__ -> Memory_opt_angleSent(x__)
								[]
								set_angleSent?x__ -> Memory_opt_angleSent(x__)
							)
							Memory_opt_rotationOutput(x__) = ( 
								get_rotationOutput!x__ -> Memory_opt_rotationOutput(x__)
								[]
								set_rotationOutput?x__ -> Memory_opt_rotationOutput(x__)
							)
							Memory_opt_currRightVel(x__) = ( 
								get_currRightVel!x__ -> Memory_opt_currRightVel(x__)
								[]
								set_currRightVel?x__ -> Memory_opt_currRightVel(x__)
							)
							Memory_opt_currLeftVel(x__) = ( 
								get_currLeftVel!x__ -> Memory_opt_currLeftVel(x__)
								[]
								set_currLeftVel?x__ -> Memory_opt_currLeftVel(x__)
							)
							Memory_opt_angleOutput(x__) = ( 
								get_angleOutput!x__ -> Memory_opt_angleOutput(x__)
								[]
								set_angleOutput?x__ -> Memory_opt_angleOutput(x__)
							)
							Memory_opt_speedCount(x__) = ( 
								get_speedCount!x__ -> Memory_opt_speedCount(x__)
								[]
								set_speedCount?x__ -> Memory_opt_speedCount(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) =
								dbisim(
								  sbisim(Memory_opt_angleSent(true)
								      	[| {|get_angleSent,set_angleSent|} |] 
								      	dbisim(
								      	  sbisim(Memory_opt_rotationCount(0)
								      	      	[| {|set_rotationCount,get_rotationCount|} |] 
								      	      	dbisim(
								      	      	  sbisim(Memory_opt_speedCount(0)
								      	      	      	[| {|set_speedCount,get_speedCount|} |] 
								      	      	      	dbisim(
								      	      	      	  sbisim(Memory_opt_rotationSent(true)
								      	      	      	      	[| {|set_rotationSent,get_rotationSent|} |] 
								      	      	      	      	sbisim(	
								      	      	      	      	  dbisim(
								      	      	      	      	    sbisim(dbisim(
								      	      	      	      	      sbisim(Memory_opt_angleReceived(true)
								      	      	      	      	          	[| {|set_angleReceived,get_angleReceived|} |] 
								      	      	      	      	          	sbisim(	
								      	      	      	      	          	  dbisim(
								      	      	      	      	          	    sbisim(dbisim(
								      	      	      	      	          	      sbisim(Memory_opt_WC_TID_BalanceSTM_P2_t12_0(false)
								      	      	      	      	          	          	[| {|getWC.WC_TID_BalanceSTM_P2_t12_0_ID,setWC.WC_TID_BalanceSTM_P2_t12_0_ID|} |] 
								      	      	      	      	          	          	sbisim(	
								      	      	      	      	          	          	  dbisim(
								      	      	      	      	          	          	    sbisim(sbisim(	
								      	      	      	      	          	          	      dbisim(
								      	      	      	      	          	          	        sbisim(sbisim(	
								      	      	      	      	          	          	          dbisim(
								      	      	      	      	          	          	            sbisim(dbisim(
								      	      	      	      	          	          	              sbisim(Memory_opt_currAngle(0)
								      	      	      	      	          	          	                  	[| {|set_currAngle,get_currAngle|} |] 
								      	      	      	      	          	          	                  	sbisim(	
								      	      	      	      	          	          	                  	  dbisim(
								      	      	      	      	          	          	                  	    sbisim(dbisim(
								      	      	      	      	          	          	                  	      sbisim(Memory_opt_speedSent(true)
								      	      	      	      	          	          	                  	          	[| {|set_speedSent,get_speedSent|} |] 
								      	      	      	      	          	          	                  	          	sbisim(	
								      	      	      	      	          	          	                  	          	  dbisim(
								      	      	      	      	          	          	                  	          	    sbisim(dbisim(sbisim(Memory_opt_speedIntegral(0)
								      	      	      	      	          	          	                  	          	          	[| {|set_speedIntegral,get_speedIntegral|} |] 
								      	      	      	      	          	          	                  	          	          	dbisim(sbisim(Memory_opt_speedOutput(0)
								      	      	      	      	          	          	                  	          	          	      	[| {|get_speedOutput,set_speedOutput|} |] 
								      	      	      	      	          	          	                  	          	          	      	dbisim(sbisim(Memory_opt_currGyroY(0)
								      	      	      	      	          	          	                  	          	          	      	      	[| {|set_currGyroY,get_currGyroY|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	dbisim(sbisim(Memory_opt_currGyroX(0)
								      	      	      	      	          	          	                  	          	          	      	      	      	[| {|set_currGyroX,get_currGyroX|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	      	dbisim(sbisim(Memory_opt_currGyroZ(0)
								      	      	      	      	          	          	                  	          	          	      	      	      	      	[| {|get_currGyroZ,set_currGyroZ|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	      	      	dbisim(sbisim(Memory_opt_rotationOutput(0)
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	[| {|set_rotationOutput,get_rotationOutput|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	dbisim(sbisim(Memory_opt_currRightVel(0)
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	[| {|get_currRightVel,set_currRightVel|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	dbisim(sbisim(Memory_opt_currLeftVel(0)
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	[| {|get_currLeftVel,set_currLeftVel|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	dbisim(sbisim(Memory_opt_angleOutput(0)
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      	[| {|set_angleOutput,get_angleOutput|} |] 
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      	STM_core(id__,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_maxAngle,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_loopTime,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_startupDelay,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_speedUpdate,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_rotationUpdate,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_motorBudget,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_angleBudget,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_speedBudget,
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      			    const_BalanceSTM_P2_rotationBudget)
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      	)\ {|set_angleOutput,get_angleOutput|}
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	      )
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      	)\ {|get_currLeftVel,set_currLeftVel|}
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	      )
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      	)\ {|get_currRightVel,set_currRightVel|}
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	      )
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      	)\ {|set_rotationOutput,get_rotationOutput|}
								      	      	      	      	          	          	                  	          	          	      	      	      	      	      )
								      	      	      	      	          	          	                  	          	          	      	      	      	      	)\ {|get_currGyroZ,set_currGyroZ|}
								      	      	      	      	          	          	                  	          	          	      	      	      	      )
								      	      	      	      	          	          	                  	          	          	      	      	      	)\ {|set_currGyroX,get_currGyroX|}
								      	      	      	      	          	          	                  	          	          	      	      	      )
								      	      	      	      	          	          	                  	          	          	      	      	)\ {|set_currGyroY,get_currGyroY|}
								      	      	      	      	          	          	                  	          	          	      	      )
								      	      	      	      	          	          	                  	          	          	      	)\ {|get_speedOutput,set_speedOutput|}
								      	      	      	      	          	          	                  	          	          	      )
								      	      	      	      	          	          	                  	          	          	)\ {|set_speedIntegral,get_speedIntegral|}
								      	      	      	      	          	          	                  	          	          )
								      	      	      	      	          	          	                  	          	      	  [| {|set_speedCount,set_angleSent,speedOutputE__.TID_BalanceSTM_P2_t11,internal__.TID_BalanceSTM_P2_t13,set_speedSent|} |]
								      	      	      	      	          	          	                  	          	      	  MemoryTransitions_opt_4(id__,
								      	      	      	      	          	          	                  	          	      	  	 const_BalanceSTM_P2_speedUpdate)
								      	      	      	      	          	          	                  	          	      	  )\{|internal__.TID_BalanceSTM_P2_t13|})
								      	      	      	      	          	          	                  	          	      )
								      	      	      	      	          	          	                  	          	) \ {|set_speedSent,get_speedSent|}
								      	      	      	      	          	          	                  	          )
								      	      	      	      	          	          	                  	      	  [| {|internal__.TID_BalanceSTM_P2_t9,set_currAngle,internal__.TID_BalanceSTM_P2_t10|} |]
								      	      	      	      	          	          	                  	      	  MemoryTransitions_opt_2(id__,
								      	      	      	      	          	          	                  	      	  	 const_BalanceSTM_P2_maxAngle)
								      	      	      	      	          	          	                  	      	  )\{|internal__.TID_BalanceSTM_P2_t9,internal__.TID_BalanceSTM_P2_t10|})
								      	      	      	      	          	          	                  	      )
								      	      	      	      	          	          	                  	) \ {|set_currAngle,get_currAngle|}
								      	      	      	      	          	          	                  )
								      	      	      	      	          	          	              	  [| {|internal__.TID_BalanceSTM_P2_t17,internal__.TID_BalanceSTM_P2_t14,internal__.TID_BalanceSTM_P2_t1,internal__.TID_BalanceSTM_P2_t18,internal__.TID_BalanceSTM_P2_t4,internal__.TID_BalanceSTM_P2_t19,internal__.TID_BalanceSTM_P2_t20,internal__.TID_BalanceSTM_P2_t7|} |]
								      	      	      	      	          	          	              	  MemoryTransitions_opt_0(id__)
								      	      	      	      	          	          	              	  )\{|internal__.TID_BalanceSTM_P2_t17,internal__.TID_BalanceSTM_P2_t14,internal__.TID_BalanceSTM_P2_t1,internal__.TID_BalanceSTM_P2_t18,internal__.TID_BalanceSTM_P2_t4,internal__.TID_BalanceSTM_P2_t19,internal__.TID_BalanceSTM_P2_t20,internal__.TID_BalanceSTM_P2_t7|})
								      	      	      	      	          	          	              )
								      	      	      	      	          	          	          	  [| {|set_angleReceived,set_angleSent,internal__.TID_BalanceSTM_P2_t8,angleOutputE__.TID_BalanceSTM_P2_t5|} |]
								      	      	      	      	          	          	          	  MemoryTransitions_opt_3(id__)
								      	      	      	      	          	          	          	  )\{|internal__.TID_BalanceSTM_P2_t8|})
								      	      	      	      	          	          	          )
								      	      	      	      	          	          	      	  [| {|internal__.TID_BalanceSTM_P2_t12,setWC.WC_TID_BalanceSTM_P2_t12_0_ID|} |]
								      	      	      	      	          	          	      	  MemoryTransitions_opt_1(id__)
								      	      	      	      	          	          	      	  )\{|internal__.TID_BalanceSTM_P2_t12|})
								      	      	      	      	          	          	      )
								      	      	      	      	          	          	) \ {|getWC.WC_TID_BalanceSTM_P2_t12_0_ID,setWC.WC_TID_BalanceSTM_P2_t12_0_ID|}
								      	      	      	      	          	          )
								      	      	      	      	          	      	  [| {|set_rotationCount,set_angleReceived,set_speedCount,internal__.TID_BalanceSTM_P2_t6|} |]
								      	      	      	      	          	      	  MemoryTransitions_opt_5(id__,
								      	      	      	      	          	      	  	 const_BalanceSTM_P2_speedUpdate,
								      	      	      	      	          	      	  	 const_BalanceSTM_P2_rotationUpdate)
								      	      	      	      	          	      	  )\{|internal__.TID_BalanceSTM_P2_t6|})
								      	      	      	      	          	      )
								      	      	      	      	          	) \ {|set_angleReceived,get_angleReceived|}
								      	      	      	      	          )
								      	      	      	      	      	  [| {|set_rotationCount,internal__.TID_BalanceSTM_P2_t16,set_rotationSent,set_speedCount,rotationOutputE__.TID_BalanceSTM_P2_t15,set_angleSent|} |]
								      	      	      	      	      	  MemoryTransitions_opt_6(id__,
								      	      	      	      	      	  	 const_BalanceSTM_P2_speedUpdate,
								      	      	      	      	      	  	 const_BalanceSTM_P2_rotationUpdate)
								      	      	      	      	      	  )\{|internal__.TID_BalanceSTM_P2_t16|})
								      	      	      	      	      )
								      	      	      	      	) \ {|set_rotationSent,get_rotationSent|}
								      	      	      	      )
								      	      	      	) \ {|set_speedCount,get_speedCount|}
								      	      	      )
								      	      	) \ {|set_rotationCount,get_rotationCount|}
								      	      )
								      	) \ {|get_angleSent,set_angleSent|}
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_currAngle,set_currAngle,
										get_currGyroX,set_currGyroX,
										get_currGyroY,set_currGyroY,
										get_currGyroZ,set_currGyroZ,
										get_currLeftVel,set_currLeftVel,
										get_currRightVel,set_currRightVel,
										get_speedCount,set_speedCount,
										get_rotationCount,set_rotationCount,
										get_angleOutput,set_angleOutput,
										get_speedOutput,set_speedOutput,
										get_rotationOutput,set_rotationOutput,
										get_speedSent,set_speedSent,
										get_angleSent,set_angleSent,
										get_rotationSent,set_rotationSent,
										get_angleReceived,set_angleReceived,
										get_speedIntegral,set_speedIntegral|},
										{||}
									)
										
									,
									{|internal__.TID_BalanceSTM_P2_t6,
									angleOutputE__.TID_BalanceSTM_P2_t5,
									internal__.TID_BalanceSTM_P2_t8,
									internal__.TID_BalanceSTM_P2_t7,
									speedOutputE__.TID_BalanceSTM_P2_t11,
									internal__.TID_BalanceSTM_P2_t13,
									internal__.TID_BalanceSTM_P2_t14,
									rotationOutputE__.TID_BalanceSTM_P2_t15,
									internal__.TID_BalanceSTM_P2_t16,
									internal__.TID_BalanceSTM_P2_t17,
									internal__.TID_BalanceSTM_P2_t1,
									internal__.TID_BalanceSTM_P2_t4,
									internal__.TID_BalanceSTM_P2_t12,
									internal__.TID_BalanceSTM_P2_t18,
									internal__.TID_BalanceSTM_P2_t9,
									internal__.TID_BalanceSTM_P2_t10,
									internal__.TID_BalanceSTM_P2_t19,
									internal__.TID_BalanceSTM_P2_t20|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_currAngle,set_currAngle,
									get_currGyroX,set_currGyroX,
									get_currGyroY,set_currGyroY,
									get_currGyroZ,set_currGyroZ,
									get_currLeftVel,set_currLeftVel,
									get_currRightVel,set_currRightVel,
									get_speedCount,set_speedCount,
									get_rotationCount,set_rotationCount,
									get_angleOutput,set_angleOutput,
									get_speedOutput,set_speedOutput,
									get_rotationOutput,set_rotationOutput,
									get_speedSent,set_speedSent,
									get_angleSent,set_angleSent,
									get_rotationSent,set_rotationSent,
									get_angleReceived,set_angleReceived,
									get_speedIntegral,set_speedIntegral|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = prioritise((((
								wbisim(STM(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_BalanceSTM_P2_maxAngle,
										 const_BalanceSTM_P2_loopTime,
										 const_BalanceSTM_P2_startupDelay,
										 const_BalanceSTM_P2_speedUpdate,
										 const_BalanceSTM_P2_rotationUpdate,
										 const_BalanceSTM_P2_motorBudget,
										 const_BalanceSTM_P2_angleBudget,
										 const_BalanceSTM_P2_speedBudget,
										 const_BalanceSTM_P2_rotationBudget))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_BalanceSTM_P2_maxAngle,
											    const_BalanceSTM_P2_loopTime,
											    const_BalanceSTM_P2_startupDelay,
											    const_BalanceSTM_P2_speedUpdate,
											    const_BalanceSTM_P2_rotationUpdate,
											    const_BalanceSTM_P2_motorBudget,
											    const_BalanceSTM_P2_angleBudget,
											    const_BalanceSTM_P2_speedBudget,
											    const_BalanceSTM_P2_rotationBudget)
								)\WCsets
							)
							[[
								leftMotorVelocity__.x____ <- leftMotorVelocity,
								rightMotorVelocity__.x____ <- rightMotorVelocity,
								angle__.x____ <- angle,
								gyroX__.x____ <- gyroX,
								gyroY__.x____ <- gyroY,
								gyroZ__.x____ <- gyroZ,
								angleOutputE__.x____ <- angleOutputE,
								anewError__.x____ <- anewError,
								adiff__.x____ <- adiff,
								snewError__.x____ <- snewError,
								speedOutputE__.x____ <- speedOutputE,
								rdiff__.x____ <- rdiff,
								rotationOutputE__.x____ <- rotationOutputE
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_BalanceSTM_P2_maxAngle,
													    const_BalanceSTM_P2_loopTime,
													    const_BalanceSTM_P2_startupDelay,
													    const_BalanceSTM_P2_speedUpdate,
													    const_BalanceSTM_P2_rotationUpdate,
													    const_BalanceSTM_P2_motorBudget,
													    const_BalanceSTM_P2_angleBudget,
													    const_BalanceSTM_P2_speedBudget,
													    const_BalanceSTM_P2_rotationBudget)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_BalanceSTM_P2_maxAngle,
													    const_BalanceSTM_P2_loopTime,
													    const_BalanceSTM_P2_startupDelay,
													    const_BalanceSTM_P2_speedUpdate,
													    const_BalanceSTM_P2_rotationUpdate,
													    const_BalanceSTM_P2_motorBudget,
													    const_BalanceSTM_P2_angleBudget,
													    const_BalanceSTM_P2_speedBudget,
													    const_BalanceSTM_P2_rotationBudget))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_BalanceSTM_P2_maxAngle,
											    const_BalanceSTM_P2_loopTime,
											    const_BalanceSTM_P2_startupDelay,
											    const_BalanceSTM_P2_speedUpdate,
											    const_BalanceSTM_P2_rotationUpdate,
											    const_BalanceSTM_P2_motorBudget,
											    const_BalanceSTM_P2_angleBudget,
											    const_BalanceSTM_P2_speedBudget,
											    const_BalanceSTM_P2_rotationBudget)
									)[[
										leftMotorVelocity__.x____ <- leftMotorVelocity,
										rightMotorVelocity__.x____ <- rightMotorVelocity,
										angle__.x____ <- angle,
										gyroX__.x____ <- gyroX,
										gyroY__.x____ <- gyroY,
										gyroZ__.x____ <- gyroZ,
										angleOutputE__.x____ <- angleOutputE,
										anewError__.x____ <- anewError,
										adiff__.x____ <- adiff,
										snewError__.x____ <- snewError,
										speedOutputE__.x____ <- speedOutputE,
										rdiff__.x____ <- rdiff,
										rotationOutputE__.x____ <- rotationOutputE
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = prioritise((((
								wbisim(STM(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_BalanceSTM_P2_maxAngle,
									 const_BalanceSTM_P2_loopTime,
									 const_BalanceSTM_P2_startupDelay,
									 const_BalanceSTM_P2_speedUpdate,
									 const_BalanceSTM_P2_rotationUpdate,
									 const_BalanceSTM_P2_motorBudget,
									 const_BalanceSTM_P2_angleBudget,
									 const_BalanceSTM_P2_speedBudget,
									 const_BalanceSTM_P2_rotationBudget)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC | CLID_loopTimer
							channel clockReset : ClockSet
										
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							                             | WC_TID_BalanceSTM_P2_t12_0_ID
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = Union({
								{
								({|internal__.TID_BalanceSTM_P2_t12,clockReset.CLID_loopTimer,setWC.WC_TID_BalanceSTM_P2_t12_0_ID | x <- SIDS|},P_WC_TID_BalanceSTM_P2_t12_0(id__,
										    const_BalanceSTM_P2_maxAngle,
										    const_BalanceSTM_P2_loopTime,
										    const_BalanceSTM_P2_startupDelay,
										    const_BalanceSTM_P2_speedUpdate,
										    const_BalanceSTM_P2_rotationUpdate,
										    const_BalanceSTM_P2_motorBudget,
										    const_BalanceSTM_P2_angleBudget,
										    const_BalanceSTM_P2_speedBudget,
										    const_BalanceSTM_P2_rotationBudget))
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{|internal__.TID_BalanceSTM_P2_t12|}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{|clockReset.CLID_loopTimer | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							P_WC_TID_BalanceSTM_P2_t12_0_reset(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = clockReset.CLID_loopTimer -> setWC.WC_TID_BalanceSTM_P2_t12_0_ID.false -> P_WC_TID_BalanceSTM_P2_t12_0_monitor(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)
							
							P_WC_TID_BalanceSTM_P2_t12_0_monitor(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = (TimedInterrupt(RUN({|tock,internal__.TID_BalanceSTM_P2_t12|}),const_BalanceSTM_P2_loopTime) ; setWC.WC_TID_BalanceSTM_P2_t12_0_ID.true -> RUN({|tock,internal__.TID_BalanceSTM_P2_t12|})) /\ P_WC_TID_BalanceSTM_P2_t12_0_reset(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)
							
							P_WC_TID_BalanceSTM_P2_t12_0(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = setWC.WC_TID_BalanceSTM_P2_t12_0_ID.false -> P_WC_TID_BalanceSTM_P2_t12_0_monitor(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)
							
							-- Clocks process
							Clocks(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = || (alpha, P) : WCset(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = timed_priority(AUX(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = timed_priority(AUX_opt(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = D__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = timed_priority(AUX(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = ShowV(timed_priority(AUX(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget) = AUX(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)
						}
					endmodule
					module stm_ref1
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_currAngleOut, set_currAngleOut: core_real
							channel get_currNewError, set_currNewError: core_real
							channel get_currDiff, set_currDiff: core_real
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel angleOutputE__: TIDS.InOut.core_real
							channel angleOutputE: InOut.core_real
							channel anewError__: TIDS.InOut.core_real
							channel anewError: InOut.core_real
							channel adiff__: TIDS.InOut.core_real
							channel adiff: InOut.core_real
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_AnglePID_S
							              | SID_AnglePID_S_Read
							              | SID_AnglePID_S_UpdateOutput
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_AnglePID_S_t1
							              | TID_AnglePID_S_t2
							              | TID_AnglePID_S_t3
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_AnglePID_S_t1,	TID_AnglePID_S_t2
							}
							
							int_int = {|
								angleOutputE__.TID_AnglePID_S_t1,
								anewError__.TID_AnglePID_S_t1,
								adiff__.TID_AnglePID_S_t1,
								internal__.TID_AnglePID_S_t1,
								angleOutputE__.TID_AnglePID_S_t2,
								anewError__.TID_AnglePID_S_t2,
								adiff__.TID_AnglePID_S_t2,
								internal__.TID_AnglePID_S_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_AnglePID_S_Read_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_AnglePID_S_Read,SID_AnglePID_S_UpdateOutput},
								y____ <- {SID_AnglePID_S_Read}
							|}
							
							
							AnglePID_S_Read_triggers = {|
								internal__.TID_AnglePID_S_t1,
								internal__.TID_AnglePID_S_t2
							|}
							
							State_AnglePID_S_Read(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = let
								T_AnglePID_S_t1(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D) = internal__!TID_AnglePID_S_t1 ->  exit.SID_AnglePID_S_Read.SID_AnglePID_S_Read -> SKIP;
													SKIP;exited.SID_AnglePID_S_Read.SID_AnglePID_S_Read -> SKIP;
													enter!SID_AnglePID_S_Read!SID_AnglePID_S_UpdateOutput -> entered!SID_AnglePID_S_Read!SID_AnglePID_S_UpdateOutput ->
													State_AnglePID_S_Read(id__,
															    const_AnglePID_S_P,
															    const_AnglePID_S_D)
								State_AnglePID_S_Read_execute(id__,o____) = true&(anewError.in?currNewError -> set_currNewError!currNewError -> SKIP);true&(adiff.in?currDiff -> set_currDiff!currDiff -> SKIP); 
									entered!o____!SID_AnglePID_S_Read ->
									(SKIP; STOP /\ (
										T_AnglePID_S_t1(id__,
												    const_AnglePID_S_P,
												    const_AnglePID_S_D)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2}) -> exit?y____:diff(SIDS,{SID_AnglePID_S_Read})!SID_AnglePID_S_Read -> (
												SKIP;
												exited!y____!SID_AnglePID_S_Read -> SKIP);
												State_AnglePID_S_Read(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AnglePID_S_Read})!SID_AnglePID_S_Read -> (
												SKIP;
												exited!y____!SID_AnglePID_S_Read -> SKIP);
												State_AnglePID_S_Read(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AnglePID_S_Read})!SID_AnglePID_S_Read -> (
												SKIP;
												exited!y____!SID_AnglePID_S_Read -> SKIP);
												State_AnglePID_S_Read(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AnglePID_S_Read})!SID_AnglePID_S_Read -> (
												SKIP;
												exited!y____!SID_AnglePID_S_Read -> SKIP);
												State_AnglePID_S_Read(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
									))
							within
								enter?x____:diff(SIDS,{SID_AnglePID_S_Read})!SID_AnglePID_S_Read -> (State_AnglePID_S_Read_execute(id__,x____))
							
							CS_AnglePID_S_UpdateOutput_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_AnglePID_S_Read,SID_AnglePID_S_UpdateOutput},
								y____ <- {SID_AnglePID_S_UpdateOutput}
							|}
							
							
							AnglePID_S_UpdateOutput_triggers = {|
								internal__.TID_AnglePID_S_t1,
								internal__.TID_AnglePID_S_t2
							|}
							
							State_AnglePID_S_UpdateOutput(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = let
								T_AnglePID_S_t2(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D) = internal__!TID_AnglePID_S_t2 ->  exit.SID_AnglePID_S_UpdateOutput.SID_AnglePID_S_UpdateOutput -> SKIP;
													SKIP;exited.SID_AnglePID_S_UpdateOutput.SID_AnglePID_S_UpdateOutput -> SKIP;
													get_currAngleOut?currAngleOut -> true&(angleOutputE.out!currAngleOut -> SKIP);enter!SID_AnglePID_S_UpdateOutput!SID_AnglePID_S_Read -> entered!SID_AnglePID_S_UpdateOutput!SID_AnglePID_S_Read ->
													State_AnglePID_S_UpdateOutput(id__,
															    const_AnglePID_S_P,
															    const_AnglePID_S_D)
								State_AnglePID_S_UpdateOutput_execute(id__,o____) = get_currDiff?currDiff -> get_currNewError?currNewError -> true & (set_currAngleOut!Plus(Mult(currNewError, const_AnglePID_S_P, core_real), Mult(currDiff, const_AnglePID_S_D, core_real), core_real) -> SKIP); 
									entered!o____!SID_AnglePID_S_UpdateOutput ->
									(SKIP; STOP /\ (
										T_AnglePID_S_t2(id__,
												    const_AnglePID_S_P,
												    const_AnglePID_S_D)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2}) -> exit?y____:diff(SIDS,{SID_AnglePID_S_UpdateOutput})!SID_AnglePID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_AnglePID_S_UpdateOutput -> SKIP);
												State_AnglePID_S_UpdateOutput(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
										[] angleOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AnglePID_S_UpdateOutput})!SID_AnglePID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_AnglePID_S_UpdateOutput -> SKIP);
												State_AnglePID_S_UpdateOutput(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
										[] anewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AnglePID_S_UpdateOutput})!SID_AnglePID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_AnglePID_S_UpdateOutput -> SKIP);
												State_AnglePID_S_UpdateOutput(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
										[] adiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_S_t1,TID_AnglePID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_AnglePID_S_UpdateOutput})!SID_AnglePID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_AnglePID_S_UpdateOutput -> SKIP);
												State_AnglePID_S_UpdateOutput(id__,
														    const_AnglePID_S_P,
														    const_AnglePID_S_D)
									))
							within
								enter?x____:diff(SIDS,{SID_AnglePID_S_UpdateOutput})!SID_AnglePID_S_UpdateOutput -> (State_AnglePID_S_UpdateOutput_execute(id__,x____))
							
							
							I_AnglePID_S_i0(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = let
								T_AnglePID_S_t3(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D) = internal__!TID_AnglePID_S_t3 -> enter!SID_AnglePID_S!SID_AnglePID_S_Read -> entered!SID_AnglePID_S!SID_AnglePID_S_Read ->
								SKIP
							within
								T_AnglePID_S_t3(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D)
							
							
							State_AnglePID_S_Read_R(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = 
								State_AnglePID_S_Read(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D)
									[|diff(int_int,AnglePID_S_Read_triggers)|]
								SKIP
									 		
							State_AnglePID_S_UpdateOutput_R(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = 
								State_AnglePID_S_UpdateOutput(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D)
									[|diff(int_int,AnglePID_S_UpdateOutput_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = (
								I_AnglePID_S_i0(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_AnglePID_S_Read,SID_AnglePID_S_UpdateOutput}),
											y____ <- {SID_AnglePID_S_Read,SID_AnglePID_S_UpdateOutput}
									|}|]
								(
									State_AnglePID_S_Read_R(id__,
											    const_AnglePID_S_P,
											    const_AnglePID_S_D)
										[|inter(CS_AnglePID_S_Read_sync,CS_AnglePID_S_UpdateOutput_sync)|]
									State_AnglePID_S_UpdateOutput_R(id__,
											    const_AnglePID_S_P,
											    const_AnglePID_S_D)
								)
							)
							
							-- optimized memory process
							channel getV_currAngleOut: core_real
							channel getV_currNewError: core_real
							channel getV_currDiff: core_real
							
							-- individual memory processes
							Memory_currAngleOut(x__) = ( 
								get_currAngleOut!x__ -> Memory_currAngleOut(x__)
								[]
								getV_currAngleOut!x__ -> Memory_currAngleOut(x__)
								[]
								set_currAngleOut?x__ -> Memory_currAngleOut(x__)
							)
							Memory_currNewError(x__) = ( 
								get_currNewError!x__ -> Memory_currNewError(x__)
								[]
								getV_currNewError!x__ -> Memory_currNewError(x__)
								[]
								set_currNewError?x__ -> Memory_currNewError(x__)
							)
							Memory_currDiff(x__) = ( 
								get_currDiff!x__ -> Memory_currDiff(x__)
								[]
								getV_currDiff!x__ -> Memory_currDiff(x__)
								[]
								set_currDiff?x__ -> Memory_currDiff(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 currAngleOut,
								 currNewError,
								 currDiff,
								 const_AnglePID_S_P,
								 const_AnglePID_S_D) = (
								internal__!TID_AnglePID_S_t1 -> SKIP
								[]
								internal__!TID_AnglePID_S_t2 -> SKIP
								[]
								internal__!TID_AnglePID_S_t3 -> SKIP
							
								[]
									set_currAngleOut?x__ -> SKIP
								[]
								set_currNewError?x__ -> SKIP
								[]
								set_currDiff?x__ -> SKIP
							 	)
							MemoryTransitions_AnglePID_S(id__,
								 const_AnglePID_S_P,
								 const_AnglePID_S_D) =
								(
								getV_currAngleOut?currAngleOut ->	
								getV_currNewError?currNewError ->	
								getV_currDiff?currDiff ->
								 MemoryTransitions(id__,
								 	 currAngleOut,
								 	 currNewError,
								 	 currDiff,
								 	 const_AnglePID_S_P,
								 	 const_AnglePID_S_D);
								 MemoryTransitions_AnglePID_S(id__,
								 	 const_AnglePID_S_P,
								 	 const_AnglePID_S_D)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_AnglePID_S = Union(
								{
									{
										Memory_currAngleOut(0),
										Memory_currNewError(0),
										Memory_currDiff(0)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									set_currAngleOut,
									getV_currNewError,
									set_currDiff,
									set_currNewError,
									getV_currAngleOut,
									getV_currDiff,
									setWC
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_currNewError,
									getWC,
									getV_currAngleOut,
									getV_currDiff
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_AnglePID_S @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_AnglePID_S_P,
								 const_AnglePID_S_D) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_AnglePID_S(id__,
								 const_AnglePID_S_P,
								 const_AnglePID_S_D)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- currAngleOut
							-- currDiff
							-- currNewError
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_AnglePID_S_t3,
							--		TID_AnglePID_S_t2,
							--		TID_AnglePID_S_t1}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_AnglePID_S_t3 -> Update
									 	   []
									 	   internal__!TID_AnglePID_S_t2 -> Update
									 	   []
									 	   internal__!TID_AnglePID_S_t1 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_currAngleOut(x__) = ( 
								get_currAngleOut!x__ -> Memory_opt_currAngleOut(x__)
								[]
								set_currAngleOut?x__ -> Memory_opt_currAngleOut(x__)
							)
							Memory_opt_currDiff(x__) = ( 
								get_currDiff!x__ -> Memory_opt_currDiff(x__)
								[]
								set_currDiff?x__ -> Memory_opt_currDiff(x__)
							)
							Memory_opt_currNewError(x__) = ( 
								get_currNewError!x__ -> Memory_opt_currNewError(x__)
								[]
								set_currNewError?x__ -> Memory_opt_currNewError(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_currAngleOut(0)
								          	[| {|set_currAngleOut,get_currAngleOut|} |] 
								          	dbisim(sbisim(Memory_opt_currDiff(0)
								          	      	[| {|set_currDiff,get_currDiff|} |] 
								          	      	dbisim(sbisim(Memory_opt_currNewError(0)
								          	      	      	[| {|set_currNewError,get_currNewError|} |] 
								          	      	      	STM_core(id__,
								          	      	      			    const_AnglePID_S_P,
								          	      	      			    const_AnglePID_S_D)
								          	      	      	)\ {|set_currNewError,get_currNewError|}
								          	      	      )
								          	      	)\ {|set_currDiff,get_currDiff|}
								          	      )
								          	)\ {|set_currAngleOut,get_currAngleOut|}
								          )
								      	  [| {|internal__.TID_AnglePID_S_t2,internal__.TID_AnglePID_S_t3,internal__.TID_AnglePID_S_t1|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{|internal__.TID_AnglePID_S_t2,internal__.TID_AnglePID_S_t3,internal__.TID_AnglePID_S_t1|})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_currAngleOut,set_currAngleOut,
										get_currNewError,set_currNewError,
										get_currDiff,set_currDiff|},
										{||}
									)
										
									,
									{|internal__.TID_AnglePID_S_t1,
									internal__.TID_AnglePID_S_t2,
									internal__.TID_AnglePID_S_t3|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_currAngleOut,set_currAngleOut,
									get_currNewError,set_currNewError,
									get_currDiff,set_currDiff|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = prioritise((((
								wbisim(STM(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_AnglePID_S_P,
										 const_AnglePID_S_D))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_AnglePID_S_P,
											    const_AnglePID_S_D)
								)\WCsets
							)
							[[
								angleOutputE__.x____ <- angleOutputE,
								anewError__.x____ <- anewError,
								adiff__.x____ <- adiff
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_AnglePID_S_P,
													    const_AnglePID_S_D)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_AnglePID_S_P,
													    const_AnglePID_S_D))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_AnglePID_S_P,
											    const_AnglePID_S_D)
									)[[
										angleOutputE__.x____ <- angleOutputE,
										anewError__.x____ <- anewError,
										adiff__.x____ <- adiff
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = prioritise((((
								wbisim(STM(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_AnglePID_S_P,
									 const_AnglePID_S_D)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = || (alpha, P) : WCset(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = timed_priority(AUX(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = timed_priority(AUX_opt(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = D__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = timed_priority(AUX(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = ShowV(timed_priority(AUX(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D) = AUX(id__,
									    const_AnglePID_S_P,
									    const_AnglePID_S_D)
						}
					endmodule
					module stm_ref2
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_currNewError, set_currNewError: core_real
							channel get_currSpeedOutput, set_currSpeedOutput: core_real
							channel get_speedIntegral, set_speedIntegral: core_real
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel snewError__: TIDS.InOut.core_real
							channel snewError: InOut.core_real
							channel speedOutputE__: TIDS.InOut.core_real
							channel speedOutputE: InOut.core_real
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_SpeedPID_S
							              | SID_SpeedPID_S_Read
							              | SID_SpeedPID_S_UpdateIntegral
							              | SID_SpeedPID_S_UpdateOutput
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_SpeedPID_S_t0
							              | TID_SpeedPID_S_t1
							              | TID_SpeedPID_S_t2
							              | TID_SpeedPID_S_t3
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_SpeedPID_S_t1,	TID_SpeedPID_S_t2,	TID_SpeedPID_S_t3
							}
							
							int_int = {|
								snewError__.TID_SpeedPID_S_t1,
								speedOutputE__.TID_SpeedPID_S_t1,
								internal__.TID_SpeedPID_S_t1,
								snewError__.TID_SpeedPID_S_t2,
								speedOutputE__.TID_SpeedPID_S_t2,
								internal__.TID_SpeedPID_S_t2,
								snewError__.TID_SpeedPID_S_t3,
								speedOutputE__.TID_SpeedPID_S_t3,
								internal__.TID_SpeedPID_S_t3
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_SpeedPID_S_Read_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput},
								y____ <- {SID_SpeedPID_S_Read}
							|}
							
							
							SpeedPID_S_Read_triggers = {|
								snewError__.TID_SpeedPID_S_t3,
								internal__.TID_SpeedPID_S_t1,
								internal__.TID_SpeedPID_S_t2
							|}
							
							State_SpeedPID_S_Read(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = let
								T_SpeedPID_S_t3(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral) = snewError__!TID_SpeedPID_S_t3.in?currNewError -> set_currNewError!currNewError ->  (exit.SID_SpeedPID_S_Read.SID_SpeedPID_S_Read -> SKIP;
													SKIP;exited.SID_SpeedPID_S_Read.SID_SpeedPID_S_Read -> SKIP;
													enter!SID_SpeedPID_S_Read!SID_SpeedPID_S_UpdateIntegral -> entered!SID_SpeedPID_S_Read!SID_SpeedPID_S_UpdateIntegral ->
													State_SpeedPID_S_Read(id__,
															    const_SpeedPID_S_P,
															    const_SpeedPID_S_I,
															    const_SpeedPID_S_maxIntegral)
								)
								State_SpeedPID_S_Read_execute(id__,o____) = SKIP; 
									entered!o____!SID_SpeedPID_S_Read ->
									(SKIP; STOP /\ (
										T_SpeedPID_S_t3(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_Read -> SKIP);
												State_SpeedPID_S_Read(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_Read -> SKIP);
												State_SpeedPID_S_Read(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_Read -> SKIP);
												State_SpeedPID_S_Read(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (State_SpeedPID_S_Read_execute(id__,x____))
							
							CS_SpeedPID_S_UpdateIntegral_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput},
								y____ <- {SID_SpeedPID_S_UpdateIntegral}
							|}
							
							
							SpeedPID_S_UpdateIntegral_triggers = {|
								snewError__.TID_SpeedPID_S_t3,
								internal__.TID_SpeedPID_S_t1,
								internal__.TID_SpeedPID_S_t2
							|}
							
							State_SpeedPID_S_UpdateIntegral(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = let
								T_SpeedPID_S_t1(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral) = internal__!TID_SpeedPID_S_t1 ->  exit.SID_SpeedPID_S_UpdateIntegral.SID_SpeedPID_S_UpdateIntegral -> SKIP;
													SKIP;exited.SID_SpeedPID_S_UpdateIntegral.SID_SpeedPID_S_UpdateIntegral -> SKIP;
													enter!SID_SpeedPID_S_UpdateIntegral!SID_SpeedPID_S_UpdateOutput -> entered!SID_SpeedPID_S_UpdateIntegral!SID_SpeedPID_S_UpdateOutput ->
													State_SpeedPID_S_UpdateIntegral(id__,
															    const_SpeedPID_S_P,
															    const_SpeedPID_S_I,
															    const_SpeedPID_S_maxIntegral)
								State_SpeedPID_S_UpdateIntegral_execute(id__,o____) = get_speedIntegral?speedIntegral -> get_currNewError?currNewError -> true & (set_speedIntegral!Plus(speedIntegral, currNewError, core_real) -> SKIP);get_speedIntegral?speedIntegral -> true & (set_speedIntegral!(if (speedIntegral>const_SpeedPID_S_maxIntegral) then const_SpeedPID_S_maxIntegral else (if (speedIntegral<Neg(const_SpeedPID_S_maxIntegral, core_int)) then Neg(const_SpeedPID_S_maxIntegral, core_int) else speedIntegral)) -> SKIP); 
									entered!o____!SID_SpeedPID_S_UpdateIntegral ->
									(SKIP; STOP /\ (
										T_SpeedPID_S_t1(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_UpdateIntegral -> SKIP);
												State_SpeedPID_S_UpdateIntegral(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_UpdateIntegral -> SKIP);
												State_SpeedPID_S_UpdateIntegral(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_UpdateIntegral -> SKIP);
												State_SpeedPID_S_UpdateIntegral(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (State_SpeedPID_S_UpdateIntegral_execute(id__,x____))
							
							CS_SpeedPID_S_UpdateOutput_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput},
								y____ <- {SID_SpeedPID_S_UpdateOutput}
							|}
							
							
							SpeedPID_S_UpdateOutput_triggers = {|
								snewError__.TID_SpeedPID_S_t3,
								internal__.TID_SpeedPID_S_t1,
								internal__.TID_SpeedPID_S_t2
							|}
							
							State_SpeedPID_S_UpdateOutput(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = let
								T_SpeedPID_S_t2(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral) = internal__!TID_SpeedPID_S_t2 ->  exit.SID_SpeedPID_S_UpdateOutput.SID_SpeedPID_S_UpdateOutput -> SKIP;
													SKIP;exited.SID_SpeedPID_S_UpdateOutput.SID_SpeedPID_S_UpdateOutput -> SKIP;
													get_currSpeedOutput?currSpeedOutput -> true&(speedOutputE.out!currSpeedOutput -> SKIP);enter!SID_SpeedPID_S_UpdateOutput!SID_SpeedPID_S_Read -> entered!SID_SpeedPID_S_UpdateOutput!SID_SpeedPID_S_Read ->
													State_SpeedPID_S_UpdateOutput(id__,
															    const_SpeedPID_S_P,
															    const_SpeedPID_S_I,
															    const_SpeedPID_S_maxIntegral)
								State_SpeedPID_S_UpdateOutput_execute(id__,o____) = get_speedIntegral?speedIntegral -> get_currNewError?currNewError -> true & (set_currSpeedOutput!Plus(Mult(currNewError, const_SpeedPID_S_P, core_real), Mult(speedIntegral, const_SpeedPID_S_I, core_real), core_real) -> SKIP); 
									entered!o____!SID_SpeedPID_S_UpdateOutput ->
									(SKIP; STOP /\ (
										T_SpeedPID_S_t2(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_UpdateOutput -> SKIP);
												State_SpeedPID_S_UpdateOutput(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
										[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_UpdateOutput -> SKIP);
												State_SpeedPID_S_UpdateOutput(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
										[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_SpeedPID_S_UpdateOutput -> SKIP);
												State_SpeedPID_S_UpdateOutput(id__,
														    const_SpeedPID_S_P,
														    const_SpeedPID_S_I,
														    const_SpeedPID_S_maxIntegral)
									))
							within
								enter?x____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (State_SpeedPID_S_UpdateOutput_execute(id__,x____))
							
							
							I_SpeedPID_S_i0(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = let
								T_SpeedPID_S_t0(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral) = internal__!TID_SpeedPID_S_t0 -> enter!SID_SpeedPID_S!SID_SpeedPID_S_Read -> entered!SID_SpeedPID_S!SID_SpeedPID_S_Read ->
								SKIP
							within
								T_SpeedPID_S_t0(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral)
							
							
							State_SpeedPID_S_Read_R(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = 
								State_SpeedPID_S_Read(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral)
									[|diff(int_int,SpeedPID_S_Read_triggers)|]
								SKIP
									 		
							State_SpeedPID_S_UpdateIntegral_R(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = 
								State_SpeedPID_S_UpdateIntegral(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral)
									[|diff(int_int,SpeedPID_S_UpdateIntegral_triggers)|]
								SKIP
									 		
							State_SpeedPID_S_UpdateOutput_R(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = 
								State_SpeedPID_S_UpdateOutput(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral)
									[|diff(int_int,SpeedPID_S_UpdateOutput_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = (
								I_SpeedPID_S_i0(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput}),
											y____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput}
									|}|]
								(
									State_SpeedPID_S_Read_R(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
										[|inter(CS_SpeedPID_S_Read_sync,union(CS_SpeedPID_S_UpdateIntegral_sync,CS_SpeedPID_S_UpdateOutput_sync))|]
									(
										State_SpeedPID_S_UpdateIntegral_R(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
											[|inter(CS_SpeedPID_S_UpdateIntegral_sync,CS_SpeedPID_S_UpdateOutput_sync)|]
										State_SpeedPID_S_UpdateOutput_R(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
									)
								)
							)
							
							-- optimized memory process
							channel getV_currNewError: core_real
							channel getV_currSpeedOutput: core_real
							channel getV_speedIntegral: core_real
							
							-- individual memory processes
							Memory_currNewError(x__) = ( 
								get_currNewError!x__ -> Memory_currNewError(x__)
								[]
								getV_currNewError!x__ -> Memory_currNewError(x__)
								[]
								set_currNewError?x__ -> Memory_currNewError(x__)
								[]
								snewError__!TID_SpeedPID_S_t3.in?currNewError -> Memory_currNewError(currNewError)
							)
							Memory_currSpeedOutput(x__) = ( 
								get_currSpeedOutput!x__ -> Memory_currSpeedOutput(x__)
								[]
								getV_currSpeedOutput!x__ -> Memory_currSpeedOutput(x__)
								[]
								set_currSpeedOutput?x__ -> Memory_currSpeedOutput(x__)
							)
							Memory_speedIntegral(x__) = ( 
								get_speedIntegral!x__ -> Memory_speedIntegral(x__)
								[]
								getV_speedIntegral!x__ -> Memory_speedIntegral(x__)
								[]
								set_speedIntegral?x__ -> Memory_speedIntegral(x__)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 currNewError,
								 currSpeedOutput,
								 speedIntegral,
								 const_SpeedPID_S_P,
								 const_SpeedPID_S_I,
								 const_SpeedPID_S_maxIntegral) = (
								internal__!TID_SpeedPID_S_t0 -> SKIP
								[]
								internal__!TID_SpeedPID_S_t1 -> SKIP
								[]
								internal__!TID_SpeedPID_S_t2 -> SKIP
								[]
								snewError__!TID_SpeedPID_S_t3.in?currNewError -> SKIP
							
								[]
									set_currNewError?x__ -> SKIP
								[]
								set_currSpeedOutput?x__ -> SKIP
								[]
								set_speedIntegral?x__ -> SKIP
							 	)
							MemoryTransitions_SpeedPID_S(id__,
								 const_SpeedPID_S_P,
								 const_SpeedPID_S_I,
								 const_SpeedPID_S_maxIntegral) =
								(
								getV_currNewError?currNewError ->	
								getV_currSpeedOutput?currSpeedOutput ->	
								getV_speedIntegral?speedIntegral ->
								 MemoryTransitions(id__,
								 	 currNewError,
								 	 currSpeedOutput,
								 	 speedIntegral,
								 	 const_SpeedPID_S_P,
								 	 const_SpeedPID_S_I,
								 	 const_SpeedPID_S_maxIntegral);
								 MemoryTransitions_SpeedPID_S(id__,
								 	 const_SpeedPID_S_P,
								 	 const_SpeedPID_S_I,
								 	 const_SpeedPID_S_maxIntegral)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_SpeedPID_S = Union(
								{
									{
										Memory_currNewError(0),
										Memory_currSpeedOutput(0),
										Memory_speedIntegral(0)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									getV_currNewError,
									getV_currSpeedOutput,
									set_currNewError,
									set_speedIntegral,
									set_currSpeedOutput,
									snewError__.TID_SpeedPID_S_t3,
									setWC,
									getV_speedIntegral
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_currNewError,
									getV_currSpeedOutput,
									getWC,
									getV_speedIntegral
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_SpeedPID_S @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_SpeedPID_S_P,
								 const_SpeedPID_S_I,
								 const_SpeedPID_S_maxIntegral) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_SpeedPID_S(id__,
								 const_SpeedPID_S_P,
								 const_SpeedPID_S_I,
								 const_SpeedPID_S_maxIntegral)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- currNewError
							-- speedIntegral
							-- currSpeedOutput
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_SpeedPID_S_t1,
							--		TID_SpeedPID_S_t2,
							--		TID_SpeedPID_S_t3,
							--		TID_SpeedPID_S_t0}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_SpeedPID_S_t1 -> Update
									 	   []
									 	   internal__!TID_SpeedPID_S_t2 -> Update
									 	   []
									 	   snewError__!TID_SpeedPID_S_t3.in?currNewError -> Update
									 	   []
									 	   internal__!TID_SpeedPID_S_t0 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_currNewError(x__) = ( 
								get_currNewError!x__ -> Memory_opt_currNewError(x__)
								[]
								set_currNewError?x__ -> Memory_opt_currNewError(x__)
							)
							Memory_opt_speedIntegral(x__) = ( 
								get_speedIntegral!x__ -> Memory_opt_speedIntegral(x__)
								[]
								set_speedIntegral?x__ -> Memory_opt_speedIntegral(x__)
							)
							Memory_opt_currSpeedOutput(x__) = ( 
								get_currSpeedOutput!x__ -> Memory_opt_currSpeedOutput(x__)
								[]
								set_currSpeedOutput?x__ -> Memory_opt_currSpeedOutput(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_currNewError(0)
								          	[| {|set_currNewError,get_currNewError|} |] 
								          	dbisim(sbisim(Memory_opt_speedIntegral(0)
								          	      	[| {|set_speedIntegral,get_speedIntegral|} |] 
								          	      	dbisim(sbisim(Memory_opt_currSpeedOutput(0)
								          	      	      	[| {|set_currSpeedOutput,get_currSpeedOutput|} |] 
								          	      	      	STM_core(id__,
								          	      	      			    const_SpeedPID_S_P,
								          	      	      			    const_SpeedPID_S_I,
								          	      	      			    const_SpeedPID_S_maxIntegral)
								          	      	      	)\ {|set_currSpeedOutput,get_currSpeedOutput|}
								          	      	      )
								          	      	)\ {|set_speedIntegral,get_speedIntegral|}
								          	      )
								          	)\ {|set_currNewError,get_currNewError|}
								          )
								      	  [| {|internal__.TID_SpeedPID_S_t1,internal__.TID_SpeedPID_S_t0,snewError__.TID_SpeedPID_S_t3,internal__.TID_SpeedPID_S_t2|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{|internal__.TID_SpeedPID_S_t1,internal__.TID_SpeedPID_S_t0,internal__.TID_SpeedPID_S_t2|})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_currNewError,set_currNewError,
										get_currSpeedOutput,set_currSpeedOutput,
										get_speedIntegral,set_speedIntegral|},
										{||}
									)
										
									,
									{|internal__.TID_SpeedPID_S_t0,
									internal__.TID_SpeedPID_S_t1,
									internal__.TID_SpeedPID_S_t2,
									snewError__.TID_SpeedPID_S_t3|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_currNewError,set_currNewError,
									get_currSpeedOutput,set_currSpeedOutput,
									get_speedIntegral,set_speedIntegral|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = prioritise((((
								wbisim(STM(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_SpeedPID_S_P,
										 const_SpeedPID_S_I,
										 const_SpeedPID_S_maxIntegral))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
								)\WCsets
							)
							[[
								snewError__.x____ <- snewError,
								speedOutputE__.x____ <- speedOutputE
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_SpeedPID_S_P,
													    const_SpeedPID_S_I,
													    const_SpeedPID_S_maxIntegral)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_SpeedPID_S_P,
													    const_SpeedPID_S_I,
													    const_SpeedPID_S_maxIntegral))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
									)[[
										snewError__.x____ <- snewError,
										speedOutputE__.x____ <- speedOutputE
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = prioritise((((
								wbisim(STM(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_SpeedPID_S_P,
									 const_SpeedPID_S_I,
									 const_SpeedPID_S_maxIntegral)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = || (alpha, P) : WCset(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = timed_priority(AUX(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = timed_priority(AUX_opt(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = D__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = timed_priority(AUX(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = ShowV(timed_priority(AUX(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral) = AUX(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
						}
					endmodule
					module stm_ref3
					exports
						-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
						external prioritise
						transparent wbisim
						transparent dbisim
						transparent sbisim
					
						Timed(OneStep) {	
							-- flow channels
							channel internal__ : TIDS
							channel enteredV, enterV, exitV, exitedV : SIDS
							channel enter, entered: SIDS.SIDS
							channel exit,exited: SIDS.SIDS
							channel terminate
							
							-- variable channels
							channel get_currRotationOut, set_currRotationOut: core_real
							channel get_currDiff, set_currDiff: core_real
									
							-- shared variable channels
							
							-- local variable channels for defined operations that are required by the state machine
							
							-- declaring state machine events
							channel rdiff__: TIDS.InOut.core_real
							channel rdiff: InOut.core_real
							channel rotationOutputE__: TIDS.InOut.core_real
							channel rotationOutputE: InOut.core_real
							
							-- declaring call and ret events for undefined operations
						
							-- Only the undefined operations are declared here.
							-- If the state machine is in isolation, all required operations will be undefined.
							-- If it is in the context of a controller, the required operations not provided by the
							-- controller will be declared here, and the defined operations will be defined in the
							-- context of the Controller module, and therefore within scope of the state machien module.
							
							
							-- definition of functions used to expose flow channels
							ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
											   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
											   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
											   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
												 
							ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
										[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
										[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							
							-- declaring identifiers of state and final states
							datatype SIDS = SID_RotationPID_S
							              | SID_RotationPID_S_Read
							              | SID_RotationPID_S_UpdateOutput
							
							-- declaring identifiers of transitions
							datatype TIDS = NULLTRANSITION__
							              | TID_RotationPID_S_t0
							              | TID_RotationPID_S_t1
							              | TID_RotationPID_S_t2
							
							-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
							
							ITIDS = {
								TID_RotationPID_S_t1,	TID_RotationPID_S_t2
							}
							
							int_int = {|
								rdiff__.TID_RotationPID_S_t1,
								rotationOutputE__.TID_RotationPID_S_t1,
								internal__.TID_RotationPID_S_t1,
								rdiff__.TID_RotationPID_S_t2,
								rotationOutputE__.TID_RotationPID_S_t2,
								internal__.TID_RotationPID_S_t2
							|}
								
							
							internal_events = {|enter,entered,exit,exited|}
							shared_variable_events = {|
							|}
									
							
							-- declaring all states
							CS_RotationPID_S_Read_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_RotationPID_S_Read,SID_RotationPID_S_UpdateOutput},
								y____ <- {SID_RotationPID_S_Read}
							|}
							
							
							RotationPID_S_Read_triggers = {|
								rdiff__.TID_RotationPID_S_t1,
								internal__.TID_RotationPID_S_t2
							|}
							
							State_RotationPID_S_Read(id__,
									    const_RotationPID_S_D) = let
								T_RotationPID_S_t1(id__,
										    const_RotationPID_S_D) = rdiff__!TID_RotationPID_S_t1.in?currDiff -> set_currDiff!currDiff ->  (exit.SID_RotationPID_S_Read.SID_RotationPID_S_Read -> SKIP;
													SKIP;exited.SID_RotationPID_S_Read.SID_RotationPID_S_Read -> SKIP;
													enter!SID_RotationPID_S_Read!SID_RotationPID_S_UpdateOutput -> entered!SID_RotationPID_S_Read!SID_RotationPID_S_UpdateOutput ->
													State_RotationPID_S_Read(id__,
															    const_RotationPID_S_D)
								)
								State_RotationPID_S_Read_execute(id__,o____) = SKIP; 
									entered!o____!SID_RotationPID_S_Read ->
									(SKIP; STOP /\ (
										T_RotationPID_S_t1(id__,
												    const_RotationPID_S_D)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_RotationPID_S_t1,TID_RotationPID_S_t2}) -> exit?y____:diff(SIDS,{SID_RotationPID_S_Read})!SID_RotationPID_S_Read -> (
												SKIP;
												exited!y____!SID_RotationPID_S_Read -> SKIP);
												State_RotationPID_S_Read(id__,
														    const_RotationPID_S_D)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_RotationPID_S_t1,TID_RotationPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_RotationPID_S_Read})!SID_RotationPID_S_Read -> (
												SKIP;
												exited!y____!SID_RotationPID_S_Read -> SKIP);
												State_RotationPID_S_Read(id__,
														    const_RotationPID_S_D)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_RotationPID_S_t1,TID_RotationPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_RotationPID_S_Read})!SID_RotationPID_S_Read -> (
												SKIP;
												exited!y____!SID_RotationPID_S_Read -> SKIP);
												State_RotationPID_S_Read(id__,
														    const_RotationPID_S_D)
									))
							within
								enter?x____:diff(SIDS,{SID_RotationPID_S_Read})!SID_RotationPID_S_Read -> (State_RotationPID_S_Read_execute(id__,x____))
							
							CS_RotationPID_S_UpdateOutput_sync = {|
								enter.y____.x____, 
								entered.y____.x____, 
								exit.y____.x____, 
								exited.y____.x____,
								enter.x____.y____, 
								entered.x____.y____, 
								exit.x____.y____, 
								exited.x____.y____ |
								x____ <- {SID_RotationPID_S_Read,SID_RotationPID_S_UpdateOutput},
								y____ <- {SID_RotationPID_S_UpdateOutput}
							|}
							
							
							RotationPID_S_UpdateOutput_triggers = {|
								rdiff__.TID_RotationPID_S_t1,
								internal__.TID_RotationPID_S_t2
							|}
							
							State_RotationPID_S_UpdateOutput(id__,
									    const_RotationPID_S_D) = let
								T_RotationPID_S_t2(id__,
										    const_RotationPID_S_D) = internal__!TID_RotationPID_S_t2 ->  exit.SID_RotationPID_S_UpdateOutput.SID_RotationPID_S_UpdateOutput -> SKIP;
													SKIP;exited.SID_RotationPID_S_UpdateOutput.SID_RotationPID_S_UpdateOutput -> SKIP;
													get_currRotationOut?currRotationOut -> true&(rotationOutputE.out!currRotationOut -> SKIP);enter!SID_RotationPID_S_UpdateOutput!SID_RotationPID_S_Read -> entered!SID_RotationPID_S_UpdateOutput!SID_RotationPID_S_Read ->
													State_RotationPID_S_UpdateOutput(id__,
															    const_RotationPID_S_D)
								State_RotationPID_S_UpdateOutput_execute(id__,o____) = get_currDiff?currDiff -> true & (set_currRotationOut!Mult(const_RotationPID_S_D, currDiff, core_real) -> SKIP); 
									entered!o____!SID_RotationPID_S_UpdateOutput ->
									(SKIP; STOP /\ (
										T_RotationPID_S_t2(id__,
												    const_RotationPID_S_D)
										[]
										internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_RotationPID_S_t1,TID_RotationPID_S_t2}) -> exit?y____:diff(SIDS,{SID_RotationPID_S_UpdateOutput})!SID_RotationPID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_RotationPID_S_UpdateOutput -> SKIP);
												State_RotationPID_S_UpdateOutput(id__,
														    const_RotationPID_S_D)
										[] rdiff__?x____:diff(ITIDS,{NULLTRANSITION__,TID_RotationPID_S_t1,TID_RotationPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_RotationPID_S_UpdateOutput})!SID_RotationPID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_RotationPID_S_UpdateOutput -> SKIP);
												State_RotationPID_S_UpdateOutput(id__,
														    const_RotationPID_S_D)
										[] rotationOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_RotationPID_S_t1,TID_RotationPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_RotationPID_S_UpdateOutput})!SID_RotationPID_S_UpdateOutput -> (
												SKIP;
												exited!y____!SID_RotationPID_S_UpdateOutput -> SKIP);
												State_RotationPID_S_UpdateOutput(id__,
														    const_RotationPID_S_D)
									))
							within
								enter?x____:diff(SIDS,{SID_RotationPID_S_UpdateOutput})!SID_RotationPID_S_UpdateOutput -> (State_RotationPID_S_UpdateOutput_execute(id__,x____))
							
							
							I_RotationPID_S_i0(id__,
									    const_RotationPID_S_D) = let
								T_RotationPID_S_t0(id__,
										    const_RotationPID_S_D) = internal__!TID_RotationPID_S_t0 -> enter!SID_RotationPID_S!SID_RotationPID_S_Read -> entered!SID_RotationPID_S!SID_RotationPID_S_Read ->
								SKIP
							within
								T_RotationPID_S_t0(id__,
										    const_RotationPID_S_D)
							
							
							State_RotationPID_S_Read_R(id__,
									    const_RotationPID_S_D) = 
								State_RotationPID_S_Read(id__,
										    const_RotationPID_S_D)
									[|diff(int_int,RotationPID_S_Read_triggers)|]
								SKIP
									 		
							State_RotationPID_S_UpdateOutput_R(id__,
									    const_RotationPID_S_D) = 
								State_RotationPID_S_UpdateOutput(id__,
										    const_RotationPID_S_D)
									[|diff(int_int,RotationPID_S_UpdateOutput_triggers)|]
								SKIP
									 		
								
							STM(id__,
									    const_RotationPID_S_D) = (
								I_RotationPID_S_i0(id__,
										    const_RotationPID_S_D)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_RotationPID_S_Read,SID_RotationPID_S_UpdateOutput}),
											y____ <- {SID_RotationPID_S_Read,SID_RotationPID_S_UpdateOutput}
									|}|]
								(
									State_RotationPID_S_Read_R(id__,
											    const_RotationPID_S_D)
										[|inter(CS_RotationPID_S_Read_sync,CS_RotationPID_S_UpdateOutput_sync)|]
									State_RotationPID_S_UpdateOutput_R(id__,
											    const_RotationPID_S_D)
								)
							)
							
							-- optimized memory process
							channel getV_currRotationOut: core_real
							channel getV_currDiff: core_real
							
							-- individual memory processes
							Memory_currRotationOut(x__) = ( 
								get_currRotationOut!x__ -> Memory_currRotationOut(x__)
								[]
								getV_currRotationOut!x__ -> Memory_currRotationOut(x__)
								[]
								set_currRotationOut?x__ -> Memory_currRotationOut(x__)
							)
							Memory_currDiff(x__) = ( 
								get_currDiff!x__ -> Memory_currDiff(x__)
								[]
								getV_currDiff!x__ -> Memory_currDiff(x__)
								[]
								set_currDiff?x__ -> Memory_currDiff(x__)
								[]
								rdiff__!TID_RotationPID_S_t1.in?currDiff -> Memory_currDiff(currDiff)
							)
							
							-- processes that read variables and offer transitions
							MemoryTransitions(id__,
								 currRotationOut,
								 currDiff,
								 const_RotationPID_S_D) = (
								internal__!TID_RotationPID_S_t0 -> SKIP
								[]
								rdiff__!TID_RotationPID_S_t1.in?currDiff -> SKIP
								[]
								internal__!TID_RotationPID_S_t2 -> SKIP
							
								[]
									set_currRotationOut?x__ -> SKIP
								[]
								set_currDiff?x__ -> SKIP
							 	)
							MemoryTransitions_RotationPID_S(id__,
								 const_RotationPID_S_D) =
								(
								getV_currRotationOut?currRotationOut ->	
								getV_currDiff?currDiff ->
								 MemoryTransitions(id__,
								 	 currRotationOut,
								 	 currDiff,
								 	 const_RotationPID_S_D);
								 MemoryTransitions_RotationPID_S(id__,
								 	 const_RotationPID_S_D)
								)
							
							-- synchronisation, hiding and process sets 
							MemoryVariablesProcesses_RotationPID_S = Union(
								{
									{
										Memory_currRotationOut(0),
										Memory_currDiff(0)
									}
								}
							)
							
							MemoryVariablesSyncSet = Union({
								{|
									getV_currRotationOut,
									set_currDiff,
									rdiff__.TID_RotationPID_S_t1,
									getV_currDiff,
									setWC,
									set_currRotationOut
								|}	
							})
							
							MemoryVariablesHideSet = Union({
								{|
									getV_currRotationOut,
									getWC,
									getV_currDiff
								|}
							})
							
							-- combined individual memory processes
							MemoryVariables = ||| P : MemoryVariablesProcesses_RotationPID_S @ P
							
							-- complete memory process
							MemoryN(id__,
								 const_RotationPID_S_D) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_RotationPID_S(id__,
								 const_RotationPID_S_D)) \ MemoryVariablesHideSet
							
							-- optimised memory
							-- Sets of named elements identified according to transition conditions:
							-- {}
							-- Summary of all identified named elements:
							-- {
							-- currRotationOut
							-- currDiff
							-- }
							
							-- Allocation plan:
							-- 0:{}
							--	=> {
							--		TID_RotationPID_S_t2,
							--		TID_RotationPID_S_t1,
							--		TID_RotationPID_S_t0}
							
							-- Memory transition processes
							MemoryTransitions_opt_0(id__) =
							(
								let
									Update = Current(id__)
									Current(id__)
									 	   = 
									 	   internal__!TID_RotationPID_S_t2 -> Update
									 	   []
									 	   rdiff__!TID_RotationPID_S_t1.in?currDiff -> Update
									 	   []
									 	   internal__!TID_RotationPID_S_t0 -> Update
								within
									Update
							)
							
							-- Memory cell processes
							Memory_opt_currRotationOut(x__) = ( 
								get_currRotationOut!x__ -> Memory_opt_currRotationOut(x__)
								[]
								set_currRotationOut?x__ -> Memory_opt_currRotationOut(x__)
							)
							Memory_opt_currDiff(x__) = ( 
								get_currDiff!x__ -> Memory_opt_currDiff(x__)
								[]
								set_currDiff?x__ -> Memory_opt_currDiff(x__)
							)
							
							-- Composition of memory, StateMachine and Memory transition processes
							
							MemorySTM_opt(id__,
									    const_RotationPID_S_D) =
								sbisim(	
								  dbisim(
								    sbisim(dbisim(sbisim(Memory_opt_currRotationOut(0)
								          	[| {|get_currRotationOut,set_currRotationOut|} |] 
								          	dbisim(sbisim(Memory_opt_currDiff(0)
								          	      	[| {|set_currDiff,get_currDiff|} |] 
								          	      	STM_core(id__,
								          	      			    const_RotationPID_S_D)
								          	      	)\ {|set_currDiff,get_currDiff|}
								          	      )
								          	)\ {|get_currRotationOut,set_currRotationOut|}
								          )
								      	  [| {|internal__.TID_RotationPID_S_t0,rdiff__.TID_RotationPID_S_t1,internal__.TID_RotationPID_S_t2|} |]
								      	  MemoryTransitions_opt_0(id__)
								      	  )\{|internal__.TID_RotationPID_S_t0,internal__.TID_RotationPID_S_t2|})
								      )
							
							-- main process
							
							MachineMemorySyncSet = Union({
								union(
									union(
										{|get_currRotationOut,set_currRotationOut,
										get_currDiff,set_currDiff|},
										{||}
									)
										
									,
									{|internal__.TID_RotationPID_S_t0,
									rdiff__.TID_RotationPID_S_t1,
									internal__.TID_RotationPID_S_t2|}
								),
								{|deadline|},
								WCresets
							})
							
							MachineMemoryHidingSet = Union({
								union(
									{|get_currRotationOut,set_currRotationOut,
									get_currDiff,set_currDiff|},
									{||}
								)
								,
								{|deadline|}
							})
							
							MachineInternalEvents = {|
								internal__
							|}
						
							-- main process
							AUX(id__,
									    const_RotationPID_S_D) = prioritise((((
								wbisim(STM(id__,
										    const_RotationPID_S_D))
									[|MachineMemorySyncSet|]
								(
									(MemoryN(id__,
										 const_RotationPID_S_D))
										[| union(WCsets,WCsync) |]
									Clocks(id__,
											    const_RotationPID_S_D)
								)\WCsets
							)
							[[
								rdiff__.x____ <- rdiff,
								rotationOutputE__.x____ <- rotationOutputE
								| x____ <- TIDS
							]]
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP\MachineInternalEvents)
							,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							STM_core(id__,
									    const_RotationPID_S_D) = 
								dbisim(
									sbisim(
											(STM(id__,
													    const_RotationPID_S_D)
											[| union(WCsync,WCresets) |]
											Clocks(id__,
													    const_RotationPID_S_D))\WCresets
										  )
									  )
							
							AUX_opt(id__,
									    const_RotationPID_S_D) = 
								prioritise(
									(MemorySTM_opt(id__,
											    const_RotationPID_S_D)
									)[[
										rdiff__.x____ <- rdiff,
										rotationOutputE__.x____ <- rotationOutputE
										| x____ <- TIDS
									]]
								[|{|terminate|}|>SKIP\MachineInternalEvents
								,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
							
							internal_(id__,
									    const_RotationPID_S_D) = prioritise((((
								wbisim(STM(id__,
										    const_RotationPID_S_D))
									[|MachineMemorySyncSet|]
								((MemoryN(id__,
									 const_RotationPID_S_D)) [| union(WCsets,WCsync) |] Clocks(id__,
										    const_RotationPID_S_D))\WCsets
							)
							\MachineMemoryHidingSet)
							[|{|terminate|}|>SKIP)
							,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
							-- declare clocks
							datatype ClockSet = dummyC
							channel clockReset 				-- no clocks declared
							
							-- declare trigger deadlines channel
							channel deadline : TIDS.Signal
							
							-- compile clocks process
							
							-- set of strings that uniquely identify the waiting conditions, each of which is 
							-- used to synchronise with the Memory process to set the correspoding variable in
							-- the memory process.
							datatype setWC_identifierSet = dummyWC
							
							-- declaring getWC and setWC channel for updating memory variables related to clocks
							channel setWC : setWC_identifierSet.Bool
							channel getWC : setWC_identifierSet.Bool
							
							-- Set of pairs capturing waiting condition processes and their alphabet.
							-- It includes the corresponding set of the defined operations.
							WCset(id__,
									    const_RotationPID_S_D) = Union({
								{
								}
								})
							
							-- Auxiliary function to rename the channel set for required clocks.
							
							-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
							-- It includes the corresponding set of the defined operations.
							WCsync = Union({
								{||}
								})
							-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
							-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
							WCresets = Union({
								{| | x <- SIDS |}
								})
							-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
							WCsets = Union({
								{|setWC|}
								})
							
							
							
							-- Clocks process
							Clocks(id__,
									    const_RotationPID_S_D) = || (alpha, P) : WCset(id__,
									    const_RotationPID_S_D) @ [alpha] wbisim(P)
			
							-- collects all clockResets including those of operations
							ClockResets = Union({
								{|clockReset|}
												})
							
							-- With no internal events visible
							Dunopt__(id__,
									    const_RotationPID_S_D) = timed_priority(AUX(id__,
									    const_RotationPID_S_D) \ union(internal_events,ClockResets))
							
							D__(id__,
									    const_RotationPID_S_D) = timed_priority(AUX_opt(id__,
									    const_RotationPID_S_D) \ union(internal_events,ClockResets))
							
							O__(id__,
									    const_RotationPID_S_D) = D__(id__,
									    const_RotationPID_S_D)
							
							-- With enter/entered/exit/exited events visible
							FVS__(id__,
									    const_RotationPID_S_D) = timed_priority(AUX(id__,
									    const_RotationPID_S_D) \ ClockResets)
							
							-- With enterV/enteredV/exitV/exitedV events visible
							VS__(id__,
									    const_RotationPID_S_D) = ShowV(timed_priority(AUX(id__,
									    const_RotationPID_S_D) \ ClockResets))
							
							-- With clock resets visible
							FVS_C__(id__,
									    const_RotationPID_S_D) = AUX(id__,
									    const_RotationPID_S_D)
						}
					endmodule
		
		
			Timed(OneStep) {
				-- declaring call and ret events for undefined operations
				channel setLeftMotorSpeedCall: core_real
				channel setRightMotorSpeedCall: core_real
				channel disableInterruptsCall
				channel enableInterruptsCall
		
				CALL__setLeftMotorSpeed(id__,
						    speed) =  EDeadline(setLeftMotorSpeedCall.speed,0)		
				CALL__setRightMotorSpeed(id__,
						    speed) =  EDeadline(setRightMotorSpeedCall.speed,0)		
				CALL__disableInterrupts(id__) =  EDeadline(disableInterruptsCall,0)		
				CALL__enableInterrupts(id__) =  EDeadline(enableInterruptsCall,0)		
							
				-- declaring controller events
				channel leftMotorVelocity: InOut.core_real
				channel rightMotorVelocity: InOut.core_real
				channel angle: InOut.core_real
				channel gyroX: InOut.core_real
				channel gyroY: InOut.core_real
				channel gyroZ: InOut.core_real
								
	
			
				-- declaring controller memory
				Memory(id__) = SKIP
				-- declaring controller termination channel
				channel terminate
				
				-- set of visible memory events
				visibleMemoryEvents = {||}
			
				D__(id__,
						    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
						    const_Segway_P2_SegwayController_stm_ref0_loopTime,
						    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
						    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
						    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
						    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
						    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
						    const_Segway_P2_SegwayController_stm_ref1_P,
						    const_Segway_P2_SegwayController_stm_ref1_D,
						    const_Segway_P2_SegwayController_stm_ref2_P,
						    const_Segway_P2_SegwayController_stm_ref2_I,
						    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
						    const_Segway_P2_SegwayController_stm_ref3_D) = prioritise(wbisim(
					(
						(
							let
								const_BalanceSTM_P2_maxAngle = const_Segway_P2_SegwayController_stm_ref0_maxAngle
								const_BalanceSTM_P2_loopTime = const_Segway_P2_SegwayController_stm_ref0_loopTime
								const_BalanceSTM_P2_startupDelay = const_Segway_P2_SegwayController_stm_ref0_startupDelay
								const_BalanceSTM_P2_speedUpdate = const_Segway_P2_SegwayController_stm_ref0_speedUpdate
								const_BalanceSTM_P2_rotationUpdate = const_Segway_P2_SegwayController_stm_ref0_rotationUpdate
								const_BalanceSTM_P2_motorBudget = const_Segway_P2_SegwayController_stm_ref0_motorBudget
								const_BalanceSTM_P2_angleBudget = const_Segway_P2_SegwayController_stm_ref0_angleBudget
								const_BalanceSTM_P2_speedBudget = const_Segway_P2_SegwayController_stm_ref0_speedBudget
								const_BalanceSTM_P2_rotationBudget = const_Segway_P2_SegwayController_stm_ref0_rotationBudget
							within 
							stm_ref0::D__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::leftMotorVelocity <- leftMotorVelocity,
								stm_ref0::rightMotorVelocity <- rightMotorVelocity,
								stm_ref0::angle <- angle,
								stm_ref0::gyroX <- gyroX,
								stm_ref0::gyroY <- gyroY,
								stm_ref0::gyroZ <- gyroZ,
								stm_ref0::angleOutputE.in <- stm_ref1::angleOutputE.out,
								stm_ref0::angleOutputE.out <- stm_ref1::angleOutputE.in,
								stm_ref0::speedOutputE.in <- stm_ref2::speedOutputE.out,
								stm_ref0::speedOutputE.out <- stm_ref2::speedOutputE.in,
								stm_ref0::rotationOutputE.in <- stm_ref3::rotationOutputE.out,
								stm_ref0::rotationOutputE.out <- stm_ref3::rotationOutputE.in,
								stm_ref0::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
								stm_ref0::setRightMotorSpeedCall <- setRightMotorSpeedCall,
								stm_ref0::disableInterruptsCall <- disableInterruptsCall,
								stm_ref0::enableInterruptsCall <- enableInterruptsCall
							]]
						)
							[|{|terminate, stm_ref1::angleOutputE, stm_ref0::anewError, stm_ref0::adiff, stm_ref2::speedOutputE, stm_ref0::snewError, stm_ref3::rotationOutputE, stm_ref0::rdiff|}|]
						(
							(
								let
									const_AnglePID_S_P = const_Segway_P2_SegwayController_stm_ref1_P
									const_AnglePID_S_D = const_Segway_P2_SegwayController_stm_ref1_D
								within 
								stm_ref1::D__(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::anewError.in <- stm_ref0::anewError.out,
									stm_ref1::anewError.out <- stm_ref0::anewError.in,
									stm_ref1::adiff.in <- stm_ref0::adiff.out,
									stm_ref1::adiff.out <- stm_ref0::adiff.in
								]]
							)
								[|{|terminate|}|]
							(
								(
									let
										const_SpeedPID_S_P = const_Segway_P2_SegwayController_stm_ref2_P
										const_SpeedPID_S_I = const_Segway_P2_SegwayController_stm_ref2_I
										const_SpeedPID_S_maxIntegral = const_Segway_P2_SegwayController_stm_ref2_maxIntegral
									within 
									stm_ref2::D__(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::snewError.in <- stm_ref0::snewError.out,
										stm_ref2::snewError.out <- stm_ref0::snewError.in
									]]
								)
									[|{|terminate|}|]
								(
									let
										const_RotationPID_S_D = const_Segway_P2_SegwayController_stm_ref3_D
									within 
									stm_ref3::D__(id__,
											    const_RotationPID_S_D)[[
										stm_ref3::terminate <- terminate,
										stm_ref3::rdiff.in <- stm_ref0::rdiff.out,
										stm_ref3::rdiff.out <- stm_ref0::rdiff.in
									]]
								)
							)
							\diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref1::angleOutputE, stm_ref0::anewError, stm_ref0::adiff, stm_ref2::speedOutputE, stm_ref0::snewError, stm_ref3::rotationOutputE, stm_ref0::rdiff|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP,
				<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				O__(id__,
						    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
						    const_Segway_P2_SegwayController_stm_ref0_loopTime,
						    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
						    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
						    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
						    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
						    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
						    const_Segway_P2_SegwayController_stm_ref1_P,
						    const_Segway_P2_SegwayController_stm_ref1_D,
						    const_Segway_P2_SegwayController_stm_ref2_P,
						    const_Segway_P2_SegwayController_stm_ref2_I,
						    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
						    const_Segway_P2_SegwayController_stm_ref3_D) = D__(id__,
						    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
						    const_Segway_P2_SegwayController_stm_ref0_loopTime,
						    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
						    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
						    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
						    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
						    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
						    const_Segway_P2_SegwayController_stm_ref1_P,
						    const_Segway_P2_SegwayController_stm_ref1_D,
						    const_Segway_P2_SegwayController_stm_ref2_P,
						    const_Segway_P2_SegwayController_stm_ref2_I,
						    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
						    const_Segway_P2_SegwayController_stm_ref3_D)
				
				-- VS version
				VS__(id__,
						    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
						    const_Segway_P2_SegwayController_stm_ref0_loopTime,
						    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
						    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
						    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
						    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
						    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
						    const_Segway_P2_SegwayController_stm_ref1_P,
						    const_Segway_P2_SegwayController_stm_ref1_D,
						    const_Segway_P2_SegwayController_stm_ref2_P,
						    const_Segway_P2_SegwayController_stm_ref2_I,
						    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
						    const_Segway_P2_SegwayController_stm_ref3_D) = prioritise(wbisim(
					(
						(
							let
								const_BalanceSTM_P2_maxAngle = const_Segway_P2_SegwayController_stm_ref0_maxAngle
								const_BalanceSTM_P2_loopTime = const_Segway_P2_SegwayController_stm_ref0_loopTime
								const_BalanceSTM_P2_startupDelay = const_Segway_P2_SegwayController_stm_ref0_startupDelay
								const_BalanceSTM_P2_speedUpdate = const_Segway_P2_SegwayController_stm_ref0_speedUpdate
								const_BalanceSTM_P2_rotationUpdate = const_Segway_P2_SegwayController_stm_ref0_rotationUpdate
								const_BalanceSTM_P2_motorBudget = const_Segway_P2_SegwayController_stm_ref0_motorBudget
								const_BalanceSTM_P2_angleBudget = const_Segway_P2_SegwayController_stm_ref0_angleBudget
								const_BalanceSTM_P2_speedBudget = const_Segway_P2_SegwayController_stm_ref0_speedBudget
								const_BalanceSTM_P2_rotationBudget = const_Segway_P2_SegwayController_stm_ref0_rotationBudget
							within 
							stm_ref0::VS__(id__,
									    const_BalanceSTM_P2_maxAngle,
									    const_BalanceSTM_P2_loopTime,
									    const_BalanceSTM_P2_startupDelay,
									    const_BalanceSTM_P2_speedUpdate,
									    const_BalanceSTM_P2_rotationUpdate,
									    const_BalanceSTM_P2_motorBudget,
									    const_BalanceSTM_P2_angleBudget,
									    const_BalanceSTM_P2_speedBudget,
									    const_BalanceSTM_P2_rotationBudget)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::leftMotorVelocity <- leftMotorVelocity,
								stm_ref0::rightMotorVelocity <- rightMotorVelocity,
								stm_ref0::angle <- angle,
								stm_ref0::gyroX <- gyroX,
								stm_ref0::gyroY <- gyroY,
								stm_ref0::gyroZ <- gyroZ,
								stm_ref0::angleOutputE.in <- stm_ref1::angleOutputE.out,
								stm_ref0::angleOutputE.out <- stm_ref1::angleOutputE.in,
								stm_ref0::speedOutputE.in <- stm_ref2::speedOutputE.out,
								stm_ref0::speedOutputE.out <- stm_ref2::speedOutputE.in,
								stm_ref0::rotationOutputE.in <- stm_ref3::rotationOutputE.out,
								stm_ref0::rotationOutputE.out <- stm_ref3::rotationOutputE.in,
								stm_ref0::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
								stm_ref0::setRightMotorSpeedCall <- setRightMotorSpeedCall,
								stm_ref0::disableInterruptsCall <- disableInterruptsCall,
								stm_ref0::enableInterruptsCall <- enableInterruptsCall
							]]
						)
							[|{|terminate, stm_ref1::angleOutputE, stm_ref0::anewError, stm_ref0::adiff, stm_ref2::speedOutputE, stm_ref0::snewError, stm_ref3::rotationOutputE, stm_ref0::rdiff|}|]
						(
							(
								let
									const_AnglePID_S_P = const_Segway_P2_SegwayController_stm_ref1_P
									const_AnglePID_S_D = const_Segway_P2_SegwayController_stm_ref1_D
								within 
								stm_ref1::VS__(id__,
										    const_AnglePID_S_P,
										    const_AnglePID_S_D)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::anewError.in <- stm_ref0::anewError.out,
									stm_ref1::anewError.out <- stm_ref0::anewError.in,
									stm_ref1::adiff.in <- stm_ref0::adiff.out,
									stm_ref1::adiff.out <- stm_ref0::adiff.in
								]]
							)
								[|{|terminate|}|]
							(
								(
									let
										const_SpeedPID_S_P = const_Segway_P2_SegwayController_stm_ref2_P
										const_SpeedPID_S_I = const_Segway_P2_SegwayController_stm_ref2_I
										const_SpeedPID_S_maxIntegral = const_Segway_P2_SegwayController_stm_ref2_maxIntegral
									within 
									stm_ref2::VS__(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::snewError.in <- stm_ref0::snewError.out,
										stm_ref2::snewError.out <- stm_ref0::snewError.in
									]]
								)
									[|{|terminate|}|]
								(
									let
										const_RotationPID_S_D = const_Segway_P2_SegwayController_stm_ref3_D
									within 
									stm_ref3::VS__(id__,
											    const_RotationPID_S_D)[[
										stm_ref3::terminate <- terminate,
										stm_ref3::rdiff.in <- stm_ref0::rdiff.out,
										stm_ref3::rdiff.out <- stm_ref0::rdiff.in
									]]
								)
							)
							\diff(
								{|terminate|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref1::angleOutputE, stm_ref0::anewError, stm_ref0::adiff, stm_ref2::speedOutputE, stm_ref0::snewError, stm_ref3::rotationOutputE, stm_ref0::rdiff|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP,
				<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				HEXT(id__,
						    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
						    const_Segway_P2_SegwayController_stm_ref0_loopTime,
						    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
						    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
						    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
						    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
						    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
						    const_Segway_P2_SegwayController_stm_ref1_P,
						    const_Segway_P2_SegwayController_stm_ref1_D,
						    const_Segway_P2_SegwayController_stm_ref2_P,
						    const_Segway_P2_SegwayController_stm_ref2_I,
						    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
						    const_Segway_P2_SegwayController_stm_ref3_D) = D__(id__,
						    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
						    const_Segway_P2_SegwayController_stm_ref0_loopTime,
						    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
						    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
						    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
						    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
						    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
						    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
						    const_Segway_P2_SegwayController_stm_ref1_P,
						    const_Segway_P2_SegwayController_stm_ref1_D,
						    const_Segway_P2_SegwayController_stm_ref2_P,
						    const_Segway_P2_SegwayController_stm_ref2_I,
						    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
						    const_Segway_P2_SegwayController_stm_ref3_D) [|shared_variable_events|] SKIP
			}
		endmodule
	
	Timed(OneStep) {
			
		-- declaring module memory
		Memory(id__) = SKIP
		
		visibleMemoryEvents = {||}
		
		D__(id__,
				    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
				    const_Segway_P2_SegwayController_stm_ref0_loopTime,
				    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
				    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
				    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
				    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
				    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
				    const_Segway_P2_SegwayController_stm_ref1_P,
				    const_Segway_P2_SegwayController_stm_ref1_D,
				    const_Segway_P2_SegwayController_stm_ref2_P,
				    const_Segway_P2_SegwayController_stm_ref2_I,
				    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
				    const_Segway_P2_SegwayController_stm_ref3_D) = prioritise(
			(				(
					(
						(SKIP)
							[|{||}|]
						(
							(
								SegwayController::D__(id__,
										    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
										    const_Segway_P2_SegwayController_stm_ref0_loopTime,
										    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
										    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
										    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
										    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
										    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
										    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
										    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
										    const_Segway_P2_SegwayController_stm_ref1_P,
										    const_Segway_P2_SegwayController_stm_ref1_D,
										    const_Segway_P2_SegwayController_stm_ref2_P,
										    const_Segway_P2_SegwayController_stm_ref2_I,
										    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
										    const_Segway_P2_SegwayController_stm_ref3_D)[[
									SegwayController::terminate <- terminate,
									SegwayController::angle <- angle,
									SegwayController::gyroX <- gyroX,
									SegwayController::gyroY <- gyroY,
									SegwayController::gyroZ <- gyroZ,
									SegwayController::leftMotorVelocity <- leftMotorVelocity,
									SegwayController::rightMotorVelocity <- rightMotorVelocity,
									SegwayController::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
									SegwayController::setRightMotorSpeedCall <- setRightMotorSpeedCall,
									SegwayController::disableInterruptsCall <- disableInterruptsCall,
									SegwayController::enableInterruptsCall <- enableInterruptsCall
								]]
							)
								[|
									union(
										{|
										|},
										{|
										|}
									)
								|]
							Memory(id__)
						)
					)
					\ Union({
						{|
						|},
						{|
						|},
						{|
						|}
					})
					[|{|terminate|}|>SKIP
				)\{|terminate|}
			),
			<visibleMemoryEvents,{tock}>
		)
		
		O__(id__,
				    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
				    const_Segway_P2_SegwayController_stm_ref0_loopTime,
				    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
				    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
				    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
				    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
				    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
				    const_Segway_P2_SegwayController_stm_ref1_P,
				    const_Segway_P2_SegwayController_stm_ref1_D,
				    const_Segway_P2_SegwayController_stm_ref2_P,
				    const_Segway_P2_SegwayController_stm_ref2_I,
				    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
				    const_Segway_P2_SegwayController_stm_ref3_D) = D__(id__,
				    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
				    const_Segway_P2_SegwayController_stm_ref0_loopTime,
				    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
				    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
				    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
				    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
				    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
				    const_Segway_P2_SegwayController_stm_ref1_P,
				    const_Segway_P2_SegwayController_stm_ref1_D,
				    const_Segway_P2_SegwayController_stm_ref2_P,
				    const_Segway_P2_SegwayController_stm_ref2_I,
				    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
				    const_Segway_P2_SegwayController_stm_ref3_D)
		
		-- visible state equivalent
		VS__(id__,
				    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
				    const_Segway_P2_SegwayController_stm_ref0_loopTime,
				    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
				    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
				    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
				    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
				    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
				    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
				    const_Segway_P2_SegwayController_stm_ref1_P,
				    const_Segway_P2_SegwayController_stm_ref1_D,
				    const_Segway_P2_SegwayController_stm_ref2_P,
				    const_Segway_P2_SegwayController_stm_ref2_I,
				    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
				    const_Segway_P2_SegwayController_stm_ref3_D) = prioritise(
			(				(
					(
						(SKIP)
							[|{||}|]
						(
							(
								SegwayController::VS__(id__,
										    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
										    const_Segway_P2_SegwayController_stm_ref0_loopTime,
										    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
										    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
										    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
										    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
										    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
										    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
										    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
										    const_Segway_P2_SegwayController_stm_ref1_P,
										    const_Segway_P2_SegwayController_stm_ref1_D,
										    const_Segway_P2_SegwayController_stm_ref2_P,
										    const_Segway_P2_SegwayController_stm_ref2_I,
										    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
										    const_Segway_P2_SegwayController_stm_ref3_D)[[
									SegwayController::terminate <- terminate,
									SegwayController::angle <- angle,
									SegwayController::gyroX <- gyroX,
									SegwayController::gyroY <- gyroY,
									SegwayController::gyroZ <- gyroZ,
									SegwayController::leftMotorVelocity <- leftMotorVelocity,
									SegwayController::rightMotorVelocity <- rightMotorVelocity,
									SegwayController::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
									SegwayController::setRightMotorSpeedCall <- setRightMotorSpeedCall,
									SegwayController::disableInterruptsCall <- disableInterruptsCall,
									SegwayController::enableInterruptsCall <- enableInterruptsCall
								]]
							)
								[|
									union(
										{|
										|},
										{|
										|}
									)
								|]
							Memory(id__)
						)
					)
					\ Union({
						{|
						|},
						{|
						|},
						{|
						|}
					})							
					[|{|terminate|}|>SKIP
				)\{|terminate|}
			)
			,<visibleMemoryEvents,{tock}>
		)
	}
endmodule




