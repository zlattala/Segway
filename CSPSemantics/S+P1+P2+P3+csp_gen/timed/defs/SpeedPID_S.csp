		module SpeedPID_S
		exports
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			external prioritise
			transparent wbisim
			transparent dbisim
			transparent sbisim
		
			Timed(OneStep) {	
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_currNewError, set_currNewError: core_real
				channel get_currSpeedOutput, set_currSpeedOutput: core_real
				channel get_speedIntegral, set_speedIntegral: core_real
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
				channel snewError__: TIDS.InOut.core_real
				channel snewError: InOut.core_real
				channel speedOutputE__: TIDS.InOut.core_real
				channel speedOutputE: InOut.core_real
				
				-- declaring call and ret events for undefined operations
			
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_SpeedPID_S
				              | SID_SpeedPID_S_Read
				              | SID_SpeedPID_S_UpdateIntegral
				              | SID_SpeedPID_S_UpdateOutput
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_SpeedPID_S_t0
				              | TID_SpeedPID_S_t1
				              | TID_SpeedPID_S_t2
				              | TID_SpeedPID_S_t3
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_SpeedPID_S_t1,	TID_SpeedPID_S_t2,	TID_SpeedPID_S_t3
				}
				
				int_int = {|
					snewError__.TID_SpeedPID_S_t1,
					speedOutputE__.TID_SpeedPID_S_t1,
					internal__.TID_SpeedPID_S_t1,
					snewError__.TID_SpeedPID_S_t2,
					speedOutputE__.TID_SpeedPID_S_t2,
					internal__.TID_SpeedPID_S_t2,
					snewError__.TID_SpeedPID_S_t3,
					speedOutputE__.TID_SpeedPID_S_t3,
					internal__.TID_SpeedPID_S_t3
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_SpeedPID_S_Read_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput},
					y____ <- {SID_SpeedPID_S_Read}
				|}
				
				
				SpeedPID_S_Read_triggers = {|
					snewError__.TID_SpeedPID_S_t3,
					internal__.TID_SpeedPID_S_t1,
					internal__.TID_SpeedPID_S_t2
				|}
				
				State_SpeedPID_S_Read(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = let
					T_SpeedPID_S_t3(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral) = snewError__!TID_SpeedPID_S_t3.in?currNewError -> set_currNewError!currNewError ->  (exit.SID_SpeedPID_S_Read.SID_SpeedPID_S_Read -> SKIP;
										SKIP;exited.SID_SpeedPID_S_Read.SID_SpeedPID_S_Read -> SKIP;
										enter!SID_SpeedPID_S_Read!SID_SpeedPID_S_UpdateIntegral -> entered!SID_SpeedPID_S_Read!SID_SpeedPID_S_UpdateIntegral ->
										State_SpeedPID_S_Read(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
					)
					State_SpeedPID_S_Read_execute(id__,o____) = SKIP; 
						entered!o____!SID_SpeedPID_S_Read ->
						(SKIP; STOP /\ (
							T_SpeedPID_S_t3(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_Read -> SKIP);
									State_SpeedPID_S_Read(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
							[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_Read -> SKIP);
									State_SpeedPID_S_Read(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
							[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_Read -> SKIP);
									State_SpeedPID_S_Read(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
						))
				within
					enter?x____:diff(SIDS,{SID_SpeedPID_S_Read})!SID_SpeedPID_S_Read -> (State_SpeedPID_S_Read_execute(id__,x____))
				
				CS_SpeedPID_S_UpdateIntegral_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput},
					y____ <- {SID_SpeedPID_S_UpdateIntegral}
				|}
				
				
				SpeedPID_S_UpdateIntegral_triggers = {|
					snewError__.TID_SpeedPID_S_t3,
					internal__.TID_SpeedPID_S_t1,
					internal__.TID_SpeedPID_S_t2
				|}
				
				State_SpeedPID_S_UpdateIntegral(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = let
					T_SpeedPID_S_t1(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral) = internal__!TID_SpeedPID_S_t1 ->  exit.SID_SpeedPID_S_UpdateIntegral.SID_SpeedPID_S_UpdateIntegral -> SKIP;
										SKIP;exited.SID_SpeedPID_S_UpdateIntegral.SID_SpeedPID_S_UpdateIntegral -> SKIP;
										enter!SID_SpeedPID_S_UpdateIntegral!SID_SpeedPID_S_UpdateOutput -> entered!SID_SpeedPID_S_UpdateIntegral!SID_SpeedPID_S_UpdateOutput ->
										State_SpeedPID_S_UpdateIntegral(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
					State_SpeedPID_S_UpdateIntegral_execute(id__,o____) = get_speedIntegral?speedIntegral -> get_currNewError?currNewError -> true & (set_speedIntegral!Plus(speedIntegral, currNewError, core_real) -> SKIP);get_speedIntegral?speedIntegral -> true & (set_speedIntegral!(if (speedIntegral>const_SpeedPID_S_maxIntegral) then const_SpeedPID_S_maxIntegral else (if (speedIntegral<Neg(const_SpeedPID_S_maxIntegral, core_int)) then Neg(const_SpeedPID_S_maxIntegral, core_int) else speedIntegral)) -> SKIP); 
						entered!o____!SID_SpeedPID_S_UpdateIntegral ->
						(SKIP; STOP /\ (
							T_SpeedPID_S_t1(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_UpdateIntegral -> SKIP);
									State_SpeedPID_S_UpdateIntegral(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
							[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_UpdateIntegral -> SKIP);
									State_SpeedPID_S_UpdateIntegral(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
							[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_UpdateIntegral -> SKIP);
									State_SpeedPID_S_UpdateIntegral(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
						))
				within
					enter?x____:diff(SIDS,{SID_SpeedPID_S_UpdateIntegral})!SID_SpeedPID_S_UpdateIntegral -> (State_SpeedPID_S_UpdateIntegral_execute(id__,x____))
				
				CS_SpeedPID_S_UpdateOutput_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput},
					y____ <- {SID_SpeedPID_S_UpdateOutput}
				|}
				
				
				SpeedPID_S_UpdateOutput_triggers = {|
					snewError__.TID_SpeedPID_S_t3,
					internal__.TID_SpeedPID_S_t1,
					internal__.TID_SpeedPID_S_t2
				|}
				
				State_SpeedPID_S_UpdateOutput(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = let
					T_SpeedPID_S_t2(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral) = internal__!TID_SpeedPID_S_t2 ->  exit.SID_SpeedPID_S_UpdateOutput.SID_SpeedPID_S_UpdateOutput -> SKIP;
										SKIP;exited.SID_SpeedPID_S_UpdateOutput.SID_SpeedPID_S_UpdateOutput -> SKIP;
										get_currSpeedOutput?currSpeedOutput -> true&(speedOutputE.out!currSpeedOutput -> SKIP);enter!SID_SpeedPID_S_UpdateOutput!SID_SpeedPID_S_Read -> entered!SID_SpeedPID_S_UpdateOutput!SID_SpeedPID_S_Read ->
										State_SpeedPID_S_UpdateOutput(id__,
												    const_SpeedPID_S_P,
												    const_SpeedPID_S_I,
												    const_SpeedPID_S_maxIntegral)
					State_SpeedPID_S_UpdateOutput_execute(id__,o____) = get_speedIntegral?speedIntegral -> get_currNewError?currNewError -> true & (set_currSpeedOutput!Plus(Mult(currNewError, const_SpeedPID_S_P, core_real), Mult(speedIntegral, const_SpeedPID_S_I, core_real), core_real) -> SKIP); 
						entered!o____!SID_SpeedPID_S_UpdateOutput ->
						(SKIP; STOP /\ (
							T_SpeedPID_S_t2(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_UpdateOutput -> SKIP);
									State_SpeedPID_S_UpdateOutput(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
							[] snewError__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_UpdateOutput -> SKIP);
									State_SpeedPID_S_UpdateOutput(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
							[] speedOutputE__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_S_t3,TID_SpeedPID_S_t1,TID_SpeedPID_S_t2})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (
									SKIP;
									exited!y____!SID_SpeedPID_S_UpdateOutput -> SKIP);
									State_SpeedPID_S_UpdateOutput(id__,
											    const_SpeedPID_S_P,
											    const_SpeedPID_S_I,
											    const_SpeedPID_S_maxIntegral)
						))
				within
					enter?x____:diff(SIDS,{SID_SpeedPID_S_UpdateOutput})!SID_SpeedPID_S_UpdateOutput -> (State_SpeedPID_S_UpdateOutput_execute(id__,x____))
				
				
				I_SpeedPID_S_i0(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = let
					T_SpeedPID_S_t0(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral) = internal__!TID_SpeedPID_S_t0 -> enter!SID_SpeedPID_S!SID_SpeedPID_S_Read -> entered!SID_SpeedPID_S!SID_SpeedPID_S_Read ->
					SKIP
				within
					T_SpeedPID_S_t0(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral)
				
				
				State_SpeedPID_S_Read_R(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
					State_SpeedPID_S_Read(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral)
						[|diff(int_int,SpeedPID_S_Read_triggers)|]
					SKIP
						 		
				State_SpeedPID_S_UpdateIntegral_R(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
					State_SpeedPID_S_UpdateIntegral(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral)
						[|diff(int_int,SpeedPID_S_UpdateIntegral_triggers)|]
					SKIP
						 		
				State_SpeedPID_S_UpdateOutput_R(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
					State_SpeedPID_S_UpdateOutput(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral)
						[|diff(int_int,SpeedPID_S_UpdateOutput_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = (
					I_SpeedPID_S_i0(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput}),
								y____ <- {SID_SpeedPID_S_Read,SID_SpeedPID_S_UpdateIntegral,SID_SpeedPID_S_UpdateOutput}
						|}|]
					(
						State_SpeedPID_S_Read_R(id__,
								    const_SpeedPID_S_P,
								    const_SpeedPID_S_I,
								    const_SpeedPID_S_maxIntegral)
							[|inter(CS_SpeedPID_S_Read_sync,union(CS_SpeedPID_S_UpdateIntegral_sync,CS_SpeedPID_S_UpdateOutput_sync))|]
						(
							State_SpeedPID_S_UpdateIntegral_R(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
								[|inter(CS_SpeedPID_S_UpdateIntegral_sync,CS_SpeedPID_S_UpdateOutput_sync)|]
							State_SpeedPID_S_UpdateOutput_R(id__,
									    const_SpeedPID_S_P,
									    const_SpeedPID_S_I,
									    const_SpeedPID_S_maxIntegral)
						)
					)
				)
				
				-- optimized memory process
				channel getV_currNewError: core_real
				channel getV_currSpeedOutput: core_real
				channel getV_speedIntegral: core_real
				
				-- individual memory processes
				Memory_currNewError(x__) = ( 
					get_currNewError!x__ -> Memory_currNewError(x__)
					[]
					getV_currNewError!x__ -> Memory_currNewError(x__)
					[]
					set_currNewError?x__ -> Memory_currNewError(x__)
					[]
					snewError__!TID_SpeedPID_S_t3.in?currNewError -> Memory_currNewError(currNewError)
				)
				Memory_currSpeedOutput(x__) = ( 
					get_currSpeedOutput!x__ -> Memory_currSpeedOutput(x__)
					[]
					getV_currSpeedOutput!x__ -> Memory_currSpeedOutput(x__)
					[]
					set_currSpeedOutput?x__ -> Memory_currSpeedOutput(x__)
				)
				Memory_speedIntegral(x__) = ( 
					get_speedIntegral!x__ -> Memory_speedIntegral(x__)
					[]
					getV_speedIntegral!x__ -> Memory_speedIntegral(x__)
					[]
					set_speedIntegral?x__ -> Memory_speedIntegral(x__)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__,
					 currNewError,
					 currSpeedOutput,
					 speedIntegral,
					 const_SpeedPID_S_P,
					 const_SpeedPID_S_I,
					 const_SpeedPID_S_maxIntegral) = (
					internal__!TID_SpeedPID_S_t0 -> SKIP
					[]
					internal__!TID_SpeedPID_S_t1 -> SKIP
					[]
					internal__!TID_SpeedPID_S_t2 -> SKIP
					[]
					snewError__!TID_SpeedPID_S_t3.in?currNewError -> SKIP
				
					[]
						set_currNewError?x__ -> SKIP
					[]
					set_currSpeedOutput?x__ -> SKIP
					[]
					set_speedIntegral?x__ -> SKIP
				 	)
				MemoryTransitions_SpeedPID_S(id__,
					 const_SpeedPID_S_P,
					 const_SpeedPID_S_I,
					 const_SpeedPID_S_maxIntegral) =
					(
					getV_currNewError?currNewError ->	
					getV_currSpeedOutput?currSpeedOutput ->	
					getV_speedIntegral?speedIntegral ->
					 MemoryTransitions(id__,
					 	 currNewError,
					 	 currSpeedOutput,
					 	 speedIntegral,
					 	 const_SpeedPID_S_P,
					 	 const_SpeedPID_S_I,
					 	 const_SpeedPID_S_maxIntegral);
					 MemoryTransitions_SpeedPID_S(id__,
					 	 const_SpeedPID_S_P,
					 	 const_SpeedPID_S_I,
					 	 const_SpeedPID_S_maxIntegral)
					)
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_SpeedPID_S = Union(
					{
						{
							Memory_currNewError(0),
							Memory_currSpeedOutput(0),
							Memory_speedIntegral(0)
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					{|
						getV_currNewError,
						getV_currSpeedOutput,
						set_currNewError,
						set_speedIntegral,
						set_currSpeedOutput,
						snewError__.TID_SpeedPID_S_t3,
						setWC,
						getV_speedIntegral
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					{|
						getV_currNewError,
						getV_currSpeedOutput,
						getWC,
						getV_speedIntegral
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| P : MemoryVariablesProcesses_SpeedPID_S @ P
				
				-- complete memory process
				MemoryN(id__,
					 const_SpeedPID_S_P,
					 const_SpeedPID_S_I,
					 const_SpeedPID_S_maxIntegral) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_SpeedPID_S(id__,
					 const_SpeedPID_S_P,
					 const_SpeedPID_S_I,
					 const_SpeedPID_S_maxIntegral)) \ MemoryVariablesHideSet
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- Summary of all identified named elements:
				-- {
				-- currNewError
				-- speedIntegral
				-- currSpeedOutput
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_SpeedPID_S_t1,
				--		TID_SpeedPID_S_t3,
				--		TID_SpeedPID_S_t2,
				--		TID_SpeedPID_S_t0}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   internal__!TID_SpeedPID_S_t1 -> Update
						 	   []
						 	   snewError__!TID_SpeedPID_S_t3.in?currNewError -> Update
						 	   []
						 	   internal__!TID_SpeedPID_S_t2 -> Update
						 	   []
						 	   internal__!TID_SpeedPID_S_t0 -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_currNewError(x__) = ( 
					get_currNewError!x__ -> Memory_opt_currNewError(x__)
					[]
					set_currNewError?x__ -> Memory_opt_currNewError(x__)
				)
				Memory_opt_speedIntegral(x__) = ( 
					get_speedIntegral!x__ -> Memory_opt_speedIntegral(x__)
					[]
					set_speedIntegral?x__ -> Memory_opt_speedIntegral(x__)
				)
				Memory_opt_currSpeedOutput(x__) = ( 
					get_currSpeedOutput!x__ -> Memory_opt_currSpeedOutput(x__)
					[]
					set_currSpeedOutput?x__ -> Memory_opt_currSpeedOutput(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) =
					sbisim(	
					  dbisim(
					    sbisim(dbisim(sbisim(Memory_opt_currNewError(0)
					          	[| {|set_currNewError,get_currNewError|} |] 
					          	dbisim(sbisim(Memory_opt_speedIntegral(0)
					          	      	[| {|set_speedIntegral,get_speedIntegral|} |] 
					          	      	dbisim(sbisim(Memory_opt_currSpeedOutput(0)
					          	      	      	[| {|set_currSpeedOutput,get_currSpeedOutput|} |] 
					          	      	      	STM_core(id__,
					          	      	      			    const_SpeedPID_S_P,
					          	      	      			    const_SpeedPID_S_I,
					          	      	      			    const_SpeedPID_S_maxIntegral)
					          	      	      	)\ {|set_currSpeedOutput,get_currSpeedOutput|}
					          	      	      )
					          	      	)\ {|set_speedIntegral,get_speedIntegral|}
					          	      )
					          	)\ {|set_currNewError,get_currNewError|}
					          )
					      	  [| {|internal__.TID_SpeedPID_S_t1,internal__.TID_SpeedPID_S_t0,snewError__.TID_SpeedPID_S_t3,internal__.TID_SpeedPID_S_t2|} |]
					      	  MemoryTransitions_opt_0(id__)
					      	  )\{|internal__.TID_SpeedPID_S_t1,internal__.TID_SpeedPID_S_t0,internal__.TID_SpeedPID_S_t2|})
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_currNewError,set_currNewError,
							get_currSpeedOutput,set_currSpeedOutput,
							get_speedIntegral,set_speedIntegral|},
							{||}
						)
							
						,
						{|internal__.TID_SpeedPID_S_t0,
						internal__.TID_SpeedPID_S_t1,
						internal__.TID_SpeedPID_S_t2,
						snewError__.TID_SpeedPID_S_t3|}
					),
					{|deadline|},
					WCresets
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_currNewError,set_currNewError,
						get_currSpeedOutput,set_currSpeedOutput,
						get_speedIntegral,set_speedIntegral|},
						{||}
					)
					,
					{|deadline|}
				})
				
				MachineInternalEvents = {|
					internal__
				|}
			
				-- main process
				AUX(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = prioritise((((
					wbisim(STM(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral))
						[|MachineMemorySyncSet|]
					(
						(MemoryN(id__,
							 const_SpeedPID_S_P,
							 const_SpeedPID_S_I,
							 const_SpeedPID_S_maxIntegral))
							[| union(WCsets,WCsync) |]
						Clocks(id__,
								    const_SpeedPID_S_P,
								    const_SpeedPID_S_I,
								    const_SpeedPID_S_maxIntegral)
					)\WCsets
				)
				[[
					snewError__.x____ <- snewError,
					speedOutputE__.x____ <- speedOutputE
					| x____ <- TIDS
				]]
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP\MachineInternalEvents)
				,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				STM_core(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
					dbisim(
						sbisim(
								(STM(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral)
								[| union(WCsync,WCresets) |]
								Clocks(id__,
										    const_SpeedPID_S_P,
										    const_SpeedPID_S_I,
										    const_SpeedPID_S_maxIntegral))\WCresets
							  )
						  )
				
				AUX_opt(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = 
					prioritise(
						(MemorySTM_opt(id__,
								    const_SpeedPID_S_P,
								    const_SpeedPID_S_I,
								    const_SpeedPID_S_maxIntegral)
						)[[
							snewError__.x____ <- snewError,
							speedOutputE__.x____ <- speedOutputE
							| x____ <- TIDS
						]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
					,<Union({internal_events, ClockResets, {|terminate|}}),{tock}>)
				
				internal_(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = prioritise((((
					wbisim(STM(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral))
						[|MachineMemorySyncSet|]
					((MemoryN(id__,
						 const_SpeedPID_S_P,
						 const_SpeedPID_S_I,
						 const_SpeedPID_S_maxIntegral)) [| union(WCsets,WCsync) |] Clocks(id__,
							    const_SpeedPID_S_P,
							    const_SpeedPID_S_I,
							    const_SpeedPID_S_maxIntegral))\WCsets
				)
				\MachineMemoryHidingSet)
				[|{|terminate|}|>SKIP)
				,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)		
				-- declare clocks
				datatype ClockSet = dummyC
				channel clockReset 				-- no clocks declared
				
				-- declare trigger deadlines channel
				channel deadline : TIDS.Signal
				
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = Union({
					{
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{||}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{| | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				
				
				-- Clocks process
				Clocks(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = || (alpha, P) : WCset(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) @ [alpha] wbisim(P)

				-- collects all clockResets including those of operations
				ClockResets = Union({
					{|clockReset|}
									})
				
				-- With no internal events visible
				Dunopt__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = timed_priority(AUX(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) \ union(internal_events,ClockResets))
				
				D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = timed_priority(AUX_opt(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) \ union(internal_events,ClockResets))
				
				O__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = D__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral)
				
				-- With enter/entered/exit/exited events visible
				FVS__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = timed_priority(AUX(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) \ ClockResets)
				
				-- With enterV/enteredV/exitV/exitedV events visible
				VS__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = ShowV(timed_priority(AUX(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) \ ClockResets))
				
				-- With clock resets visible
				FVS_C__(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral) = AUX(id__,
						    const_SpeedPID_S_P,
						    const_SpeedPID_S_I,
						    const_SpeedPID_S_maxIntegral)
			}
		endmodule
