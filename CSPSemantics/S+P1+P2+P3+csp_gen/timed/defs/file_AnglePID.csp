



module OP_AnglePID
exports
	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	external prioritise
	transparent wbisim
	transparent dbisim
	transparent sbisim
	
	Timed(OneStep) {
		-- flow channels
		channel internal__ : TIDS
		channel enteredV, enterV, exitV, exitedV : SIDS
		channel enter, entered: SIDS.SIDS
		channel exit,exited: SIDS.SIDS
		channel terminate
		
		-- variable channels
		channel get_newError, set_newError: core_real
		channel get_diff, set_diff: core_real
		channel get_angleOutput, set_angleOutput: core_real
				
		-- shared variable channels
		channel set_EXT_angleOutput: core_real
		
		-- local variable channels for defined operations that are required by the state machine
		
		-- declaring state machine events
		
		-- declaring call and ret events for undefined operations
		
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machien module.
		
		
		-- definition of functions used to expose flow channels
		ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
						   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
						   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
						   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
							 
		ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
					[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_AnglePID
		              | SID_AnglePID_UpdateOutput
		              | SID_AnglePID_f0
		
		-- declaring identifiers of transitions
		datatype TIDS = NULLTRANSITION__
		              | TID_AnglePID_t0
		              | TID_AnglePID_t1
		
		-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
		
		ITIDS = {
			TID_AnglePID_t1
		}
		
		int_int = {|
			internal__.TID_AnglePID_t1
		|}
			
		
		internal_events = {|enter,entered,exit,exited|}
		shared_variable_events = {|
			set_EXT_angleOutput
		|}
				
		
		-- declaring all states
		CS_AnglePID_UpdateOutput_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0},
			y____ <- {SID_AnglePID_UpdateOutput}
		|}
		
		
		AnglePID_UpdateOutput_triggers = {|
			internal__.TID_AnglePID_t1
		|}
		
		State_AnglePID_UpdateOutput(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = let
			T_AnglePID_t1(id__,
					    const_AnglePID_P,
					    const_AnglePID_D) = internal__!TID_AnglePID_t1 ->  exit.SID_AnglePID_UpdateOutput.SID_AnglePID_UpdateOutput -> SKIP;
								SKIP;exited.SID_AnglePID_UpdateOutput.SID_AnglePID_UpdateOutput -> SKIP;
								enter!SID_AnglePID_UpdateOutput!SID_AnglePID_f0 -> entered!SID_AnglePID_UpdateOutput!SID_AnglePID_f0 ->
								State_AnglePID_UpdateOutput(id__,
										    const_AnglePID_P,
										    const_AnglePID_D)
			State_AnglePID_UpdateOutput_execute(id__,o____) = get_diff?diff -> get_newError?newError -> true & (set_angleOutput!Plus(Mult(newError, const_AnglePID_P, core_real), Mult(diff, const_AnglePID_D, core_real), core_real) -> SKIP); 
				entered!o____!SID_AnglePID_UpdateOutput ->
				(SKIP; STOP /\ (
					T_AnglePID_t1(id__,
							    const_AnglePID_P,
							    const_AnglePID_D)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_t1}) -> exit?y____:diff(SIDS,{SID_AnglePID_UpdateOutput})!SID_AnglePID_UpdateOutput -> (
							SKIP;
							exited!y____!SID_AnglePID_UpdateOutput -> SKIP);
							State_AnglePID_UpdateOutput(id__,
									    const_AnglePID_P,
									    const_AnglePID_D)
				))
		within
			enter?x____:diff(SIDS,{SID_AnglePID_UpdateOutput})!SID_AnglePID_UpdateOutput -> (State_AnglePID_UpdateOutput_execute(id__,x____))
		
		CS_AnglePID_f0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0},
			y____ <- {SID_AnglePID_f0}
		|}
		
		
		AnglePID_f0_triggers = {|
		|}
		
		State_AnglePID_f0(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = let
			State_AnglePID_f0_execute(id__,o____) = SKIP; 
				entered!o____!SID_AnglePID_f0 ->
				terminate -> SKIP
		within
			enter?x____:diff(SIDS,{SID_AnglePID_f0})!SID_AnglePID_f0 -> (State_AnglePID_f0_execute(id__,x____))
		
		
		I_AnglePID_i0(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = let
			T_AnglePID_t0(id__,
					    const_AnglePID_P,
					    const_AnglePID_D) = internal__!TID_AnglePID_t0 -> enter!SID_AnglePID!SID_AnglePID_UpdateOutput -> entered!SID_AnglePID!SID_AnglePID_UpdateOutput ->
			SKIP
		within
			T_AnglePID_t0(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
		
		
		State_AnglePID_UpdateOutput_R(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = 
			State_AnglePID_UpdateOutput(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
				[|diff(int_int,AnglePID_UpdateOutput_triggers)|]
			SKIP
				 		
		State_AnglePID_f0_R(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = 
			State_AnglePID_f0(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
				[|diff(int_int,AnglePID_f0_triggers)|]
			SKIP
				 		
			
		STM(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = (
			I_AnglePID_i0(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
				[|
					{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
						x____ <- diff(SIDS,{SID_AnglePID_UpdateOutput,SID_AnglePID_f0}),
						y____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0}
				|}|]
			(
				State_AnglePID_UpdateOutput_R(id__,
						    const_AnglePID_P,
						    const_AnglePID_D)
					[|inter(CS_AnglePID_UpdateOutput_sync,CS_AnglePID_f0_sync)|]
				State_AnglePID_f0_R(id__,
						    const_AnglePID_P,
						    const_AnglePID_D)
			)
		)
		
		-- optimized memory process
		channel getV_newError: core_real
		channel getV_diff: core_real
		channel getV_angleOutput: core_real
		
		-- individual memory processes
		Memory_newError(x__) = ( 
			get_newError!x__ -> Memory_newError(x__)
			[]
			getV_newError!x__ -> Memory_newError(x__)
			[]
			set_newError?x__ -> Memory_newError(x__)
		)
		Memory_diff(x__) = ( 
			get_diff!x__ -> Memory_diff(x__)
			[]
			getV_diff!x__ -> Memory_diff(x__)
			[]
			set_diff?x__ -> Memory_diff(x__)
		)
		Memory_angleOutput(x__) = ( 
			get_angleOutput!x__ -> Memory_angleOutput(x__)
			[]
			getV_angleOutput!x__ -> Memory_angleOutput(x__)
			[]
			set_angleOutput?x__ -> Memory_angleOutput(x__)
			[]
			set_EXT_angleOutput?x__ -> Memory_angleOutput(x__)
		)
		
		-- processes that read variables and offer transitions
		MemoryTransitions(id__,
			 newError,
			 diff,
			 angleOutput,
			 const_AnglePID_P,
			 const_AnglePID_D) = (
			internal__!TID_AnglePID_t0 -> SKIP
			[]
			internal__!TID_AnglePID_t1 -> SKIP
		
			[]
				set_newError?x__ -> SKIP
			[]
			set_diff?x__ -> SKIP
		 	)
		MemoryTransitions_AnglePID(id__,
			 const_AnglePID_P,
			 const_AnglePID_D) =
			(
			OP_AnglePID::getV_newError?newError ->	
			OP_AnglePID::getV_diff?diff ->	
			OP_AnglePID::getV_angleOutput?angleOutput ->
			 MemoryTransitions(id__,
			 	 newError,
			 	 diff,
			 	 angleOutput,
			 	 const_AnglePID_P,
			 	 const_AnglePID_D);
			 MemoryTransitions_AnglePID(id__,
			 	 const_AnglePID_P,
			 	 const_AnglePID_D)
			)
		
		-- synchronisation, hiding and process sets 
		MemoryVariablesProcesses_AnglePID = Union(
			{
				{
					Memory_newError(0),
					Memory_diff(0),
					Memory_angleOutput(0)
				}
			}
		)
		
		MemoryVariablesSyncSet = Union({
			{|
				set_angleOutput,
				set_newError,
				getV_diff,
				set_diff,
				setWC,
				getV_newError,
				set_EXT_angleOutput,
				getV_angleOutput
			|}	
		})
		
		MemoryVariablesHideSet = Union({
			{|
				getV_diff,
				getWC,
				getV_newError,
				getV_angleOutput
			|}
		})
		
		-- combined individual memory processes
		MemoryVariables = ||| P : MemoryVariablesProcesses_AnglePID @ P
		
		-- complete memory process
		MemoryN(id__,
			 const_AnglePID_P,
			 const_AnglePID_D) = (MemoryVariables [| MemoryVariablesSyncSet |] MemoryTransitions_AnglePID(id__,
			 const_AnglePID_P,
			 const_AnglePID_D)) \ MemoryVariablesHideSet
		
		-- optimised memory
		-- Sets of named elements identified according to transition conditions:
		-- {}
		-- Summary of all identified named elements:
		-- {
		-- OP_AnglePID::angleOutput
		-- OP_AnglePID::newError
		-- OP_AnglePID::diff
		-- }
		
		-- Allocation plan:
		-- 0:{}
		--	=> {
		--		TID_AnglePID_t0,
		--		TID_AnglePID_t1}
		
		-- Memory transition processes
		MemoryTransitions_opt_0(id__) =
		(
			let
				Update = Current(id__)
				Current(id__)
				 	   = 
				 	   internal__!TID_AnglePID_t0 -> Update
				 	   []
				 	   internal__!TID_AnglePID_t1 -> Update
			within
				Update
		)
		
		-- Memory cell processes
		Memory_opt_angleOutput(x__) = ( 
			get_angleOutput!x__ -> Memory_opt_angleOutput(x__)
			[]
			set_angleOutput?x__ -> Memory_opt_angleOutput(x__)
			[]
			set_EXT_angleOutput?x__ -> Memory_opt_angleOutput(x__)
		)
		Memory_opt_newError(x__) = ( 
			get_newError!x__ -> Memory_opt_newError(x__)
			[]
			set_newError?x__ -> Memory_opt_newError(x__)
		)
		Memory_opt_diff(x__) = ( 
			get_diff!x__ -> Memory_opt_diff(x__)
			[]
			set_diff?x__ -> Memory_opt_diff(x__)
		)
		
		-- Composition of memory, StateMachine and Memory transition processes
		
		MemorySTM_opt(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) =
			sbisim(	
			  dbisim(
			    sbisim(dbisim(sbisim(Memory_opt_angleOutput(0)
			          	[| {|set_angleOutput,get_angleOutput|} |] 
			          	dbisim(sbisim(Memory_opt_newError(0)
			          	      	[| {|set_newError,get_newError|} |] 
			          	      	dbisim(sbisim(Memory_opt_diff(0)
			          	      	      	[| {|get_diff,set_diff|} |] 
			          	      	      	STM_core(id__, newError, diff, const_AnglePID_D, const_AnglePID_P)
			          	      	      	)\ {|get_diff,set_diff|}
			          	      	      )
			          	      	)\ {|set_newError,get_newError|}
			          	      )
			          	)\ {|get_angleOutput|}
			          )
			      	  [| {|internal__.TID_AnglePID_t1,internal__.TID_AnglePID_t0|} |]
			      	  MemoryTransitions_opt_0(id__)
			      	  )\{|internal__.TID_AnglePID_t1,internal__.TID_AnglePID_t0|})
			      )
		
		-- main process
		
		MachineMemorySyncSet = Union({
			union(
				union(
					{|get_newError,set_newError,
					get_diff,set_diff|},
					{||}
				)
					
				,
				{|internal__.TID_AnglePID_t0,
				internal__.TID_AnglePID_t1|}
			),
			{|deadline|},
			WCresets
		})
		
		MachineMemoryHidingSet = Union({
			union(
				{|get_newError,set_newError,
				get_diff,set_diff|},
				{||}
			)
			,
			{|deadline|}
		})
		
		MachineInternalEvents = {|
			internal__
		|}
		
		-- main process
		AUX(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = prioritise((((
			wbisim(set_newError!newError -> set_diff!diff -> STM(id__,
					    const_AnglePID_P,
					    const_AnglePID_D))
				[|MachineMemorySyncSet|]
			(wbisim(MemoryN(id__,
				 const_AnglePID_P,
				 const_AnglePID_D)) [| union(WCsets,WCsync) |] Clocks(id__,
					    const_AnglePID_P,
					    const_AnglePID_D))\WCsets
		)
		\MachineMemoryHidingSet)
		[|{|terminate|}|>SKIP\MachineInternalEvents)
		,<Union({internal_events,ClockResets,{|terminate|}}),{tock}>)
		
		STM_core(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = 
			dbisim(
				sbisim((set_newError!newError -> set_diff!diff -> STM(id__,
						    const_AnglePID_P,
						    const_AnglePID_D))
			 			[| union(WCsync,WCresets) |]
			 			Clocks(id__,
			 					    const_AnglePID_P,
			 					    const_AnglePID_D)
			 		  )\WCresets
				  )
			
		AUX_opt(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = 
			(MemorySTM_opt(id__,
						newError,
						diff,
					    const_AnglePID_P,
					    const_AnglePID_D)
			)
			[|{|terminate|}|>SKIP\MachineInternalEvents
		
		internal_(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = prioritise((((
			wbisim(set_newError!newError -> set_diff!diff -> STM(id__,
					    const_AnglePID_P,
					    const_AnglePID_D))
				[|MachineMemorySyncSet|]
			(wbisim(MemoryN(id__,
				 const_AnglePID_P,
				 const_AnglePID_D)) [| union(WCsets,WCsync) |] Clocks(id__,
					    const_AnglePID_P,
					    const_AnglePID_D))\WCsets
		)
		\MachineMemoryHidingSet)
		[|{|terminate|}|>SKIP)
		,<Union({internal_events,ClockResets,{|internal__,terminate|}}),{tock}>)		
				
		-- declare clocks
		datatype ClockSet = dummyC
		channel clockReset 		-- no clocks declared
		
		-- declare trigger deadlines channel
		channel deadline : TIDS.Signal
		
		-- compile clocks process
		
		-- set of strings that uniquely identify the waiting conditions, each of which is 
		-- used to synchronise with the Memory process to set the correspoding variable in
		-- the memory process.
		datatype setWC_identifierSet = dummyWC
		
		-- declaring getWC and setWC channel for updating memory variables related to clocks
		channel setWC : setWC_identifierSet.Bool
		channel getWC : setWC_identifierSet.Bool
		
		-- Set of pairs capturing waiting condition processes and their alphabet.
		-- It includes the corresponding set of the defined operations.
		WCset(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = Union({
			{
			}
			})
		
		-- Auxiliary function to rename the channel set for required clocks.
		
		-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
		-- It includes the corresponding set of the defined operations.
		WCsync = Union({
			{||}
			})
		-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
		-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
		WCresets = Union({
			{| | x <- SIDS |}
			})
		-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
		WCsets = Union({
			{|setWC|}
			})
		
		
		
		-- Clocks process
		Clocks(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = || (alpha, P) : WCset(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) @ [alpha] wbisim(P)
		-- collects all clockResets
		ClockResets = {|clockReset|}
		
		-- With no internal events visible
		
		-- Original D__ process using the unoptimised memory process
		Dunopt__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = timed_priority(AUX(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) \ Union({internal_events,ClockResets,{|terminate|}}))
		
		D__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = timed_priority(AUX_opt(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) \ Union({internal_events,ClockResets,{|terminate|}}))
		
		O__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = D__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D)
		
		-- With enter/entered/exit/exited events visible
		FVS__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = timed_priority(AUX_opt(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) \ union(ClockResets,{|terminate|}))
		
		-- With enterV/enteredV/exitV/exitedV events visible
		VS__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = ShowV(timed_priority(AUX_opt(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) \ union(ClockResets,{|terminate|})))
		
		-- With clock resets visible
		FVS_C__(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D) = AUX_opt(id__,
					newError,
					diff,
				    const_AnglePID_P,
				    const_AnglePID_D)\{|terminate|}
	}
endmodule

