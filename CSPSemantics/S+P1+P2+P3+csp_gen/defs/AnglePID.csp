module OP_AnglePID
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_AnglePID
	              | SID_AnglePID_UpdateOutput
	              | SID_AnglePID_f0
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_AnglePID_t0
	              | TID_AnglePID_t1
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_AnglePID_t1
	}
	
	int_int = {|
		internal__.TID_AnglePID_t1
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	shared_variable_events = {|
		set_EXT_angleOutput
	|}
			
	
	-- declaring all states
	CS_AnglePID_UpdateOutput_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0},
		y____ <- {SID_AnglePID_UpdateOutput}
	|}
	
	
	AnglePID_UpdateOutput_triggers = {|
		internal__.TID_AnglePID_t1
	|}
	
	State_AnglePID_UpdateOutput(id__,
			    const_AnglePID_P,
			    const_AnglePID_D) = let
		T_AnglePID_t1(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = internal__!TID_AnglePID_t1 ->  exit.SID_AnglePID_UpdateOutput.SID_AnglePID_UpdateOutput -> SKIP;
							SKIP;exited.SID_AnglePID_UpdateOutput.SID_AnglePID_UpdateOutput -> SKIP;
							enter!SID_AnglePID_UpdateOutput!SID_AnglePID_f0 -> entered!SID_AnglePID_UpdateOutput!SID_AnglePID_f0 ->
							State_AnglePID_UpdateOutput(id__,
									    const_AnglePID_P,
									    const_AnglePID_D)
		State_AnglePID_UpdateOutput_execute(id__,o____) = get_diff?diff -> get_newError?newError -> true & (set_angleOutput!Plus(Mult(newError, const_AnglePID_P, core_real), Mult(diff, const_AnglePID_D, core_real), core_real) -> SKIP); 
			entered!o____!SID_AnglePID_UpdateOutput ->
			(SKIP; STOP /\ (
				T_AnglePID_t1(id__,
						    const_AnglePID_P,
						    const_AnglePID_D)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_t1}) -> exit?y____:diff(SIDS,{SID_AnglePID_UpdateOutput})!SID_AnglePID_UpdateOutput -> (
						SKIP;
						exited!y____!SID_AnglePID_UpdateOutput -> SKIP);
						State_AnglePID_UpdateOutput(id__,
								    const_AnglePID_P,
								    const_AnglePID_D)
			))
	within
		enter?x____:diff(SIDS,{SID_AnglePID_UpdateOutput})!SID_AnglePID_UpdateOutput -> (State_AnglePID_UpdateOutput_execute(id__,x____))
	
	CS_AnglePID_f0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0},
		y____ <- {SID_AnglePID_f0}
	|}
	
	
	AnglePID_f0_triggers = {|
	|}
	
	State_AnglePID_f0(id__,
			    const_AnglePID_P,
			    const_AnglePID_D) = let
		State_AnglePID_f0_execute(id__,o____) = SKIP; 
			entered!o____!SID_AnglePID_f0 ->
			terminate -> SKIP
	within
		enter?x____:diff(SIDS,{SID_AnglePID_f0})!SID_AnglePID_f0 -> (State_AnglePID_f0_execute(id__,x____))
	
	
	I_AnglePID_i0(id__,
			    const_AnglePID_P,
			    const_AnglePID_D) = let
		T_AnglePID_t0(id__,
				    const_AnglePID_P,
				    const_AnglePID_D) = internal__!TID_AnglePID_t0 -> enter!SID_AnglePID!SID_AnglePID_UpdateOutput -> entered!SID_AnglePID!SID_AnglePID_UpdateOutput ->
		SKIP
	within
		T_AnglePID_t0(id__,
				    const_AnglePID_P,
				    const_AnglePID_D)
	
	
	State_AnglePID_UpdateOutput_R(id__,
			    const_AnglePID_P,
			    const_AnglePID_D) = 
		State_AnglePID_UpdateOutput(id__,
				    const_AnglePID_P,
				    const_AnglePID_D)
			[|diff(int_int,AnglePID_UpdateOutput_triggers)|]
		SKIP
			 		
	State_AnglePID_f0_R(id__,
			    const_AnglePID_P,
			    const_AnglePID_D) = 
		State_AnglePID_f0(id__,
				    const_AnglePID_P,
				    const_AnglePID_D)
			[|diff(int_int,AnglePID_f0_triggers)|]
		SKIP
			 		
		
	STM(id__,
			    const_AnglePID_P,
			    const_AnglePID_D) = (
		I_AnglePID_i0(id__,
				    const_AnglePID_P,
				    const_AnglePID_D)
			[|
				{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
					x____ <- diff(SIDS,{SID_AnglePID_UpdateOutput,SID_AnglePID_f0}),
					y____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0}
			|}|]
		(
			State_AnglePID_UpdateOutput_R(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
				[|inter(CS_AnglePID_UpdateOutput_sync,CS_AnglePID_f0_sync)|]
			State_AnglePID_f0_R(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
		)
	)
	
	-- optimized memory process
	channel getV_newError: core_real
	channel getV_diff: core_real
	channel getV_angleOutput: core_real
	
	-- individual memory processes
	Memory_newError(newError) = (
		get_newError!newError -> Memory_newError(newError)
		[]
		getV_newError!newError -> Memory_newError(newError)
		[]
		set_newError?x__ -> Memory_newError(x__)
	)
	Memory_diff(diff) = (
		get_diff!diff -> Memory_diff(diff)
		[]
		getV_diff!diff -> Memory_diff(diff)
		[]
		set_diff?x__ -> Memory_diff(x__)
	)
	Memory_angleOutput(angleOutput) = (
		get_angleOutput!angleOutput -> Memory_angleOutput(angleOutput)
		[]
		getV_angleOutput!angleOutput -> Memory_angleOutput(angleOutput)
		[]
		set_angleOutput?x__ -> Memory_angleOutput(x__)
		[]
		set_EXT_angleOutput?x__ -> Memory_angleOutput(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__, newError, diff, angleOutput,
			    const_AnglePID_P,
			    const_AnglePID_D) = 		
	(internal__!TID_AnglePID_t0 -> SKIP
	[]
	internal__!TID_AnglePID_t1 -> SKIP[]
	set_newError?x__ -> SKIP[]
	set_diff?x__ -> SKIP[]
	set_angleOutput?x__ -> SKIP[]
	set_EXT_angleOutput?x__ -> SKIP)
	
	MemoryTransitions_AnglePID(id__, const_AnglePID_P, const_AnglePID_D) = (getV_newError?newError ->
	getV_diff?diff ->
	getV_angleOutput?angleOutput ->
	MemoryTransitions(id__, newError, diff, angleOutput,
			    const_AnglePID_P,
			    const_AnglePID_D); MemoryTransitions_AnglePID(id__, const_AnglePID_P, const_AnglePID_D))			
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_AnglePID = Union(
		{
			{
				(Memory_newError(0),{|get_newError,set_newError,getV_newError|}),
				(Memory_diff(0),{|get_diff,getV_diff,set_diff|}),
				(Memory_angleOutput(0),{|set_angleOutput,get_angleOutput,set_EXT_angleOutput,getV_angleOutput|})
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			set_angleOutput,
			set_newError,
			getV_diff,
			set_diff,
			getV_newError,
			set_EXT_angleOutput,
			getV_angleOutput
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_diff,
			getV_newError,
			getV_angleOutput
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_AnglePID @ P
	
	-- complete memory process	
	MemoryN(id__, const_AnglePID_P, const_AnglePID_D) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_AnglePID(id__, const_AnglePID_P, const_AnglePID_D)))) \ MemoryVariablesHideSet))
	
	-- optimised memory
	-- Sets of named elements identified according to transition conditions:
	-- {}
	-- Summary of all identified named elements:
	-- {
	-- OP_AnglePID::angleOutput
	-- OP_AnglePID::newError
	-- OP_AnglePID::diff
	-- }
	
	-- Allocation plan:
	-- 0:{}
	--	=> {
	--		TID_AnglePID_t1,
	--		TID_AnglePID_t0}
	
	-- Memory transition processes
	MemoryTransitions_opt_0(id__) =
	(
		let
			Update = Current(id__)
			Current(id__)
			 	   = 
			 	   internal__!TID_AnglePID_t1 -> Update
			 	   []
			 	   internal__!TID_AnglePID_t0 -> Update
		within
			Update
	)
	
	-- Memory cell processes
	Memory_opt_angleOutput(x__) = ( 
		get_angleOutput!x__ -> Memory_opt_angleOutput(x__)
		[]
		set_angleOutput?x__ -> Memory_opt_angleOutput(x__)
		[]
		set_EXT_angleOutput?x__ -> Memory_opt_angleOutput(x__)
	)
	Memory_opt_newError(x__) = ( 
		get_newError!x__ -> Memory_opt_newError(x__)
		[]
		set_newError?x__ -> Memory_opt_newError(x__)
	)
	Memory_opt_diff(x__) = ( 
		get_diff!x__ -> Memory_opt_diff(x__)
		[]
		set_diff?x__ -> Memory_opt_diff(x__)
	)
	
	-- Composition of memory, StateMachine and Memory transition processes
	
	MemorySTM_opt(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) =
		sbisim(	
		  dbisim(
		    sbisim(dbisim(sbisim(Memory_opt_angleOutput(0)
		          	[| {|set_angleOutput,get_angleOutput|} |] 
		          	dbisim(sbisim(Memory_opt_newError(0)
		          	      	[| {|set_newError,get_newError|} |] 
		          	      	dbisim(sbisim(Memory_opt_diff(0)
		          	      	      	[| {|get_diff,set_diff|} |] 
		          	      	      	STM_core(id__, newError, diff, const_AnglePID_D, const_AnglePID_P)
		          	      	      	)\ {|get_diff,set_diff|}
		          	      	      )
		          	      	)\ {|set_newError,get_newError|}
		          	      )
		          	)\ {|get_angleOutput|}
		          )
		      	  [| {|internal__.TID_AnglePID_t1,internal__.TID_AnglePID_t0|} |]
		      	  MemoryTransitions_opt_0(id__)
		      	  )\{|internal__.TID_AnglePID_t1,internal__.TID_AnglePID_t0|})
		      )
	
	-- main process
	
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_newError,set_newError,
				get_diff,set_diff|},
				{||}
			)
				
			,
			{|internal__.TID_AnglePID_t0,
			internal__.TID_AnglePID_t1|}
		)
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_newError,set_newError,
			get_diff,set_diff|},
			{||}
		)
	})
	
	MachineInternalEvents = {|
		internal__
	|}
	AUX(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = (
		(
			set_newError!newError -> set_diff!diff -> STM(id__,
					    const_AnglePID_P,
					    const_AnglePID_D)
				[|MachineMemorySyncSet|]
			sbisim(diamond(MemoryN(id__, const_AnglePID_P, const_AnglePID_D)))
		)
		\MachineMemoryHidingSet
	)
	[|{|terminate|}|>SKIP\MachineInternalEvents	
	
	STM_core(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = 
		(set_newError!newError -> set_diff!diff -> STM(id__,
				    const_AnglePID_P,
				    const_AnglePID_D)
		)
		
	AUX_opt(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = 
		(MemorySTM_opt(id__, newError, diff, const_AnglePID_D, const_AnglePID_P)
		)
		[|{|terminate|}|>SKIP\MachineInternalEvents	
	
exports
	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	channel terminate
	
	-- variable channels
	channel get_newError, set_newError: core_real
	channel get_diff, set_diff: core_real
	channel get_angleOutput, set_angleOutput: core_real
			
	-- shared variable channels
	channel set_EXT_angleOutput: core_real
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	
	-- declaring call and ret events for undefined operations
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = AUX_opt(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) \ {|terminate|}
	
	-- original process using the unoptimised memory model
	Dunopt__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = (AUX(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) \ internal_events) \ {|terminate|}
	
	D__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = (AUX_opt(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) \ internal_events) \ {|terminate|}
	
	O__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = sbisim(diamond(D__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P)))
	VS__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = ShowV(FVS__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P))
	VS_O__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P) = sbisim(diamond(VS__(id__, newError, diff, const_AnglePID_D, const_AnglePID_P)))
endmodule
