module Segway			
	exports
	
	transparent diamond
	transparent sbisim
	transparent chase			
	
	-- declaring channels
	-- declaring robotic platform events
	channel leftMotorVelocity: InOut.core_real
	channel rightMotorVelocity: InOut.core_real
	channel angle: InOut.core_real
	channel gyroX: InOut.core_real
	channel gyroY: InOut.core_real
	channel gyroZ: InOut.core_real
	
	channel setLeftMotorSpeedCall: core_real
	channel setRightMotorSpeedCall: core_real
	channel enableInterruptsCall
	channel disableInterruptsCall
	
	-- declaring module termination channel
	channel terminate
				
	-- declaring robotic platform variables
	
	-- declaring controller
		module SegwayController
			shared_variable_events = {|
			|}		
			
		exports
			transparent diamond
			transparent sbisim
			transparent chase
	
		
			-- declaring call and ret events for undefined operations
			channel setLeftMotorSpeedCall: core_real
			channel setRightMotorSpeedCall: core_real
			channel disableInterruptsCall
			channel enableInterruptsCall
		
			CALL__setLeftMotorSpeed(id__,
					    speed) =  setLeftMotorSpeedCall.speed -> SKIP
			
			CALL__setRightMotorSpeed(id__,
					    speed) =  setRightMotorSpeedCall.speed -> SKIP
			
			CALL__disableInterrupts(id__) =  disableInterruptsCall -> SKIP
			
			CALL__enableInterrupts(id__) =  enableInterruptsCall -> SKIP
			
		
			module OP_AnglePID
						
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_AnglePID
				              | SID_AnglePID_UpdateOutput
				              | SID_AnglePID_f0
				
				int_int = {|
					internal__.TID_AnglePID_t1
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_AnglePID_UpdateOutput_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0},
					y____ <- {SID_AnglePID_UpdateOutput}
				|}
				
				
				AnglePID_UpdateOutput_triggers = {|
					internal__.TID_AnglePID_t1
				|}
				
				State_AnglePID_UpdateOutput(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_AnglePID_t1(id__,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_AnglePID_t1 ->  exit.SID_AnglePID_UpdateOutput.SID_AnglePID_UpdateOutput -> SKIP;
										SKIP;exited.SID_AnglePID_UpdateOutput.SID_AnglePID_UpdateOutput -> SKIP;
										enter!SID_AnglePID_UpdateOutput!SID_AnglePID_f0 -> entered!SID_AnglePID_UpdateOutput!SID_AnglePID_f0 ->
										State_AnglePID_UpdateOutput(id__,
												    const_AnglePID_P,
												    const_AnglePID_D)
					State_AnglePID_UpdateOutput_execute(id__,o____) = get_diff?diff -> get_newError?newError -> true & (set_angleOutput!Plus(Mult(newError, const_AnglePID_P, core_real), Mult(diff, const_AnglePID_D, core_real), core_real) -> SKIP); 
						entered!o____!SID_AnglePID_UpdateOutput ->
						(SKIP; STOP /\ (
							T_AnglePID_t1(id__,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_AnglePID_t1}) -> exit?y____:diff(SIDS,{SID_AnglePID_UpdateOutput})!SID_AnglePID_UpdateOutput -> (
									SKIP;
									exited!y____!SID_AnglePID_UpdateOutput -> SKIP);
									State_AnglePID_UpdateOutput(id__,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_AnglePID_UpdateOutput})!SID_AnglePID_UpdateOutput -> (State_AnglePID_UpdateOutput_execute(id__,x____))
				
				CS_AnglePID_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0},
					y____ <- {SID_AnglePID_f0}
				|}
				
				
				AnglePID_f0_triggers = {|
				|}
				
				State_AnglePID_f0(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					State_AnglePID_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_AnglePID_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_AnglePID_f0})!SID_AnglePID_f0 -> (State_AnglePID_f0_execute(id__,x____))
				
				
				I_AnglePID_i0(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_AnglePID_t0(id__,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_AnglePID_t0 -> enter!SID_AnglePID!SID_AnglePID_UpdateOutput -> entered!SID_AnglePID!SID_AnglePID_UpdateOutput ->
					SKIP
				within
					T_AnglePID_t0(id__,
							    const_AnglePID_P,
							    const_AnglePID_D)
				
				
				State_AnglePID_UpdateOutput_R(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_AnglePID_UpdateOutput(id__,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,AnglePID_UpdateOutput_triggers)|]
					SKIP
						 		
				State_AnglePID_f0_R(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_AnglePID_f0(id__,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,AnglePID_f0_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = (
					I_AnglePID_i0(id__,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_AnglePID_UpdateOutput,SID_AnglePID_f0}),
								y____ <- {SID_AnglePID_UpdateOutput,SID_AnglePID_f0}
						|}|]
					(
						State_AnglePID_UpdateOutput_R(id__,
								    const_AnglePID_P,
								    const_AnglePID_D)
							[|inter(CS_AnglePID_UpdateOutput_sync,CS_AnglePID_f0_sync)|]
						State_AnglePID_f0_R(id__,
								    const_AnglePID_P,
								    const_AnglePID_D)
					)
				)
				
				-- main process
				AUX(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = STM(id__,
						    const_AnglePID_P,
						    const_AnglePID_D)[|{|terminate|}|>SKIP	
				
			exports
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_AnglePID_t0
				              | TID_AnglePID_t1
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_AnglePID_t1
				}
				
				MemoryTransitions(id__, newError, diff, angleOutput,
						    const_AnglePID_P,
						    const_AnglePID_D) =
				(internal__!TID_AnglePID_t0 -> SKIP
				[]
				internal__!TID_AnglePID_t1 -> SKIP
				[]
				set_newError?x__ -> SKIP
				[]
				set_diff?x__ -> SKIP)
				Memory_newError(newError) = (
					get_newError!newError -> Memory_newError(newError)
					[]
					getV_newError!newError -> Memory_newError(newError)
					[]
					set_newError?x__ -> Memory_newError(x__)
				)
				Memory_diff(diff) = (
					get_diff!diff -> Memory_diff(diff)
					[]
					getV_diff!diff -> Memory_diff(diff)
					[]
					set_diff?x__ -> Memory_diff(x__)
				)
				Memory_angleOutput(angleOutput) = (
					get_angleOutput!angleOutput -> Memory_angleOutput(angleOutput)
					[]
					getV_angleOutput!angleOutput -> Memory_angleOutput(angleOutput)
					[]
					set_angleOutput?x__ -> Memory_angleOutput(x__)
					[]
					set_EXT_angleOutput?x__ -> Memory_angleOutput(x__)
				)
				
				MemoryVariablesProcesses_AnglePID = {(Memory_newError(0),{|get_newError,set_newError,getV_newError|}),
				(Memory_diff(0),{|get_diff,getV_diff,set_diff|})}
						
				MemoryVariablesSyncSet = {|set_newError,
				getV_diff,
				set_diff,
				getV_newError|}
				
				MemoryVariablesHideSet = {|getV_diff,
				getV_newError|}
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_newError,set_newError,
							get_diff,set_diff|},
							{||}
						)
							
						,
						{|internal__.TID_AnglePID_t0,
						internal__.TID_AnglePID_t1|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_newError,set_newError,
						get_diff,set_diff|},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				-- Memory cell processes
				Memory_opt_angleOutput(x__) = ( 
					get_angleOutput!x__ -> Memory_opt_angleOutput(x__)
					[]
					set_angleOutput?x__ -> Memory_opt_angleOutput(x__)
					[]
					set_EXT_angleOutput?x__ -> Memory_opt_angleOutput(x__)
				)
				Memory_opt_newError(x__) = ( 
					get_newError!x__ -> Memory_opt_newError(x__)
					[]
					set_newError?x__ -> Memory_opt_newError(x__)
				)
				Memory_opt_diff(x__) = ( 
					get_diff!x__ -> Memory_opt_diff(x__)
					[]
					set_diff?x__ -> Memory_opt_diff(x__)
				)
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_newError, set_newError, getV_newError: core_real
				channel get_diff, set_diff, getV_diff: core_real
				channel get_angleOutput, set_angleOutput, getV_angleOutput: core_real
						
				-- shared variable channels
				channel set_EXT_angleOutput: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = AUX(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) \ internal_events
				O__(id__,
						    const_AnglePID_P,
						    const_AnglePID_D) = sbisim(diamond(D__(id__,
						    const_AnglePID_P,
						    const_AnglePID_D)))
			endmodule
			module OP_SpeedPID
						
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_SpeedPID
				              | SID_SpeedPID_UpdateIntegral
				              | SID_SpeedPID_UpdateOutput
				              | SID_SpeedPID_f0
				
				int_int = {|
					internal__.TID_SpeedPID_t1,
					internal__.TID_SpeedPID_t2
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_SpeedPID_UpdateIntegral_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SpeedPID_UpdateIntegral,SID_SpeedPID_UpdateOutput,SID_SpeedPID_f0},
					y____ <- {SID_SpeedPID_UpdateIntegral}
				|}
				
				
				SpeedPID_UpdateIntegral_triggers = {|
					internal__.TID_SpeedPID_t1,
					internal__.TID_SpeedPID_t2
				|}
				
				State_SpeedPID_UpdateIntegral(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = let
					T_SpeedPID_t1(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral) = internal__!TID_SpeedPID_t1 ->  exit.SID_SpeedPID_UpdateIntegral.SID_SpeedPID_UpdateIntegral -> SKIP;
										SKIP;exited.SID_SpeedPID_UpdateIntegral.SID_SpeedPID_UpdateIntegral -> SKIP;
										enter!SID_SpeedPID_UpdateIntegral!SID_SpeedPID_UpdateOutput -> entered!SID_SpeedPID_UpdateIntegral!SID_SpeedPID_UpdateOutput ->
										State_SpeedPID_UpdateIntegral(id__,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral)
					State_SpeedPID_UpdateIntegral_execute(id__,o____) = get_speedIntegral?speedIntegral -> get_newError?newError -> true & (set_speedIntegral!Plus(speedIntegral, newError, core_real) -> SKIP);get_speedIntegral?speedIntegral -> true & (set_speedIntegral!(if (speedIntegral>const_SpeedPID_maxIntegral) then const_SpeedPID_maxIntegral else (if (speedIntegral<Neg(const_SpeedPID_maxIntegral, core_int)) then Neg(const_SpeedPID_maxIntegral, core_int) else speedIntegral)) -> SKIP); 
						entered!o____!SID_SpeedPID_UpdateIntegral ->
						(SKIP; STOP /\ (
							T_SpeedPID_t1(id__,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_t1,TID_SpeedPID_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_UpdateIntegral})!SID_SpeedPID_UpdateIntegral -> (
									SKIP;
									exited!y____!SID_SpeedPID_UpdateIntegral -> SKIP);
									State_SpeedPID_UpdateIntegral(id__,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral)
						))
				within
					enter?x____:diff(SIDS,{SID_SpeedPID_UpdateIntegral})!SID_SpeedPID_UpdateIntegral -> (State_SpeedPID_UpdateIntegral_execute(id__,x____))
				
				CS_SpeedPID_UpdateOutput_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SpeedPID_UpdateIntegral,SID_SpeedPID_UpdateOutput,SID_SpeedPID_f0},
					y____ <- {SID_SpeedPID_UpdateOutput}
				|}
				
				
				SpeedPID_UpdateOutput_triggers = {|
					internal__.TID_SpeedPID_t2
				|}
				
				State_SpeedPID_UpdateOutput(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = let
					T_SpeedPID_t2(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral) = internal__!TID_SpeedPID_t2 ->  exit.SID_SpeedPID_UpdateOutput.SID_SpeedPID_UpdateOutput -> SKIP;
										SKIP;exited.SID_SpeedPID_UpdateOutput.SID_SpeedPID_UpdateOutput -> SKIP;
										enter!SID_SpeedPID_UpdateOutput!SID_SpeedPID_f0 -> entered!SID_SpeedPID_UpdateOutput!SID_SpeedPID_f0 ->
										State_SpeedPID_UpdateOutput(id__,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral)
					State_SpeedPID_UpdateOutput_execute(id__,o____) = get_newError?newError -> get_speedIntegral?speedIntegral -> true & (set_speedOutput!Plus(Mult(newError, const_SpeedPID_P, core_real), Mult(speedIntegral, const_SpeedPID_I, core_real), core_real) -> SKIP); 
						entered!o____!SID_SpeedPID_UpdateOutput ->
						(SKIP; STOP /\ (
							T_SpeedPID_t2(id__,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_SpeedPID_t2}) -> exit?y____:diff(SIDS,{SID_SpeedPID_UpdateOutput})!SID_SpeedPID_UpdateOutput -> (
									SKIP;
									exited!y____!SID_SpeedPID_UpdateOutput -> SKIP);
									State_SpeedPID_UpdateOutput(id__,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral)
						))
				within
					enter?x____:diff(SIDS,{SID_SpeedPID_UpdateOutput})!SID_SpeedPID_UpdateOutput -> (State_SpeedPID_UpdateOutput_execute(id__,x____))
				
				CS_SpeedPID_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_SpeedPID_UpdateIntegral,SID_SpeedPID_UpdateOutput,SID_SpeedPID_f0},
					y____ <- {SID_SpeedPID_f0}
				|}
				
				
				SpeedPID_f0_triggers = {|
				|}
				
				State_SpeedPID_f0(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = let
					State_SpeedPID_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_SpeedPID_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_SpeedPID_f0})!SID_SpeedPID_f0 -> (State_SpeedPID_f0_execute(id__,x____))
				
				
				I_SpeedPID_i0(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = let
					T_SpeedPID_t0(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral) = internal__!TID_SpeedPID_t0 -> enter!SID_SpeedPID!SID_SpeedPID_UpdateIntegral -> entered!SID_SpeedPID!SID_SpeedPID_UpdateIntegral ->
					SKIP
				within
					T_SpeedPID_t0(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral)
				
				
				State_SpeedPID_UpdateIntegral_R(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = 
					State_SpeedPID_UpdateIntegral(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral)
						[|diff(int_int,SpeedPID_UpdateIntegral_triggers)|]
					SKIP
						 		
				State_SpeedPID_UpdateOutput_R(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = 
					State_SpeedPID_UpdateOutput(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral)
						[|diff(int_int,SpeedPID_UpdateOutput_triggers)|]
					SKIP
						 		
				State_SpeedPID_f0_R(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = 
					State_SpeedPID_f0(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral)
						[|diff(int_int,SpeedPID_f0_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = (
					I_SpeedPID_i0(id__,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_SpeedPID_UpdateIntegral,SID_SpeedPID_UpdateOutput,SID_SpeedPID_f0}),
								y____ <- {SID_SpeedPID_UpdateIntegral,SID_SpeedPID_UpdateOutput,SID_SpeedPID_f0}
						|}|]
					(
						State_SpeedPID_UpdateIntegral_R(id__,
								    const_SpeedPID_P,
								    const_SpeedPID_I,
								    const_SpeedPID_maxIntegral)
							[|inter(CS_SpeedPID_UpdateIntegral_sync,union(CS_SpeedPID_UpdateOutput_sync,CS_SpeedPID_f0_sync))|]
						(
							State_SpeedPID_UpdateOutput_R(id__,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral)
								[|inter(CS_SpeedPID_UpdateOutput_sync,CS_SpeedPID_f0_sync)|]
							State_SpeedPID_f0_R(id__,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral)
						)
					)
				)
				
				-- main process
				AUX(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = STM(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral)[|{|terminate|}|>SKIP	
				
			exports
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_SpeedPID_t0
				              | TID_SpeedPID_t1
				              | TID_SpeedPID_t2
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_SpeedPID_t1,	TID_SpeedPID_t2
				}
				
				MemoryTransitions(id__, newError, speedIntegral, speedOutput,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) =
				(internal__!TID_SpeedPID_t0 -> SKIP
				[]
				internal__!TID_SpeedPID_t1 -> SKIP
				[]
				internal__!TID_SpeedPID_t2 -> SKIP
				[]
				set_newError?x__ -> SKIP)
				Memory_newError(newError) = (
					get_newError!newError -> Memory_newError(newError)
					[]
					getV_newError!newError -> Memory_newError(newError)
					[]
					set_newError?x__ -> Memory_newError(x__)
				)
				Memory_speedIntegral(speedIntegral) = (
					get_speedIntegral!speedIntegral -> Memory_speedIntegral(speedIntegral)
					[]
					getV_speedIntegral!speedIntegral -> Memory_speedIntegral(speedIntegral)
					[]
					set_speedIntegral?x__ -> Memory_speedIntegral(x__)
					[]
					set_EXT_speedIntegral?x__ -> Memory_speedIntegral(x__)
				)
				Memory_speedOutput(speedOutput) = (
					get_speedOutput!speedOutput -> Memory_speedOutput(speedOutput)
					[]
					getV_speedOutput!speedOutput -> Memory_speedOutput(speedOutput)
					[]
					set_speedOutput?x__ -> Memory_speedOutput(x__)
					[]
					set_EXT_speedOutput?x__ -> Memory_speedOutput(x__)
				)
				
				MemoryVariablesProcesses_SpeedPID = {(Memory_newError(0),{|get_newError,set_newError,getV_newError|})}
						
				MemoryVariablesSyncSet = {|set_newError,
				getV_newError|}
				
				MemoryVariablesHideSet = {|getV_newError|}
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_newError,set_newError|},
							{||}
						)
							
						,
						{|internal__.TID_SpeedPID_t0,
						internal__.TID_SpeedPID_t1,
						internal__.TID_SpeedPID_t2|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_newError,set_newError|},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				-- Memory cell processes
				Memory_opt_newError(x__) = ( 
					get_newError!x__ -> Memory_opt_newError(x__)
					[]
					set_newError?x__ -> Memory_opt_newError(x__)
				)
				Memory_opt_speedOutput(x__) = ( 
					get_speedOutput!x__ -> Memory_opt_speedOutput(x__)
					[]
					set_speedOutput?x__ -> Memory_opt_speedOutput(x__)
					[]
					set_EXT_speedOutput?x__ -> Memory_opt_speedOutput(x__)
				)
				Memory_opt_speedIntegral(x__) = ( 
					get_speedIntegral!x__ -> Memory_opt_speedIntegral(x__)
					[]
					set_speedIntegral?x__ -> Memory_opt_speedIntegral(x__)
					[]
					set_EXT_speedIntegral?x__ -> Memory_opt_speedIntegral(x__)
				)
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_newError, set_newError, getV_newError: core_real
				channel get_speedIntegral, set_speedIntegral, getV_speedIntegral: core_real
				channel get_speedOutput, set_speedOutput, getV_speedOutput: core_real
						
				-- shared variable channels
				channel set_EXT_speedIntegral: core_real
				channel set_EXT_speedOutput: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = AUX(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) \ internal_events
				O__(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = sbisim(diamond(D__(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral)))
			endmodule
			module OP_RotationPID
						
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_RotationPID
				              | SID_RotationPID_f0
				
				int_int = {|
				|}
					
				
				internal_events = {|enter,entered,exit,exited,terminate|}
				
				-- declaring all states
				CS_RotationPID_f0_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_RotationPID_f0},
					y____ <- {SID_RotationPID_f0}
				|}
				
				
				RotationPID_f0_triggers = {|
				|}
				
				State_RotationPID_f0(id__,
						    const_RotationPID_D) = let
					State_RotationPID_f0_execute(id__,o____) = SKIP; 
						entered!o____!SID_RotationPID_f0 ->
						terminate -> SKIP
				within
					enter?x____:diff(SIDS,{SID_RotationPID_f0})!SID_RotationPID_f0 -> (State_RotationPID_f0_execute(id__,x____))
				
				
				I_RotationPID_i0(id__,
						    const_RotationPID_D) = let
					T_RotationPID_t0(id__,
							    const_RotationPID_D) = internal__!TID_RotationPID_t0 -> get_diff?diff -> true & (set_rotationOutput!Mult(const_RotationPID_D, diff, core_real) -> SKIP);enter!SID_RotationPID!SID_RotationPID_f0 -> entered!SID_RotationPID!SID_RotationPID_f0 ->
					SKIP
				within
					T_RotationPID_t0(id__,
							    const_RotationPID_D)
				
				
				State_RotationPID_f0_R(id__,
						    const_RotationPID_D) = 
					State_RotationPID_f0(id__,
							    const_RotationPID_D)
						[|diff(int_int,RotationPID_f0_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_RotationPID_D) = (
					I_RotationPID_i0(id__,
							    const_RotationPID_D)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_RotationPID_f0}),
								y____ <- {SID_RotationPID_f0}
						|}|]
					State_RotationPID_f0_R(id__,
							    const_RotationPID_D)
				)
				
				-- main process
				AUX(id__,
						    const_RotationPID_D) = STM(id__,
						    const_RotationPID_D)[|{|terminate|}|>SKIP	
				
			exports
				-- the transition identifiers and memory transitions of an operation definition
				-- are exported here to allow for the renaming of the state machine to include
				-- the renaming of the events of the operation
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_RotationPID_t0
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
				}
				
				MemoryTransitions(id__, diff, rotationOutput,
						    const_RotationPID_D) =
				(internal__!TID_RotationPID_t0 -> SKIP
				[]
				set_diff?x__ -> SKIP)
				Memory_diff(diff) = (
					get_diff!diff -> Memory_diff(diff)
					[]
					getV_diff!diff -> Memory_diff(diff)
					[]
					set_diff?x__ -> Memory_diff(x__)
				)
				Memory_rotationOutput(rotationOutput) = (
					get_rotationOutput!rotationOutput -> Memory_rotationOutput(rotationOutput)
					[]
					getV_rotationOutput!rotationOutput -> Memory_rotationOutput(rotationOutput)
					[]
					set_rotationOutput?x__ -> Memory_rotationOutput(x__)
					[]
					set_EXT_rotationOutput?x__ -> Memory_rotationOutput(x__)
				)
				
				MemoryVariablesProcesses_RotationPID = {(Memory_diff(0),{|get_diff,getV_diff,set_diff|})}
						
				MemoryVariablesSyncSet = {|getV_diff,
				set_diff|}
				
				MemoryVariablesHideSet = {|getV_diff|}
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_diff,set_diff|},
							{||}
						)
							
						,
						{|internal__.TID_RotationPID_t0|}
					)
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_diff,set_diff|},
						{||}
					)
				})
				
				MachineInternalEvents = {|
					internal__
				|}
				
				-- Memory cell processes
				Memory_opt_rotationOutput(x__) = ( 
					get_rotationOutput!x__ -> Memory_opt_rotationOutput(x__)
					[]
					set_rotationOutput?x__ -> Memory_opt_rotationOutput(x__)
					[]
					set_EXT_rotationOutput?x__ -> Memory_opt_rotationOutput(x__)
				)
				Memory_opt_diff(x__) = ( 
					get_diff!x__ -> Memory_opt_diff(x__)
					[]
					set_diff?x__ -> Memory_opt_diff(x__)
				)
				
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_diff, set_diff, getV_diff: core_real
				channel get_rotationOutput, set_rotationOutput, getV_rotationOutput: core_real
						
				-- shared variable channels
				channel set_EXT_rotationOutput: core_real
				
				-- local variable channels for defined operations that are required by the state machine
				
				-- declaring state machine events
			
				-- definition of the behaviour of state machines (default and optimised)
				D__(id__,
						    const_RotationPID_D) = AUX(id__,
						    const_RotationPID_D) \ internal_events
				O__(id__,
						    const_RotationPID_D) = sbisim(diamond(D__(id__,
						    const_RotationPID_D)))
			endmodule
		
			module stm_ref0
			exports
				-- flow channels
				channel internal__ : TIDS
				channel enteredV, enterV, exitV, exitedV : SIDS
				channel enter, entered: SIDS.SIDS
				channel exit,exited: SIDS.SIDS
				channel terminate
				
				-- variable channels
				channel get_currAngle, set_currAngle: core_real
				channel get_currGyroX, set_currGyroX: core_real
				channel get_currGyroY, set_currGyroY: core_real
				channel get_currGyroZ, set_currGyroZ: core_real
				channel get_currLeftVel, set_currLeftVel: core_real
				channel get_currRightVel, set_currRightVel: core_real
				channel get_speedCount, set_speedCount: core_nat
				channel get_rotationCount, set_rotationCount: core_nat
				channel get_angleOutput, set_angleOutput: core_real
				channel get_speedIntegral, set_speedIntegral: core_real
				channel get_speedOutput, set_speedOutput: core_real
				channel get_rotationOutput, set_rotationOutput: core_real
						
				-- shared variable channels
				
				-- local variable channels for defined operations that are required by the state machine
				channel get_RotationPID_diff, set_RotationPID_diff: core_real
				channel get_SpeedPID_newError, set_SpeedPID_newError: core_real
				channel get_AnglePID_newError, set_AnglePID_newError: core_real
				channel get_AnglePID_diff, set_AnglePID_diff: core_real
				
				-- declaring state machine events
				channel leftMotorVelocity__: TIDS.InOut.core_real
				channel leftMotorVelocity: InOut.core_real
				channel rightMotorVelocity__: TIDS.InOut.core_real
				channel rightMotorVelocity: InOut.core_real
				channel angle__: TIDS.InOut.core_real
				channel angle: InOut.core_real
				channel gyroX__: TIDS.InOut.core_real
				channel gyroX: InOut.core_real
				channel gyroY__: TIDS.InOut.core_real
				channel gyroY: InOut.core_real
				channel gyroZ__: TIDS.InOut.core_real
				channel gyroZ: InOut.core_real
				
				-- declaring call and ret events for undefined operations
				channel setLeftMotorSpeedCall: core_real
				channel setRightMotorSpeedCall: core_real
				channel disableInterruptsCall
				channel enableInterruptsCall
				
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machien module.
				CALL__setLeftMotorSpeed(id__,
						    speed) =  setLeftMotorSpeedCall.speed -> SKIP
				
				CALL__setRightMotorSpeed(id__,
						    speed) =  setRightMotorSpeedCall.speed -> SKIP
				
				CALL__disableInterrupts(id__) =  disableInterruptsCall -> SKIP
				
				CALL__enableInterrupts(id__) =  enableInterruptsCall -> SKIP
				
				
				CALL__RotationPID(id__,
							diff,
						    const_RotationPID_D) = (OP_RotationPID::set_diff!diff -> OP_RotationPID::O__(id__,
						    const_RotationPID_D))
				[[
					OP_RotationPID::get_rotationOutput <- get_rotationOutput,
					OP_RotationPID::set_rotationOutput <- set_rotationOutput
				]]
				CALL__SpeedPID(id__,
							newError,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral) = (OP_SpeedPID::set_newError!newError -> OP_SpeedPID::O__(id__,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral))
				[[
					OP_SpeedPID::get_speedIntegral <- get_speedIntegral,
					OP_SpeedPID::set_speedIntegral <- set_speedIntegral,
					OP_SpeedPID::get_speedOutput <- get_speedOutput,
					OP_SpeedPID::set_speedOutput <- set_speedOutput
				]]
				CALL__AnglePID(id__,
							newError,
							diff,
						    const_AnglePID_P,
						    const_AnglePID_D) = (OP_AnglePID::set_newError!newError -> OP_AnglePID::set_diff!diff -> OP_AnglePID::O__(id__,
						    const_AnglePID_P,
						    const_AnglePID_D))
				[[
					OP_AnglePID::get_angleOutput <- get_angleOutput,
					OP_AnglePID::set_angleOutput <- set_angleOutput
				]]
				
				-- definition of functions used to expose flow channels
				ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
								   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
								   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
								   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
									 
				ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
							[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
							[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				
				-- declaring identifiers of state and final states
				datatype SIDS = SID_BalanceSTM
				              | SID_BalanceSTM_CalculateAngle
				              | SID_BalanceSTM_CalculateSpeed
				              | SID_BalanceSTM_CalculateRotation
				              | SID_BalanceSTM_SetMotors
				              | SID_BalanceSTM_StopMotors
				              | SID_BalanceSTM_WaitForNextIteration
				              | SID_BalanceSTM_Initialisation
				
				-- declaring identifiers of transitions
				datatype TIDS = NULLTRANSITION__
				              | TID_BalanceSTM_t1
				              | TID_BalanceSTM_t2
				              | TID_BalanceSTM_t3
				              | TID_BalanceSTM_t4
				              | TID_BalanceSTM_t8
				              | TID_BalanceSTM_t9
				              | TID_BalanceSTM_t10
				              | TID_BalanceSTM_t12
				              | TID_BalanceSTM_t7
				              | TID_BalanceSTM_t11
				              | TID_BalanceSTM_t0
				              | TID_BalanceSTM_t13
				              | TID_BalanceSTM_t5
				              | TID_BalanceSTM_t6
				              | TID_BalanceSTM_t14
				
				-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
				
				ITIDS = {
					TID_BalanceSTM_t2,	TID_BalanceSTM_t3,	TID_BalanceSTM_t8,	TID_BalanceSTM_t12,	TID_BalanceSTM_t7,	TID_BalanceSTM_t11,	TID_BalanceSTM_t13
				}
				
				int_int = {|
					leftMotorVelocity__.TID_BalanceSTM_t2,
					rightMotorVelocity__.TID_BalanceSTM_t2,
					angle__.TID_BalanceSTM_t2,
					gyroX__.TID_BalanceSTM_t2,
					gyroY__.TID_BalanceSTM_t2,
					gyroZ__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t2,
					leftMotorVelocity__.TID_BalanceSTM_t3,
					rightMotorVelocity__.TID_BalanceSTM_t3,
					angle__.TID_BalanceSTM_t3,
					gyroX__.TID_BalanceSTM_t3,
					gyroY__.TID_BalanceSTM_t3,
					gyroZ__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t3,
					leftMotorVelocity__.TID_BalanceSTM_t8,
					rightMotorVelocity__.TID_BalanceSTM_t8,
					angle__.TID_BalanceSTM_t8,
					gyroX__.TID_BalanceSTM_t8,
					gyroY__.TID_BalanceSTM_t8,
					gyroZ__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t8,
					leftMotorVelocity__.TID_BalanceSTM_t12,
					rightMotorVelocity__.TID_BalanceSTM_t12,
					angle__.TID_BalanceSTM_t12,
					gyroX__.TID_BalanceSTM_t12,
					gyroY__.TID_BalanceSTM_t12,
					gyroZ__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t12,
					leftMotorVelocity__.TID_BalanceSTM_t7,
					rightMotorVelocity__.TID_BalanceSTM_t7,
					angle__.TID_BalanceSTM_t7,
					gyroX__.TID_BalanceSTM_t7,
					gyroY__.TID_BalanceSTM_t7,
					gyroZ__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t7,
					leftMotorVelocity__.TID_BalanceSTM_t11,
					rightMotorVelocity__.TID_BalanceSTM_t11,
					angle__.TID_BalanceSTM_t11,
					gyroX__.TID_BalanceSTM_t11,
					gyroY__.TID_BalanceSTM_t11,
					gyroZ__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t11,
					leftMotorVelocity__.TID_BalanceSTM_t13,
					rightMotorVelocity__.TID_BalanceSTM_t13,
					angle__.TID_BalanceSTM_t13,
					gyroX__.TID_BalanceSTM_t13,
					gyroY__.TID_BalanceSTM_t13,
					gyroZ__.TID_BalanceSTM_t13,
					internal__.TID_BalanceSTM_t13
				|}
					
				
				internal_events = {|enter,entered,exit,exited|}
				shared_variable_events = {|
				|}
						
				
				-- declaring all states
				CS_BalanceSTM_CalculateAngle_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_CalculateAngle}
				|}
				
				
				BalanceSTM_CalculateAngle_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_CalculateAngle(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t3(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t3 ->  exit.SID_BalanceSTM_CalculateAngle.SID_BalanceSTM_CalculateAngle -> SKIP;
										SKIP;exited.SID_BalanceSTM_CalculateAngle.SID_BalanceSTM_CalculateAngle -> SKIP;
										get_speedCount?speedCount -> true & (set_speedCount!Plus(speedCount, 1, core_nat) -> SKIP);J_BalanceSTM_j0(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					J_BalanceSTM_j1(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t5 -> get_rotationCount?rotationCount -> true & (set_rotationCount!Plus(rotationCount, 1, core_nat) -> SKIP);J_BalanceSTM_j3(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D))
								)
					J_BalanceSTM_j2(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t9 -> enter!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_SetMotors -> entered!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_SetMotors ->
								State_BalanceSTM_CalculateAngle(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)[]
								(internal__!TID_BalanceSTM_t10 -> enter!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_StopMotors -> entered!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_StopMotors ->
								State_BalanceSTM_CalculateAngle(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)
								)
					J_BalanceSTM_j3(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t6 -> enter!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_CalculateRotation -> entered!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_CalculateRotation ->
								State_BalanceSTM_CalculateAngle(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)[]
								(internal__!TID_BalanceSTM_t14 -> J_BalanceSTM_j2(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D))
								)
					J_BalanceSTM_j0(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t1 -> enter!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_CalculateSpeed -> entered!SID_BalanceSTM_CalculateAngle!SID_BalanceSTM_CalculateSpeed ->
								State_BalanceSTM_CalculateAngle(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)[]
								(internal__!TID_BalanceSTM_t4 -> J_BalanceSTM_j1(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D))
								)
					State_BalanceSTM_CalculateAngle_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = true&CALL__enableInterrupts(
								id__
							);true&(angle.in?currAngle -> set_currAngle!currAngle -> SKIP);true&(gyroX.in?currGyroX -> set_currGyroX!currGyroX -> SKIP);get_currGyroX?currGyroX -> get_currAngle?currAngle -> true&CALL__AnglePID(
								id__,
								currAngle,
								currGyroX,
								const_AnglePID_P,
								const_AnglePID_D
							);SKIP; 
						entered!o____!SID_BalanceSTM_CalculateAngle ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t3(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateAngle -> SKIP);
									State_BalanceSTM_CalculateAngle(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_CalculateAngle})!SID_BalanceSTM_CalculateAngle -> (State_BalanceSTM_CalculateAngle_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				CS_BalanceSTM_CalculateSpeed_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_CalculateSpeed}
				|}
				
				
				BalanceSTM_CalculateSpeed_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_CalculateSpeed(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t2(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t2 ->  exit.SID_BalanceSTM_CalculateSpeed.SID_BalanceSTM_CalculateSpeed -> SKIP;
										SKIP;exited.SID_BalanceSTM_CalculateSpeed.SID_BalanceSTM_CalculateSpeed -> SKIP;
										J_BalanceSTM_j1(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					J_BalanceSTM_j1(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t5 -> get_rotationCount?rotationCount -> true & (set_rotationCount!Plus(rotationCount, 1, core_nat) -> SKIP);J_BalanceSTM_j3(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D))
								)
					J_BalanceSTM_j2(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t9 -> enter!SID_BalanceSTM_CalculateSpeed!SID_BalanceSTM_SetMotors -> entered!SID_BalanceSTM_CalculateSpeed!SID_BalanceSTM_SetMotors ->
								State_BalanceSTM_CalculateSpeed(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)[]
								(internal__!TID_BalanceSTM_t10 -> enter!SID_BalanceSTM_CalculateSpeed!SID_BalanceSTM_StopMotors -> entered!SID_BalanceSTM_CalculateSpeed!SID_BalanceSTM_StopMotors ->
								State_BalanceSTM_CalculateSpeed(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)
								)
					J_BalanceSTM_j3(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t6 -> enter!SID_BalanceSTM_CalculateSpeed!SID_BalanceSTM_CalculateRotation -> entered!SID_BalanceSTM_CalculateSpeed!SID_BalanceSTM_CalculateRotation ->
								State_BalanceSTM_CalculateSpeed(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)[]
								(internal__!TID_BalanceSTM_t14 -> J_BalanceSTM_j2(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D))
								)
					State_BalanceSTM_CalculateSpeed_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = true&(leftMotorVelocity.in?currLeftVel -> set_currLeftVel!currLeftVel -> SKIP);true&(rightMotorVelocity.in?currRightVel -> set_currRightVel!currRightVel -> SKIP);get_currLeftVel?currLeftVel -> get_currRightVel?currRightVel -> true&CALL__SpeedPID(
								id__,
								Plus(currLeftVel, currRightVel, core_real),
								const_SpeedPID_P,
								const_SpeedPID_I,
								const_SpeedPID_maxIntegral
							);true & (set_speedCount!0 -> SKIP);SKIP; 
						entered!o____!SID_BalanceSTM_CalculateSpeed ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t2(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateSpeed -> SKIP);
									State_BalanceSTM_CalculateSpeed(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_CalculateSpeed})!SID_BalanceSTM_CalculateSpeed -> (State_BalanceSTM_CalculateSpeed_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				CS_BalanceSTM_CalculateRotation_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_CalculateRotation}
				|}
				
				
				BalanceSTM_CalculateRotation_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_CalculateRotation(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t8(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t8 ->  exit.SID_BalanceSTM_CalculateRotation.SID_BalanceSTM_CalculateRotation -> SKIP;
										SKIP;exited.SID_BalanceSTM_CalculateRotation.SID_BalanceSTM_CalculateRotation -> SKIP;
										J_BalanceSTM_j2(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					J_BalanceSTM_j2(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = (
								(internal__!TID_BalanceSTM_t9 -> enter!SID_BalanceSTM_CalculateRotation!SID_BalanceSTM_SetMotors -> entered!SID_BalanceSTM_CalculateRotation!SID_BalanceSTM_SetMotors ->
								State_BalanceSTM_CalculateRotation(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)[]
								(internal__!TID_BalanceSTM_t10 -> enter!SID_BalanceSTM_CalculateRotation!SID_BalanceSTM_StopMotors -> entered!SID_BalanceSTM_CalculateRotation!SID_BalanceSTM_StopMotors ->
								State_BalanceSTM_CalculateRotation(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
								)
								)
					State_BalanceSTM_CalculateRotation_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = true&(gyroZ.in?currGyroZ -> set_currGyroZ!currGyroZ -> SKIP);get_currGyroZ?currGyroZ -> true&CALL__RotationPID(
								id__,
								currGyroZ,
								const_RotationPID_D
							);true & (set_rotationCount!0 -> SKIP);SKIP; 
						entered!o____!SID_BalanceSTM_CalculateRotation ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t8(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t10,TID_BalanceSTM_t5,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_CalculateRotation -> SKIP);
									State_BalanceSTM_CalculateRotation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_CalculateRotation})!SID_BalanceSTM_CalculateRotation -> (State_BalanceSTM_CalculateRotation_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				CS_BalanceSTM_SetMotors_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_SetMotors}
				|}
				
				
				BalanceSTM_SetMotors_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_SetMotors(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t11(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t11 ->  exit.SID_BalanceSTM_SetMotors.SID_BalanceSTM_SetMotors -> SKIP;
										SKIP;exited.SID_BalanceSTM_SetMotors.SID_BalanceSTM_SetMotors -> SKIP;
										enter!SID_BalanceSTM_SetMotors!SID_BalanceSTM_WaitForNextIteration -> entered!SID_BalanceSTM_SetMotors!SID_BalanceSTM_WaitForNextIteration ->
										State_BalanceSTM_SetMotors(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					State_BalanceSTM_SetMotors_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = get_speedOutput?speedOutput -> get_rotationOutput?rotationOutput -> get_angleOutput?angleOutput -> true&CALL__setLeftMotorSpeed(
								id__,
								Minus(Plus(angleOutput, speedOutput, core_real), rotationOutput, core_real)
							);get_speedOutput?speedOutput -> get_rotationOutput?rotationOutput -> get_angleOutput?angleOutput -> true&CALL__setRightMotorSpeed(
								id__,
								Plus(Plus(angleOutput, speedOutput, core_real), rotationOutput, core_real)
							);SKIP; 
						entered!o____!SID_BalanceSTM_SetMotors ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t11(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_SetMotors -> SKIP);
									State_BalanceSTM_SetMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_SetMotors})!SID_BalanceSTM_SetMotors -> (State_BalanceSTM_SetMotors_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				CS_BalanceSTM_StopMotors_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_StopMotors}
				|}
				
				
				BalanceSTM_StopMotors_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_StopMotors(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t7(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t7 ->  exit.SID_BalanceSTM_StopMotors.SID_BalanceSTM_StopMotors -> SKIP;
										SKIP;exited.SID_BalanceSTM_StopMotors.SID_BalanceSTM_StopMotors -> SKIP;
										enter!SID_BalanceSTM_StopMotors!SID_BalanceSTM_WaitForNextIteration -> entered!SID_BalanceSTM_StopMotors!SID_BalanceSTM_WaitForNextIteration ->
										State_BalanceSTM_StopMotors(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					State_BalanceSTM_StopMotors_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = true&CALL__setLeftMotorSpeed(
								id__,
								0
							);true&CALL__setRightMotorSpeed(
								id__,
								0
							);SKIP; 
						entered!o____!SID_BalanceSTM_StopMotors ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t7(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t7,TID_BalanceSTM_t1,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (
									SKIP;
									exited!y____!SID_BalanceSTM_StopMotors -> SKIP);
									State_BalanceSTM_StopMotors(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_StopMotors})!SID_BalanceSTM_StopMotors -> (State_BalanceSTM_StopMotors_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				CS_BalanceSTM_WaitForNextIteration_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_WaitForNextIteration}
				|}
				
				
				BalanceSTM_WaitForNextIteration_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_WaitForNextIteration(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t12(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t12 ->  exit.SID_BalanceSTM_WaitForNextIteration.SID_BalanceSTM_WaitForNextIteration -> SKIP;
										SKIP;exited.SID_BalanceSTM_WaitForNextIteration.SID_BalanceSTM_WaitForNextIteration -> SKIP;
										true&CALL__disableInterrupts(
													id__
												);enter!SID_BalanceSTM_WaitForNextIteration!SID_BalanceSTM_CalculateAngle -> entered!SID_BalanceSTM_WaitForNextIteration!SID_BalanceSTM_CalculateAngle ->
										State_BalanceSTM_WaitForNextIteration(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					State_BalanceSTM_WaitForNextIteration_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = SKIP; 
						entered!o____!SID_BalanceSTM_WaitForNextIteration ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t12(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (
									SKIP;
									exited!y____!SID_BalanceSTM_WaitForNextIteration -> SKIP);
									State_BalanceSTM_WaitForNextIteration(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_WaitForNextIteration})!SID_BalanceSTM_WaitForNextIteration -> (State_BalanceSTM_WaitForNextIteration_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				CS_BalanceSTM_Initialisation_sync = {|
					enter.y____.x____, 
					entered.y____.x____, 
					exit.y____.x____, 
					exited.y____.x____,
					enter.x____.y____, 
					entered.x____.y____, 
					exit.x____.y____, 
					exited.x____.y____ |
					x____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation},
					y____ <- {SID_BalanceSTM_Initialisation}
				|}
				
				
				BalanceSTM_Initialisation_triggers = {|
					internal__.TID_BalanceSTM_t12,
					internal__.TID_BalanceSTM_t5,
					internal__.TID_BalanceSTM_t10,
					internal__.TID_BalanceSTM_t4,
					internal__.TID_BalanceSTM_t6,
					internal__.TID_BalanceSTM_t3,
					internal__.TID_BalanceSTM_t9,
					internal__.TID_BalanceSTM_t8,
					internal__.TID_BalanceSTM_t13,
					internal__.TID_BalanceSTM_t1,
					internal__.TID_BalanceSTM_t7,
					internal__.TID_BalanceSTM_t11,
					internal__.TID_BalanceSTM_t2,
					internal__.TID_BalanceSTM_t14
				|}
				
				State_BalanceSTM_Initialisation(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t13(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t13 ->  exit.SID_BalanceSTM_Initialisation.SID_BalanceSTM_Initialisation -> SKIP;
										SKIP;exited.SID_BalanceSTM_Initialisation.SID_BalanceSTM_Initialisation -> SKIP;
										enter!SID_BalanceSTM_Initialisation!SID_BalanceSTM_WaitForNextIteration -> entered!SID_BalanceSTM_Initialisation!SID_BalanceSTM_WaitForNextIteration ->
										State_BalanceSTM_Initialisation(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
					State_BalanceSTM_Initialisation_execute(id__,o____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D) = true & (set_speedCount!0 -> SKIP);true & (set_rotationCount!0 -> SKIP);SKIP;SKIP; 
						entered!o____!SID_BalanceSTM_Initialisation ->
						(SKIP; STOP /\ (
							T_BalanceSTM_t13(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
							[]
							internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14}) -> exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] leftMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] rightMotorVelocity__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] angle__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroX__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroY__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
							[] gyroZ__?x____:diff(ITIDS,{NULLTRANSITION__,TID_BalanceSTM_t12,TID_BalanceSTM_t5,TID_BalanceSTM_t10,TID_BalanceSTM_t4,TID_BalanceSTM_t6,TID_BalanceSTM_t3,TID_BalanceSTM_t9,TID_BalanceSTM_t8,TID_BalanceSTM_t13,TID_BalanceSTM_t1,TID_BalanceSTM_t7,TID_BalanceSTM_t11,TID_BalanceSTM_t2,TID_BalanceSTM_t14})?d____?aux____ ->	exit?y____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (
									SKIP;
									exited!y____!SID_BalanceSTM_Initialisation -> SKIP);
									State_BalanceSTM_Initialisation(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
						))
				within
					enter?x____:diff(SIDS,{SID_BalanceSTM_Initialisation})!SID_BalanceSTM_Initialisation -> (State_BalanceSTM_Initialisation_execute(id__,x____,
							          const_RotationPID_D,
							          const_SpeedPID_P,
							          const_SpeedPID_I,
							          const_SpeedPID_maxIntegral,
							          const_AnglePID_P,
							          const_AnglePID_D))
				
				
				I_BalanceSTM_i0(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = let
					T_BalanceSTM_t0(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D) = internal__!TID_BalanceSTM_t0 -> enter!SID_BalanceSTM!SID_BalanceSTM_Initialisation -> entered!SID_BalanceSTM!SID_BalanceSTM_Initialisation ->
					SKIP
				within
					T_BalanceSTM_t0(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
				
				
				State_BalanceSTM_CalculateAngle_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_CalculateAngle(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_CalculateAngle_triggers)|]
					SKIP
						 		
				State_BalanceSTM_CalculateSpeed_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_CalculateSpeed(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_CalculateSpeed_triggers)|]
					SKIP
						 		
				State_BalanceSTM_CalculateRotation_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_CalculateRotation(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_CalculateRotation_triggers)|]
					SKIP
						 		
				State_BalanceSTM_SetMotors_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_SetMotors(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_SetMotors_triggers)|]
					SKIP
						 		
				State_BalanceSTM_StopMotors_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_StopMotors(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_StopMotors_triggers)|]
					SKIP
						 		
				State_BalanceSTM_WaitForNextIteration_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_WaitForNextIteration(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_WaitForNextIteration_triggers)|]
					SKIP
						 		
				State_BalanceSTM_Initialisation_R(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					State_BalanceSTM_Initialisation(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|diff(int_int,BalanceSTM_Initialisation_triggers)|]
					SKIP
						 		
					
				STM(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = (
					I_BalanceSTM_i0(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
						[|
							{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
								x____ <- diff(SIDS,{SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation}),
								y____ <- {SID_BalanceSTM_CalculateAngle,SID_BalanceSTM_CalculateSpeed,SID_BalanceSTM_CalculateRotation,SID_BalanceSTM_SetMotors,SID_BalanceSTM_StopMotors,SID_BalanceSTM_WaitForNextIteration,SID_BalanceSTM_Initialisation}
						|}|]
					(
						State_BalanceSTM_CalculateAngle_R(id__,
								    const_BalanceSTM_maxAngle,
								    const_BalanceSTM_loopTime,
								    const_BalanceSTM_startupDelay,
								    const_BalanceSTM_speedUpdate,
								    const_BalanceSTM_rotationUpdate,
								    const_BalanceSTM_angleBudget,
								    const_BalanceSTM_speedBudget,
								    const_BalanceSTM_rotationBudget,
								    const_BalanceSTM_motorBudget,
								    const_RotationPID_D,
								    const_SpeedPID_P,
								    const_SpeedPID_I,
								    const_SpeedPID_maxIntegral,
								    const_AnglePID_P,
								    const_AnglePID_D)
							[|inter(CS_BalanceSTM_CalculateAngle_sync,union(union(union(union(union(CS_BalanceSTM_CalculateSpeed_sync,CS_BalanceSTM_CalculateRotation_sync),CS_BalanceSTM_SetMotors_sync),CS_BalanceSTM_StopMotors_sync),CS_BalanceSTM_WaitForNextIteration_sync),CS_BalanceSTM_Initialisation_sync))|]
						(
							State_BalanceSTM_CalculateSpeed_R(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)
								[|inter(CS_BalanceSTM_CalculateSpeed_sync,union(union(union(union(CS_BalanceSTM_CalculateRotation_sync,CS_BalanceSTM_SetMotors_sync),CS_BalanceSTM_StopMotors_sync),CS_BalanceSTM_WaitForNextIteration_sync),CS_BalanceSTM_Initialisation_sync))|]
							(
								State_BalanceSTM_CalculateRotation_R(id__,
										    const_BalanceSTM_maxAngle,
										    const_BalanceSTM_loopTime,
										    const_BalanceSTM_startupDelay,
										    const_BalanceSTM_speedUpdate,
										    const_BalanceSTM_rotationUpdate,
										    const_BalanceSTM_angleBudget,
										    const_BalanceSTM_speedBudget,
										    const_BalanceSTM_rotationBudget,
										    const_BalanceSTM_motorBudget,
										    const_RotationPID_D,
										    const_SpeedPID_P,
										    const_SpeedPID_I,
										    const_SpeedPID_maxIntegral,
										    const_AnglePID_P,
										    const_AnglePID_D)
									[|inter(CS_BalanceSTM_CalculateRotation_sync,union(union(union(CS_BalanceSTM_SetMotors_sync,CS_BalanceSTM_StopMotors_sync),CS_BalanceSTM_WaitForNextIteration_sync),CS_BalanceSTM_Initialisation_sync))|]
								(
									State_BalanceSTM_SetMotors_R(id__,
											    const_BalanceSTM_maxAngle,
											    const_BalanceSTM_loopTime,
											    const_BalanceSTM_startupDelay,
											    const_BalanceSTM_speedUpdate,
											    const_BalanceSTM_rotationUpdate,
											    const_BalanceSTM_angleBudget,
											    const_BalanceSTM_speedBudget,
											    const_BalanceSTM_rotationBudget,
											    const_BalanceSTM_motorBudget,
											    const_RotationPID_D,
											    const_SpeedPID_P,
											    const_SpeedPID_I,
											    const_SpeedPID_maxIntegral,
											    const_AnglePID_P,
											    const_AnglePID_D)
										[|inter(CS_BalanceSTM_SetMotors_sync,union(union(CS_BalanceSTM_StopMotors_sync,CS_BalanceSTM_WaitForNextIteration_sync),CS_BalanceSTM_Initialisation_sync))|]
									(
										State_BalanceSTM_StopMotors_R(id__,
												    const_BalanceSTM_maxAngle,
												    const_BalanceSTM_loopTime,
												    const_BalanceSTM_startupDelay,
												    const_BalanceSTM_speedUpdate,
												    const_BalanceSTM_rotationUpdate,
												    const_BalanceSTM_angleBudget,
												    const_BalanceSTM_speedBudget,
												    const_BalanceSTM_rotationBudget,
												    const_BalanceSTM_motorBudget,
												    const_RotationPID_D,
												    const_SpeedPID_P,
												    const_SpeedPID_I,
												    const_SpeedPID_maxIntegral,
												    const_AnglePID_P,
												    const_AnglePID_D)
											[|inter(CS_BalanceSTM_StopMotors_sync,union(CS_BalanceSTM_WaitForNextIteration_sync,CS_BalanceSTM_Initialisation_sync))|]
										(
											State_BalanceSTM_WaitForNextIteration_R(id__,
													    const_BalanceSTM_maxAngle,
													    const_BalanceSTM_loopTime,
													    const_BalanceSTM_startupDelay,
													    const_BalanceSTM_speedUpdate,
													    const_BalanceSTM_rotationUpdate,
													    const_BalanceSTM_angleBudget,
													    const_BalanceSTM_speedBudget,
													    const_BalanceSTM_rotationBudget,
													    const_BalanceSTM_motorBudget,
													    const_RotationPID_D,
													    const_SpeedPID_P,
													    const_SpeedPID_I,
													    const_SpeedPID_maxIntegral,
													    const_AnglePID_P,
													    const_AnglePID_D)
												[|inter(CS_BalanceSTM_WaitForNextIteration_sync,CS_BalanceSTM_Initialisation_sync)|]
											State_BalanceSTM_Initialisation_R(id__,
													    const_BalanceSTM_maxAngle,
													    const_BalanceSTM_loopTime,
													    const_BalanceSTM_startupDelay,
													    const_BalanceSTM_speedUpdate,
													    const_BalanceSTM_rotationUpdate,
													    const_BalanceSTM_angleBudget,
													    const_BalanceSTM_speedBudget,
													    const_BalanceSTM_rotationBudget,
													    const_BalanceSTM_motorBudget,
													    const_RotationPID_D,
													    const_SpeedPID_P,
													    const_SpeedPID_I,
													    const_SpeedPID_maxIntegral,
													    const_AnglePID_P,
													    const_AnglePID_D)
										)
									)
								)
							)
						)
					)
				)
				
				-- optimized memory process
				channel getV_currAngle: core_real
				channel getV_currGyroX: core_real
				channel getV_currGyroY: core_real
				channel getV_currGyroZ: core_real
				channel getV_currLeftVel: core_real
				channel getV_currRightVel: core_real
				channel getV_speedCount: core_nat
				channel getV_rotationCount: core_nat
				channel getV_angleOutput: core_real
				channel getV_speedIntegral: core_real
				channel getV_speedOutput: core_real
				channel getV_rotationOutput: core_real
				
				-- individual memory processes
				Memory_currAngle(currAngle) = (
					get_currAngle!currAngle -> Memory_currAngle(currAngle)
					[]
					getV_currAngle!currAngle -> Memory_currAngle(currAngle)
					[]
					set_currAngle?x__ -> Memory_currAngle(x__)
				)
				Memory_currGyroX(currGyroX) = (
					get_currGyroX!currGyroX -> Memory_currGyroX(currGyroX)
					[]
					getV_currGyroX!currGyroX -> Memory_currGyroX(currGyroX)
					[]
					set_currGyroX?x__ -> Memory_currGyroX(x__)
				)
				Memory_currGyroY(currGyroY) = (
					get_currGyroY!currGyroY -> Memory_currGyroY(currGyroY)
					[]
					getV_currGyroY!currGyroY -> Memory_currGyroY(currGyroY)
					[]
					set_currGyroY?x__ -> Memory_currGyroY(x__)
				)
				Memory_currGyroZ(currGyroZ) = (
					get_currGyroZ!currGyroZ -> Memory_currGyroZ(currGyroZ)
					[]
					getV_currGyroZ!currGyroZ -> Memory_currGyroZ(currGyroZ)
					[]
					set_currGyroZ?x__ -> Memory_currGyroZ(x__)
				)
				Memory_currLeftVel(currLeftVel) = (
					get_currLeftVel!currLeftVel -> Memory_currLeftVel(currLeftVel)
					[]
					getV_currLeftVel!currLeftVel -> Memory_currLeftVel(currLeftVel)
					[]
					set_currLeftVel?x__ -> Memory_currLeftVel(x__)
				)
				Memory_currRightVel(currRightVel) = (
					get_currRightVel!currRightVel -> Memory_currRightVel(currRightVel)
					[]
					getV_currRightVel!currRightVel -> Memory_currRightVel(currRightVel)
					[]
					set_currRightVel?x__ -> Memory_currRightVel(x__)
				)
				Memory_speedCount(speedCount) = (
					get_speedCount!speedCount -> Memory_speedCount(speedCount)
					[]
					getV_speedCount!speedCount -> Memory_speedCount(speedCount)
					[]
					set_speedCount?x__ -> Memory_speedCount(x__)
				)
				Memory_rotationCount(rotationCount) = (
					get_rotationCount!rotationCount -> Memory_rotationCount(rotationCount)
					[]
					getV_rotationCount!rotationCount -> Memory_rotationCount(rotationCount)
					[]
					set_rotationCount?x__ -> Memory_rotationCount(x__)
				)
				Memory_angleOutput(angleOutput) = (
					get_angleOutput!angleOutput -> Memory_angleOutput(angleOutput)
					[]
					getV_angleOutput!angleOutput -> Memory_angleOutput(angleOutput)
					[]
					set_angleOutput?x__ -> Memory_angleOutput(x__)
				)
				Memory_speedIntegral(speedIntegral) = (
					get_speedIntegral!speedIntegral -> Memory_speedIntegral(speedIntegral)
					[]
					getV_speedIntegral!speedIntegral -> Memory_speedIntegral(speedIntegral)
					[]
					set_speedIntegral?x__ -> Memory_speedIntegral(x__)
				)
				Memory_speedOutput(speedOutput) = (
					get_speedOutput!speedOutput -> Memory_speedOutput(speedOutput)
					[]
					getV_speedOutput!speedOutput -> Memory_speedOutput(speedOutput)
					[]
					set_speedOutput?x__ -> Memory_speedOutput(x__)
				)
				Memory_rotationOutput(rotationOutput) = (
					get_rotationOutput!rotationOutput -> Memory_rotationOutput(rotationOutput)
					[]
					getV_rotationOutput!rotationOutput -> Memory_rotationOutput(rotationOutput)
					[]
					set_rotationOutput?x__ -> Memory_rotationOutput(x__)
				)
				
				-- processes that read variables and offer transitions
				MemoryTransitions(id__, currAngle
							, currGyroX
							, currGyroY
							, currGyroZ
							, currLeftVel
							, currRightVel
							, speedCount
							, rotationCount
							, angleOutput
							, speedIntegral
							, speedOutput
							, rotationOutput
							, RotationPID_diff, SpeedPID_newError, AnglePID_newError, AnglePID_diff,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 		
				(((speedCount>=const_BalanceSTM_speedUpdate))&(internal__!TID_BalanceSTM_t1 -> SKIP)
				[]
				internal__!TID_BalanceSTM_t2 -> SKIP
				[]
				internal__!TID_BalanceSTM_t3 -> SKIP
				[]
				((speedCount<const_BalanceSTM_speedUpdate))&(internal__!TID_BalanceSTM_t4 -> SKIP)
				[]
				internal__!TID_BalanceSTM_t8 -> SKIP
				[]
				(((currAngle<=const_BalanceSTM_maxAngle) and (currAngle>=Neg(const_BalanceSTM_maxAngle, core_int))))&(internal__!TID_BalanceSTM_t9 -> SKIP)
				[]
				(((currAngle>const_BalanceSTM_maxAngle) or (currAngle<Neg(const_BalanceSTM_maxAngle, core_int))))&(internal__!TID_BalanceSTM_t10 -> SKIP)
				[]
				(true)&(internal__!TID_BalanceSTM_t12 -> SKIP)
				[]
				internal__!TID_BalanceSTM_t7 -> SKIP
				[]
				internal__!TID_BalanceSTM_t11 -> SKIP
				[]
				internal__!TID_BalanceSTM_t0 -> SKIP
				[]
				internal__!TID_BalanceSTM_t13 -> SKIP
				[]
				internal__!TID_BalanceSTM_t5 -> SKIP
				[]
				((rotationCount>=const_BalanceSTM_rotationUpdate))&(internal__!TID_BalanceSTM_t6 -> SKIP)
				[]
				((rotationCount<const_BalanceSTM_rotationUpdate))&(internal__!TID_BalanceSTM_t14 -> SKIP)
				[]
				OP_RotationPID::MemoryTransitions(id__, RotationPID_diff, rotationOutput,
						    const_RotationPID_D)
				
				[]
				OP_SpeedPID::MemoryTransitions(id__, SpeedPID_newError, speedIntegral, speedOutput,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral)
				
				[]
				OP_AnglePID::MemoryTransitions(id__, AnglePID_newError, AnglePID_diff, angleOutput,
						    const_AnglePID_P,
						    const_AnglePID_D)
				[]
				set_currAngle?x__ -> SKIP[]
				set_currGyroX?x__ -> SKIP[]
				set_currGyroY?x__ -> SKIP[]
				set_currGyroZ?x__ -> SKIP[]
				set_currLeftVel?x__ -> SKIP[]
				set_currRightVel?x__ -> SKIP[]
				set_speedCount?x__ -> SKIP[]
				set_rotationCount?x__ -> SKIP[]
				set_angleOutput?x__ -> SKIP[]
				set_speedIntegral?x__ -> SKIP[]
				set_speedOutput?x__ -> SKIP[]
				set_rotationOutput?x__ -> SKIP)
				
				MemoryTransitions_BalanceSTM(id__, const_BalanceSTM_maxAngle, const_BalanceSTM_loopTime, const_BalanceSTM_startupDelay, const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate, const_BalanceSTM_angleBudget, const_BalanceSTM_speedBudget, const_BalanceSTM_rotationBudget, const_BalanceSTM_motorBudget) = (getV_currAngle?currAngle ->
				getV_currGyroX?currGyroX ->
				getV_currGyroY?currGyroY ->
				getV_currGyroZ?currGyroZ ->
				getV_currLeftVel?currLeftVel ->
				getV_currRightVel?currRightVel ->
				getV_speedCount?speedCount ->
				getV_rotationCount?rotationCount ->
				getV_angleOutput?angleOutput ->
				getV_speedIntegral?speedIntegral ->
				getV_speedOutput?speedOutput ->
				getV_rotationOutput?rotationOutput ->
				OP_RotationPID::getV_diff?RotationPID_diff ->
				OP_SpeedPID::getV_newError?SpeedPID_newError ->
				OP_AnglePID::getV_newError?AnglePID_newError ->
				OP_AnglePID::getV_diff?AnglePID_diff ->
				MemoryTransitions(id__, currAngle
							, currGyroX
							, currGyroY
							, currGyroZ
							, currLeftVel
							, currRightVel
							, speedCount
							, rotationCount
							, angleOutput
							, speedIntegral
							, speedOutput
							, rotationOutput
							, RotationPID_diff, SpeedPID_newError, AnglePID_newError, AnglePID_diff,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D); MemoryTransitions_BalanceSTM(id__, const_BalanceSTM_maxAngle, const_BalanceSTM_loopTime, const_BalanceSTM_startupDelay, const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate, const_BalanceSTM_angleBudget, const_BalanceSTM_speedBudget, const_BalanceSTM_rotationBudget, const_BalanceSTM_motorBudget))			
				
				-- synchronisation, hiding and process sets 
				MemoryVariablesProcesses_BalanceSTM = Union(
					{
						OP_RotationPID::MemoryVariablesProcesses_RotationPID,
						OP_SpeedPID::MemoryVariablesProcesses_SpeedPID,
						OP_AnglePID::MemoryVariablesProcesses_AnglePID,
						{
							(Memory_currAngle(0),{|getV_currAngle,get_currAngle,set_currAngle|}),
							(Memory_currGyroX(0),{|getV_currGyroX,get_currGyroX,set_currGyroX|}),
							(Memory_currGyroY(0),{|getV_currGyroY,get_currGyroY,set_currGyroY|}),
							(Memory_currGyroZ(0),{|get_currGyroZ,set_currGyroZ,getV_currGyroZ|}),
							(Memory_currLeftVel(0),{|get_currLeftVel,set_currLeftVel,getV_currLeftVel|}),
							(Memory_currRightVel(0),{|getV_currRightVel,get_currRightVel,set_currRightVel|}),
							(Memory_speedCount(0),{|getV_speedCount,set_speedCount,get_speedCount|}),
							(Memory_rotationCount(0),{|set_rotationCount,getV_rotationCount,get_rotationCount|}),
							(Memory_angleOutput(0),{|set_angleOutput,get_angleOutput,getV_angleOutput|}),
							(Memory_speedIntegral(0),{|set_speedIntegral,get_speedIntegral,getV_speedIntegral|}),
							(Memory_speedOutput(0),{|get_speedOutput,getV_speedOutput,set_speedOutput|}),
							(Memory_rotationOutput(0),{|getV_rotationOutput,set_rotationOutput,get_rotationOutput|})
						}
					}
				)
				
				MemoryVariablesSyncSet = Union({
					OP_RotationPID::MemoryVariablesSyncSet,
					OP_SpeedPID::MemoryVariablesSyncSet,
					OP_AnglePID::MemoryVariablesSyncSet,
					{|
						set_currLeftVel,
						getV_rotationCount,
						getV_currRightVel,
						getV_angleOutput,
						set_speedCount,
						set_speedIntegral,
						set_rotationCount,
						getV_speedOutput,
						getV_rotationOutput,
						getV_currGyroZ,
						getV_currGyroX,
						getV_currGyroY,
						set_currAngle,
						set_currRightVel,
						getV_speedCount,
						set_angleOutput,
						set_rotationOutput,
						set_currGyroZ,
						getV_currAngle,
						getV_currLeftVel,
						set_speedOutput,
						set_currGyroX,
						set_currGyroY,
						getV_speedIntegral
					|}	
				})
				
				MemoryVariablesHideSet = Union({
					OP_RotationPID::MemoryVariablesHideSet,
					OP_SpeedPID::MemoryVariablesHideSet,
					OP_AnglePID::MemoryVariablesHideSet,
					{|
						getV_speedCount,
						getV_rotationCount,
						getV_speedOutput,
						getV_rotationOutput,
						getV_currGyroZ,
						getV_currRightVel,
						getV_currAngle,
						getV_currGyroX,
						getV_currGyroY,
						getV_currLeftVel,
						getV_angleOutput,
						getV_speedIntegral
					|}
				})
				
				-- combined individual memory processes
				MemoryVariables = ||| (P, alpha) : MemoryVariablesProcesses_BalanceSTM @ P
				
				-- complete memory process	
				MemoryN(id__, const_BalanceSTM_maxAngle, const_BalanceSTM_loopTime, const_BalanceSTM_startupDelay, const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate, const_BalanceSTM_angleBudget, const_BalanceSTM_speedBudget, const_BalanceSTM_rotationBudget, const_BalanceSTM_motorBudget) = sbisim(diamond((sbisim(diamond(MemoryVariables)) [| MemoryVariablesSyncSet |] sbisim(diamond(MemoryTransitions_BalanceSTM(id__, const_BalanceSTM_maxAngle, const_BalanceSTM_loopTime, const_BalanceSTM_startupDelay, const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate, const_BalanceSTM_angleBudget, const_BalanceSTM_speedBudget, const_BalanceSTM_rotationBudget, const_BalanceSTM_motorBudget)))) \ MemoryVariablesHideSet))
				
				-- optimised memory
				-- Sets of named elements identified according to transition conditions:
				-- {}
				-- {currAngle,maxAngle}
				-- {loopTime}
				-- {rotationCount,rotationUpdate}
				-- {speedCount,speedUpdate}
				-- Summary of all identified named elements:
				-- {
				-- rotationCount
				-- currAngle
				-- OP_AnglePID::newError
				-- OP_AnglePID::diff
				-- speedOutput
				-- loopTime
				-- rotationUpdate
				-- speedUpdate
				-- maxAngle
				-- currLeftVel
				-- angleOutput
				-- rotationOutput
				-- currRightVel
				-- OP_RotationPID::diff
				-- speedCount
				-- OP_SpeedPID::newError
				-- currGyroX
				-- speedIntegral
				-- currGyroY
				-- currGyroZ
				-- }
				
				-- Allocation plan:
				-- 0:{}
				--	=> {
				--		TID_SpeedPID_t1,
				--		TID_BalanceSTM_t5,
				--		TID_AnglePID_t1,
				--		TID_BalanceSTM_t0,
				--		TID_BalanceSTM_t3,
				--		TID_AnglePID_t0,
				--		TID_BalanceSTM_t8,
				--		TID_BalanceSTM_t13,
				--		TID_RotationPID_t0,
				--		TID_BalanceSTM_t7,
				--		TID_BalanceSTM_t11,
				--		TID_SpeedPID_t0,
				--		TID_BalanceSTM_t2,
				--		TID_SpeedPID_t2}
				-- 2:{currAngle,maxAngle}
				--	=> {
				--		TID_BalanceSTM_t9,
				--		TID_BalanceSTM_t10}
				-- 1:{loopTime}
				--	=> {
				--		TID_BalanceSTM_t12}
				-- 3:{rotationCount,rotationUpdate}
				--	=> {
				--		TID_BalanceSTM_t6,
				--		TID_BalanceSTM_t14}
				-- 4:{speedCount,speedUpdate}
				--	=> {
				--		TID_BalanceSTM_t4,
				--		TID_BalanceSTM_t1}
				
				-- Memory transition processes
				MemoryTransitions_opt_0(id__) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   OP_SpeedPID::internal__!OP_SpeedPID::TID_SpeedPID_t1 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t5 -> Update
						 	   []
						 	   OP_AnglePID::internal__!OP_AnglePID::TID_AnglePID_t1 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t0 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t3 -> Update
						 	   []
						 	   OP_AnglePID::internal__!OP_AnglePID::TID_AnglePID_t0 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t8 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t13 -> Update
						 	   []
						 	   OP_RotationPID::internal__!OP_RotationPID::TID_RotationPID_t0 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t7 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t11 -> Update
						 	   []
						 	   OP_SpeedPID::internal__!OP_SpeedPID::TID_SpeedPID_t0 -> Update
						 	   []
						 	   internal__!TID_BalanceSTM_t2 -> Update
						 	   []
						 	   OP_SpeedPID::internal__!OP_SpeedPID::TID_SpeedPID_t2 -> Update
					within
						Update
				)
				MemoryTransitions_opt_2(id__,
					 const_BalanceSTM_maxAngle) =
				(
					let
						Update = 
						get_currAngle?currAngle ->
						Current(id__,
							 currAngle)
						Current(id__,
							 currAngle)
						 	   = 
						 	   (((currAngle<=const_BalanceSTM_maxAngle) and (currAngle>=Neg(const_BalanceSTM_maxAngle, core_int))))&(internal__!TID_BalanceSTM_t9 -> Update)
						 	   []
						 	   (((currAngle>const_BalanceSTM_maxAngle) or (currAngle<Neg(const_BalanceSTM_maxAngle, core_int))))&(internal__!TID_BalanceSTM_t10 -> Update)
						 	   	 
						 	   	 []
						 	   	 set_currAngle?x__ -> Update
					within
						Update
				)
				MemoryTransitions_opt_1(id__,
					 const_BalanceSTM_loopTime) =
				(
					let
						Update = Current(id__)
						Current(id__)
						 	   = 
						 	   (true)&(internal__!TID_BalanceSTM_t12 -> Update)
					within
						Update
				)
				MemoryTransitions_opt_3(id__,
					 const_BalanceSTM_rotationUpdate) =
				(
					let
						Update = 
						get_rotationCount?rotationCount ->
						Current(id__,
							 rotationCount)
						Current(id__,
							 rotationCount)
						 	   = 
						 	   ((rotationCount>=const_BalanceSTM_rotationUpdate))&(internal__!TID_BalanceSTM_t6 -> Update)
						 	   []
						 	   ((rotationCount<const_BalanceSTM_rotationUpdate))&(internal__!TID_BalanceSTM_t14 -> Update)
						 	   	 
						 	   	 []
						 	   	 set_rotationCount?x__ -> Update
					within
						Update
				)
				MemoryTransitions_opt_4(id__,
					 const_BalanceSTM_speedUpdate) =
				(
					let
						Update = 
						get_speedCount?speedCount ->
						Current(id__,
							 speedCount)
						Current(id__,
							 speedCount)
						 	   = 
						 	   ((speedCount<const_BalanceSTM_speedUpdate))&(internal__!TID_BalanceSTM_t4 -> Update)
						 	   []
						 	   ((speedCount>=const_BalanceSTM_speedUpdate))&(internal__!TID_BalanceSTM_t1 -> Update)
						 	   	 
						 	   	 []
						 	   	 set_speedCount?x__ -> Update
					within
						Update
				)
				
				-- Memory cell processes
				Memory_opt_rotationCount(x__) = ( 
					get_rotationCount!x__ -> Memory_opt_rotationCount(x__)
					[]
					set_rotationCount?x__ -> Memory_opt_rotationCount(x__)
				)
				Memory_opt_currAngle(x__) = ( 
					get_currAngle!x__ -> Memory_opt_currAngle(x__)
					[]
					set_currAngle?x__ -> Memory_opt_currAngle(x__)
				)
				Memory_opt_speedOutput(x__) = ( 
					get_speedOutput!x__ -> Memory_opt_speedOutput(x__)
					[]
					set_speedOutput?x__ -> Memory_opt_speedOutput(x__)
				)
				Memory_opt_currLeftVel(x__) = ( 
					get_currLeftVel!x__ -> Memory_opt_currLeftVel(x__)
					[]
					set_currLeftVel?x__ -> Memory_opt_currLeftVel(x__)
				)
				Memory_opt_angleOutput(x__) = ( 
					get_angleOutput!x__ -> Memory_opt_angleOutput(x__)
					[]
					set_angleOutput?x__ -> Memory_opt_angleOutput(x__)
				)
				Memory_opt_rotationOutput(x__) = ( 
					get_rotationOutput!x__ -> Memory_opt_rotationOutput(x__)
					[]
					set_rotationOutput?x__ -> Memory_opt_rotationOutput(x__)
				)
				Memory_opt_currRightVel(x__) = ( 
					get_currRightVel!x__ -> Memory_opt_currRightVel(x__)
					[]
					set_currRightVel?x__ -> Memory_opt_currRightVel(x__)
				)
				Memory_opt_speedCount(x__) = ( 
					get_speedCount!x__ -> Memory_opt_speedCount(x__)
					[]
					set_speedCount?x__ -> Memory_opt_speedCount(x__)
				)
				Memory_opt_currGyroX(x__) = ( 
					get_currGyroX!x__ -> Memory_opt_currGyroX(x__)
					[]
					set_currGyroX?x__ -> Memory_opt_currGyroX(x__)
				)
				Memory_opt_speedIntegral(x__) = ( 
					get_speedIntegral!x__ -> Memory_opt_speedIntegral(x__)
					[]
					set_speedIntegral?x__ -> Memory_opt_speedIntegral(x__)
				)
				Memory_opt_currGyroY(x__) = ( 
					get_currGyroY!x__ -> Memory_opt_currGyroY(x__)
					[]
					set_currGyroY?x__ -> Memory_opt_currGyroY(x__)
				)
				Memory_opt_currGyroZ(x__) = ( 
					get_currGyroZ!x__ -> Memory_opt_currGyroZ(x__)
					[]
					set_currGyroZ?x__ -> Memory_opt_currGyroZ(x__)
				)
				
				-- Composition of memory, StateMachine and Memory transition processes
				
				MemorySTM_opt(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) =
					dbisim(
					  sbisim(Memory_opt_currAngle(0)
					      	[| {|set_currAngle,get_currAngle|} |] 
					      	sbisim(	
					      	  dbisim(
					      	    sbisim(sbisim(	
					      	      dbisim(
					      	        sbisim(dbisim(
					      	          sbisim(Memory_opt_rotationCount(0)
					      	              	[| {|set_rotationCount,get_rotationCount|} |] 
					      	              	sbisim(	
					      	              	  dbisim(
					      	              	    sbisim(dbisim(
					      	              	      sbisim(Memory_opt_speedCount(0)
					      	              	          	[| {|set_speedCount,get_speedCount|} |] 
					      	              	          	sbisim(	
					      	              	          	  dbisim(
					      	              	          	    sbisim(sbisim(	
					      	              	          	      dbisim(
					      	              	          	        sbisim(dbisim(sbisim(OP_AnglePID::Memory_opt_newError(0)
					      	              	          	              	[| {|OP_AnglePID::set_newError,OP_AnglePID::get_newError|} |] 
					      	              	          	              	dbisim(sbisim(OP_AnglePID::Memory_opt_diff(0)
					      	              	          	              	      	[| {|OP_AnglePID::get_diff,OP_AnglePID::set_diff|} |] 
					      	              	          	              	      	dbisim(sbisim(Memory_opt_speedOutput(0)
					      	              	          	              	      	      	[| {|get_speedOutput,set_speedOutput|} |] 
					      	              	          	              	      	      	dbisim(sbisim(Memory_opt_currLeftVel(0)
					      	              	          	              	      	      	      	[| {|get_currLeftVel,set_currLeftVel|} |] 
					      	              	          	              	      	      	      	dbisim(sbisim(Memory_opt_angleOutput(0)
					      	              	          	              	      	      	      	      	[| {|set_angleOutput,get_angleOutput|} |] 
					      	              	          	              	      	      	      	      	dbisim(sbisim(Memory_opt_rotationOutput(0)
					      	              	          	              	      	      	      	      	      	[| {|set_rotationOutput,get_rotationOutput|} |] 
					      	              	          	              	      	      	      	      	      	dbisim(sbisim(Memory_opt_currRightVel(0)
					      	              	          	              	      	      	      	      	      	      	[| {|get_currRightVel,set_currRightVel|} |] 
					      	              	          	              	      	      	      	      	      	      	dbisim(sbisim(OP_RotationPID::Memory_opt_diff(0)
					      	              	          	              	      	      	      	      	      	      	      	[| {|OP_RotationPID::set_diff,OP_RotationPID::get_diff|} |] 
					      	              	          	              	      	      	      	      	      	      	      	dbisim(sbisim(OP_SpeedPID::Memory_opt_newError(0)
					      	              	          	              	      	      	      	      	      	      	      	      	[| {|OP_SpeedPID::set_newError,OP_SpeedPID::get_newError|} |] 
					      	              	          	              	      	      	      	      	      	      	      	      	dbisim(sbisim(Memory_opt_currGyroX(0)
					      	              	          	              	      	      	      	      	      	      	      	      	      	[| {|set_currGyroX,get_currGyroX|} |] 
					      	              	          	              	      	      	      	      	      	      	      	      	      	dbisim(sbisim(Memory_opt_speedIntegral(0)
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	[| {|set_speedIntegral,get_speedIntegral|} |] 
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	dbisim(sbisim(Memory_opt_currGyroY(0)
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	[| {|set_currGyroY,get_currGyroY|} |] 
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	dbisim(sbisim(Memory_opt_currGyroZ(0)
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      	[| {|get_currGyroZ,set_currGyroZ|} |] 
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      	STM_core(id__,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_maxAngle,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_loopTime,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_startupDelay,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_speedUpdate,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_rotationUpdate,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_angleBudget,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_speedBudget,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_rotationBudget,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_BalanceSTM_motorBudget,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_RotationPID_D,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_SpeedPID_P,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_SpeedPID_I,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_SpeedPID_maxIntegral,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_AnglePID_P,
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      			    const_AnglePID_D)
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      	)\ {|get_currGyroZ,set_currGyroZ|}
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      	)\ {|set_currGyroY,get_currGyroY|}
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	      	      	      	      	      	)\ {|set_speedIntegral,get_speedIntegral|}
					      	              	          	              	      	      	      	      	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	      	      	      	      	)\ {|set_currGyroX,get_currGyroX|}
					      	              	          	              	      	      	      	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	      	      	      	)\ {|OP_SpeedPID::set_newError,OP_SpeedPID::get_newError|}
					      	              	          	              	      	      	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	      	      	)\ {|OP_RotationPID::set_diff,OP_RotationPID::get_diff|}
					      	              	          	              	      	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	      	)\ {|get_currRightVel,set_currRightVel|}
					      	              	          	              	      	      	      	      	      	      )
					      	              	          	              	      	      	      	      	      	)\ {|set_rotationOutput,get_rotationOutput|}
					      	              	          	              	      	      	      	      	      )
					      	              	          	              	      	      	      	      	)\ {|set_angleOutput,get_angleOutput|}
					      	              	          	              	      	      	      	      )
					      	              	          	              	      	      	      	)\ {|get_currLeftVel,set_currLeftVel|}
					      	              	          	              	      	      	      )
					      	              	          	              	      	      	)\ {|get_speedOutput,set_speedOutput|}
					      	              	          	              	      	      )
					      	              	          	              	      	)\ {|OP_AnglePID::get_diff,OP_AnglePID::set_diff|}
					      	              	          	              	      )
					      	              	          	              	)\ {|OP_AnglePID::set_newError,OP_AnglePID::get_newError|}
					      	              	          	              )
					      	              	          	          	  [| {|OP_RotationPID::internal__.OP_RotationPID::TID_RotationPID_t0,internal__.TID_BalanceSTM_t13,internal__.TID_BalanceSTM_t8,internal__.TID_BalanceSTM_t7,OP_AnglePID::internal__.OP_AnglePID::TID_AnglePID_t0,OP_AnglePID::internal__.OP_AnglePID::TID_AnglePID_t1,internal__.TID_BalanceSTM_t11,OP_SpeedPID::internal__.OP_SpeedPID::TID_SpeedPID_t1,internal__.TID_BalanceSTM_t5,OP_SpeedPID::internal__.OP_SpeedPID::TID_SpeedPID_t0,internal__.TID_BalanceSTM_t3,internal__.TID_BalanceSTM_t2,OP_SpeedPID::internal__.OP_SpeedPID::TID_SpeedPID_t2,internal__.TID_BalanceSTM_t0|} |]
					      	              	          	          	  MemoryTransitions_opt_0(id__)
					      	              	          	          	  )\{|OP_RotationPID::internal__.OP_RotationPID::TID_RotationPID_t0,internal__.TID_BalanceSTM_t13,internal__.TID_BalanceSTM_t8,internal__.TID_BalanceSTM_t7,OP_AnglePID::internal__.OP_AnglePID::TID_AnglePID_t0,OP_AnglePID::internal__.OP_AnglePID::TID_AnglePID_t1,internal__.TID_BalanceSTM_t11,OP_SpeedPID::internal__.OP_SpeedPID::TID_SpeedPID_t1,internal__.TID_BalanceSTM_t5,OP_SpeedPID::internal__.OP_SpeedPID::TID_SpeedPID_t0,internal__.TID_BalanceSTM_t3,internal__.TID_BalanceSTM_t2,OP_SpeedPID::internal__.OP_SpeedPID::TID_SpeedPID_t2,internal__.TID_BalanceSTM_t0|})
					      	              	          	          )
					      	              	          	      	  [| {|set_speedCount,internal__.TID_BalanceSTM_t4,internal__.TID_BalanceSTM_t1|} |]
					      	              	          	      	  MemoryTransitions_opt_4(id__,
					      	              	          	      	  	 const_BalanceSTM_speedUpdate)
					      	              	          	      	  )\{|internal__.TID_BalanceSTM_t4,internal__.TID_BalanceSTM_t1|})
					      	              	          	      )
					      	              	          	) \ {|set_speedCount,get_speedCount|}
					      	              	          )
					      	              	      	  [| {|set_rotationCount,internal__.TID_BalanceSTM_t14,internal__.TID_BalanceSTM_t6|} |]
					      	              	      	  MemoryTransitions_opt_3(id__,
					      	              	      	  	 const_BalanceSTM_rotationUpdate)
					      	              	      	  )\{|internal__.TID_BalanceSTM_t14,internal__.TID_BalanceSTM_t6|})
					      	              	      )
					      	              	) \ {|set_rotationCount,get_rotationCount|}
					      	              )
					      	          	  [| {|internal__.TID_BalanceSTM_t12|} |]
					      	          	  MemoryTransitions_opt_1(id__,
					      	          	  	 const_BalanceSTM_loopTime)
					      	          	  )\{|internal__.TID_BalanceSTM_t12|})
					      	          )
					      	      	  [| {|internal__.TID_BalanceSTM_t9,set_currAngle,internal__.TID_BalanceSTM_t10|} |]
					      	      	  MemoryTransitions_opt_2(id__,
					      	      	  	 const_BalanceSTM_maxAngle)
					      	      	  )\{|internal__.TID_BalanceSTM_t9,internal__.TID_BalanceSTM_t10|})
					      	      )
					      	) \ {|set_currAngle,get_currAngle|}
					      )
				
				-- main process
				
				MachineMemorySyncSet = Union({
					union(
						union(
							{|get_currAngle,set_currAngle,
							get_currGyroX,set_currGyroX,
							get_currGyroY,set_currGyroY,
							get_currGyroZ,set_currGyroZ,
							get_currLeftVel,set_currLeftVel,
							get_currRightVel,set_currRightVel,
							get_speedCount,set_speedCount,
							get_rotationCount,set_rotationCount,
							get_angleOutput,set_angleOutput,
							get_speedIntegral,set_speedIntegral,
							get_speedOutput,set_speedOutput,
							get_rotationOutput,set_rotationOutput|},
							{||}
						)
							
						,
						{|internal__.TID_BalanceSTM_t1,
						internal__.TID_BalanceSTM_t2,
						internal__.TID_BalanceSTM_t3,
						internal__.TID_BalanceSTM_t4,
						internal__.TID_BalanceSTM_t8,
						internal__.TID_BalanceSTM_t9,
						internal__.TID_BalanceSTM_t10,
						internal__.TID_BalanceSTM_t12,
						internal__.TID_BalanceSTM_t7,
						internal__.TID_BalanceSTM_t11,
						internal__.TID_BalanceSTM_t0,
						internal__.TID_BalanceSTM_t13,
						internal__.TID_BalanceSTM_t5,
						internal__.TID_BalanceSTM_t6,
						internal__.TID_BalanceSTM_t14|}
					)
					, OP_RotationPID::MachineMemorySyncSet
					, OP_SpeedPID::MachineMemorySyncSet
					, OP_AnglePID::MachineMemorySyncSet
				})
				
				MachineMemoryHidingSet = Union({
					union(
						{|get_currAngle,set_currAngle,
						get_currGyroX,set_currGyroX,
						get_currGyroY,set_currGyroY,
						get_currGyroZ,set_currGyroZ,
						get_currLeftVel,set_currLeftVel,
						get_currRightVel,set_currRightVel,
						get_speedCount,set_speedCount,
						get_rotationCount,set_rotationCount,
						get_angleOutput,set_angleOutput,
						get_speedIntegral,set_speedIntegral,
						get_speedOutput,set_speedOutput,
						get_rotationOutput,set_rotationOutput|},
						{||}
					)
					, OP_RotationPID::MachineMemoryHidingSet
					, OP_SpeedPID::MachineMemoryHidingSet
					, OP_AnglePID::MachineMemoryHidingSet
				})
				
				MachineInternalEvents = {|
					internal__
					, OP_RotationPID::internal__
					, OP_SpeedPID::internal__
					, OP_AnglePID::internal__
				|}
				
				AUX(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = (
					(
						STM(id__,
								    const_BalanceSTM_maxAngle,
								    const_BalanceSTM_loopTime,
								    const_BalanceSTM_startupDelay,
								    const_BalanceSTM_speedUpdate,
								    const_BalanceSTM_rotationUpdate,
								    const_BalanceSTM_angleBudget,
								    const_BalanceSTM_speedBudget,
								    const_BalanceSTM_rotationBudget,
								    const_BalanceSTM_motorBudget,
								    const_RotationPID_D,
								    const_SpeedPID_P,
								    const_SpeedPID_I,
								    const_SpeedPID_maxIntegral,
								    const_AnglePID_P,
								    const_AnglePID_D)
							[|MachineMemorySyncSet|]
						sbisim(diamond(MemoryN(id__, const_BalanceSTM_maxAngle, const_BalanceSTM_loopTime, const_BalanceSTM_startupDelay, const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate, const_BalanceSTM_angleBudget, const_BalanceSTM_speedBudget, const_BalanceSTM_rotationBudget, const_BalanceSTM_motorBudget)))
					)[[
						leftMotorVelocity__.x____ <- leftMotorVelocity,
						rightMotorVelocity__.x____ <- rightMotorVelocity,
						angle__.x____ <- angle,
						gyroX__.x____ <- gyroX,
						gyroY__.x____ <- gyroY,
						gyroZ__.x____ <- gyroZ
						| x____ <- TIDS
					]]
					\MachineMemoryHidingSet
				)
				[|{|terminate|}|>SKIP\MachineInternalEvents
				
				
				STM_core(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					sbisim(diamond(STM(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)))
					
				AUX_opt(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = 
					(MemorySTM_opt(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)
					)[[
						leftMotorVelocity__.x____ <- leftMotorVelocity,
						rightMotorVelocity__.x____ <- rightMotorVelocity,
						angle__.x____ <- angle,
						gyroX__.x____ <- gyroX,
						gyroY__.x____ <- gyroY,
						gyroZ__.x____ <- gyroZ
						| x____ <- TIDS
					]]
					[|{|terminate|}|>SKIP\MachineInternalEvents
			
				-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
						
				FVS__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = AUX_opt(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D)
				Dunopt__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = AUX(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) \ internal_events
				D__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = AUX_opt(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) \ internal_events
				O__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = sbisim(diamond(D__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D)))
				VS__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = ShowV(FVS__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D))
				VS_O__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = sbisim(diamond(VS__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D)))
				HEXT__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) = O__(id__,
						    const_BalanceSTM_maxAngle,
						    const_BalanceSTM_loopTime,
						    const_BalanceSTM_startupDelay,
						    const_BalanceSTM_speedUpdate,
						    const_BalanceSTM_rotationUpdate,
						    const_BalanceSTM_angleBudget,
						    const_BalanceSTM_speedBudget,
						    const_BalanceSTM_rotationBudget,
						    const_BalanceSTM_motorBudget,
						    const_RotationPID_D,
						    const_SpeedPID_P,
						    const_SpeedPID_I,
						    const_SpeedPID_maxIntegral,
						    const_AnglePID_P,
						    const_AnglePID_D) [|shared_variable_events|] SKIP	
			endmodule
						
			-- declaring controller events
			channel leftMotorVelocity: InOut.core_real
			channel rightMotorVelocity: InOut.core_real
			channel angle: InOut.core_real
			channel gyroX: InOut.core_real
			channel gyroY: InOut.core_real
			channel gyroZ: InOut.core_real
							
	
		
			channel terminate
		
			-- declaring controller memory
			Memory(id__) = SKIP
			-- declaring controller termination channel
	
		
			D__(id__,
					    const_Segway_SegwayController_stm_ref0_maxAngle,
					    const_Segway_SegwayController_stm_ref0_loopTime,
					    const_Segway_SegwayController_stm_ref0_startupDelay,
					    const_Segway_SegwayController_stm_ref0_speedUpdate,
					    const_Segway_SegwayController_stm_ref0_rotationUpdate,
					    const_Segway_SegwayController_stm_ref0_angleBudget,
					    const_Segway_SegwayController_stm_ref0_speedBudget,
					    const_Segway_SegwayController_stm_ref0_rotationBudget,
					    const_Segway_SegwayController_stm_ref0_motorBudget,
					   	const_Segway_SegwayController_op_ref0_P,
					   	const_Segway_SegwayController_op_ref0_D,
					   	const_Segway_SegwayController_op_ref1_P,
					   	const_Segway_SegwayController_op_ref1_I,
					   	const_Segway_SegwayController_op_ref1_maxIntegral,
					   	const_Segway_SegwayController_op_ref2_D) = (
				(
					let
						const_BalanceSTM_maxAngle = const_Segway_SegwayController_stm_ref0_maxAngle
						const_BalanceSTM_loopTime = const_Segway_SegwayController_stm_ref0_loopTime
						const_BalanceSTM_startupDelay = const_Segway_SegwayController_stm_ref0_startupDelay
						const_BalanceSTM_speedUpdate = const_Segway_SegwayController_stm_ref0_speedUpdate
						const_BalanceSTM_rotationUpdate = const_Segway_SegwayController_stm_ref0_rotationUpdate
						const_BalanceSTM_angleBudget = const_Segway_SegwayController_stm_ref0_angleBudget
						const_BalanceSTM_speedBudget = const_Segway_SegwayController_stm_ref0_speedBudget
						const_BalanceSTM_rotationBudget = const_Segway_SegwayController_stm_ref0_rotationBudget
						const_BalanceSTM_motorBudget = const_Segway_SegwayController_stm_ref0_motorBudget
						const_RotationPID_D = const_Segway_SegwayController_op_ref2_D
						const_SpeedPID_P = const_Segway_SegwayController_op_ref1_P
						const_SpeedPID_I = const_Segway_SegwayController_op_ref1_I
						const_SpeedPID_maxIntegral = const_Segway_SegwayController_op_ref1_maxIntegral
						const_AnglePID_P = const_Segway_SegwayController_op_ref0_P
						const_AnglePID_D = const_Segway_SegwayController_op_ref0_D
					within 
					stm_ref0::D__(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::leftMotorVelocity <- leftMotorVelocity,
						stm_ref0::rightMotorVelocity <- rightMotorVelocity,
						stm_ref0::angle <- angle,
						stm_ref0::gyroX <- gyroX,
						stm_ref0::gyroY <- gyroY,
						stm_ref0::gyroZ <- gyroZ,
						stm_ref0::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
						stm_ref0::setRightMotorSpeedCall <- setRightMotorSpeedCall,
						stm_ref0::disableInterruptsCall <- disableInterruptsCall,
						stm_ref0::enableInterruptsCall <- enableInterruptsCall
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
						
			-- VS version
			VS__(id__,
					    const_Segway_SegwayController_stm_ref0_maxAngle,
					    const_Segway_SegwayController_stm_ref0_loopTime,
					    const_Segway_SegwayController_stm_ref0_startupDelay,
					    const_Segway_SegwayController_stm_ref0_speedUpdate,
					    const_Segway_SegwayController_stm_ref0_rotationUpdate,
					    const_Segway_SegwayController_stm_ref0_angleBudget,
					    const_Segway_SegwayController_stm_ref0_speedBudget,
					    const_Segway_SegwayController_stm_ref0_rotationBudget,
					    const_Segway_SegwayController_stm_ref0_motorBudget,
					   	const_Segway_SegwayController_op_ref0_P,
					   	const_Segway_SegwayController_op_ref0_D,
					   	const_Segway_SegwayController_op_ref1_P,
					   	const_Segway_SegwayController_op_ref1_I,
					   	const_Segway_SegwayController_op_ref1_maxIntegral,
					   	const_Segway_SegwayController_op_ref2_D) = (
				(
					let
						const_BalanceSTM_maxAngle = const_Segway_SegwayController_stm_ref0_maxAngle
						const_BalanceSTM_loopTime = const_Segway_SegwayController_stm_ref0_loopTime
						const_BalanceSTM_startupDelay = const_Segway_SegwayController_stm_ref0_startupDelay
						const_BalanceSTM_speedUpdate = const_Segway_SegwayController_stm_ref0_speedUpdate
						const_BalanceSTM_rotationUpdate = const_Segway_SegwayController_stm_ref0_rotationUpdate
						const_BalanceSTM_angleBudget = const_Segway_SegwayController_stm_ref0_angleBudget
						const_BalanceSTM_speedBudget = const_Segway_SegwayController_stm_ref0_speedBudget
						const_BalanceSTM_rotationBudget = const_Segway_SegwayController_stm_ref0_rotationBudget
						const_BalanceSTM_motorBudget = const_Segway_SegwayController_stm_ref0_motorBudget
						const_RotationPID_D = const_Segway_SegwayController_op_ref2_D
						const_SpeedPID_P = const_Segway_SegwayController_op_ref1_P
						const_SpeedPID_I = const_Segway_SegwayController_op_ref1_I
						const_SpeedPID_maxIntegral = const_Segway_SegwayController_op_ref1_maxIntegral
						const_AnglePID_P = const_Segway_SegwayController_op_ref0_P
						const_AnglePID_D = const_Segway_SegwayController_op_ref0_D
					within 
					stm_ref0::VS__(id__,
							    const_BalanceSTM_maxAngle,
							    const_BalanceSTM_loopTime,
							    const_BalanceSTM_startupDelay,
							    const_BalanceSTM_speedUpdate,
							    const_BalanceSTM_rotationUpdate,
							    const_BalanceSTM_angleBudget,
							    const_BalanceSTM_speedBudget,
							    const_BalanceSTM_rotationBudget,
							    const_BalanceSTM_motorBudget,
							    const_RotationPID_D,
							    const_SpeedPID_P,
							    const_SpeedPID_I,
							    const_SpeedPID_maxIntegral,
							    const_AnglePID_P,
							    const_AnglePID_D)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::leftMotorVelocity <- leftMotorVelocity,
						stm_ref0::rightMotorVelocity <- rightMotorVelocity,
						stm_ref0::angle <- angle,
						stm_ref0::gyroX <- gyroX,
						stm_ref0::gyroY <- gyroY,
						stm_ref0::gyroZ <- gyroZ,
						stm_ref0::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
						stm_ref0::setRightMotorSpeedCall <- setRightMotorSpeedCall,
						stm_ref0::disableInterruptsCall <- disableInterruptsCall,
						stm_ref0::enableInterruptsCall <- enableInterruptsCall
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP			
	
						
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__,
					    const_Segway_SegwayController_stm_ref0_maxAngle,
					    const_Segway_SegwayController_stm_ref0_loopTime,
					    const_Segway_SegwayController_stm_ref0_startupDelay,
					    const_Segway_SegwayController_stm_ref0_speedUpdate,
					    const_Segway_SegwayController_stm_ref0_rotationUpdate,
					    const_Segway_SegwayController_stm_ref0_angleBudget,
					    const_Segway_SegwayController_stm_ref0_speedBudget,
					    const_Segway_SegwayController_stm_ref0_rotationBudget,
					    const_Segway_SegwayController_stm_ref0_motorBudget,
					   	const_Segway_SegwayController_op_ref0_P,
					   	const_Segway_SegwayController_op_ref0_D,
					   	const_Segway_SegwayController_op_ref1_P,
					   	const_Segway_SegwayController_op_ref1_I,
					   	const_Segway_SegwayController_op_ref1_maxIntegral,
					   	const_Segway_SegwayController_op_ref2_D) = sbisim(
				diamond(
					(
						(
							let
								const_BalanceSTM_maxAngle = const_Segway_SegwayController_stm_ref0_maxAngle
								const_BalanceSTM_loopTime = const_Segway_SegwayController_stm_ref0_loopTime
								const_BalanceSTM_startupDelay = const_Segway_SegwayController_stm_ref0_startupDelay
								const_BalanceSTM_speedUpdate = const_Segway_SegwayController_stm_ref0_speedUpdate
								const_BalanceSTM_rotationUpdate = const_Segway_SegwayController_stm_ref0_rotationUpdate
								const_BalanceSTM_angleBudget = const_Segway_SegwayController_stm_ref0_angleBudget
								const_BalanceSTM_speedBudget = const_Segway_SegwayController_stm_ref0_speedBudget
								const_BalanceSTM_rotationBudget = const_Segway_SegwayController_stm_ref0_rotationBudget
								const_BalanceSTM_motorBudget = const_Segway_SegwayController_stm_ref0_motorBudget
								const_RotationPID_D = const_Segway_SegwayController_op_ref2_D
								const_SpeedPID_P = const_Segway_SegwayController_op_ref1_P
								const_SpeedPID_I = const_Segway_SegwayController_op_ref1_I
								const_SpeedPID_maxIntegral = const_Segway_SegwayController_op_ref1_maxIntegral
								const_AnglePID_P = const_Segway_SegwayController_op_ref0_P
								const_AnglePID_D = const_Segway_SegwayController_op_ref0_D
							within 
							stm_ref0::O__(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::leftMotorVelocity <- leftMotorVelocity,
								stm_ref0::rightMotorVelocity <- rightMotorVelocity,
								stm_ref0::angle <- angle,
								stm_ref0::gyroX <- gyroX,
								stm_ref0::gyroY <- gyroY,
								stm_ref0::gyroZ <- gyroZ,
								stm_ref0::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
								stm_ref0::setRightMotorSpeedCall <- setRightMotorSpeedCall,
								stm_ref0::disableInterruptsCall <- disableInterruptsCall,
								stm_ref0::enableInterruptsCall <- enableInterruptsCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
						
			-- VS_O version
			VS_O__(id__,
					    const_Segway_SegwayController_stm_ref0_maxAngle,
					    const_Segway_SegwayController_stm_ref0_loopTime,
					    const_Segway_SegwayController_stm_ref0_startupDelay,
					    const_Segway_SegwayController_stm_ref0_speedUpdate,
					    const_Segway_SegwayController_stm_ref0_rotationUpdate,
					    const_Segway_SegwayController_stm_ref0_angleBudget,
					    const_Segway_SegwayController_stm_ref0_speedBudget,
					    const_Segway_SegwayController_stm_ref0_rotationBudget,
					    const_Segway_SegwayController_stm_ref0_motorBudget,
					   	const_Segway_SegwayController_op_ref0_P,
					   	const_Segway_SegwayController_op_ref0_D,
					   	const_Segway_SegwayController_op_ref1_P,
					   	const_Segway_SegwayController_op_ref1_I,
					   	const_Segway_SegwayController_op_ref1_maxIntegral,
					   	const_Segway_SegwayController_op_ref2_D) = sbisim(
				diamond(
					(
						(
							let
								const_BalanceSTM_maxAngle = const_Segway_SegwayController_stm_ref0_maxAngle
								const_BalanceSTM_loopTime = const_Segway_SegwayController_stm_ref0_loopTime
								const_BalanceSTM_startupDelay = const_Segway_SegwayController_stm_ref0_startupDelay
								const_BalanceSTM_speedUpdate = const_Segway_SegwayController_stm_ref0_speedUpdate
								const_BalanceSTM_rotationUpdate = const_Segway_SegwayController_stm_ref0_rotationUpdate
								const_BalanceSTM_angleBudget = const_Segway_SegwayController_stm_ref0_angleBudget
								const_BalanceSTM_speedBudget = const_Segway_SegwayController_stm_ref0_speedBudget
								const_BalanceSTM_rotationBudget = const_Segway_SegwayController_stm_ref0_rotationBudget
								const_BalanceSTM_motorBudget = const_Segway_SegwayController_stm_ref0_motorBudget
								const_RotationPID_D = const_Segway_SegwayController_op_ref2_D
								const_SpeedPID_P = const_Segway_SegwayController_op_ref1_P
								const_SpeedPID_I = const_Segway_SegwayController_op_ref1_I
								const_SpeedPID_maxIntegral = const_Segway_SegwayController_op_ref1_maxIntegral
								const_AnglePID_P = const_Segway_SegwayController_op_ref0_P
								const_AnglePID_D = const_Segway_SegwayController_op_ref0_D
							within 
							stm_ref0::VS_O__(id__,
									    const_BalanceSTM_maxAngle,
									    const_BalanceSTM_loopTime,
									    const_BalanceSTM_startupDelay,
									    const_BalanceSTM_speedUpdate,
									    const_BalanceSTM_rotationUpdate,
									    const_BalanceSTM_angleBudget,
									    const_BalanceSTM_speedBudget,
									    const_BalanceSTM_rotationBudget,
									    const_BalanceSTM_motorBudget,
									    const_RotationPID_D,
									    const_SpeedPID_P,
									    const_SpeedPID_I,
									    const_SpeedPID_maxIntegral,
									    const_AnglePID_P,
									    const_AnglePID_D)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::leftMotorVelocity <- leftMotorVelocity,
								stm_ref0::rightMotorVelocity <- rightMotorVelocity,
								stm_ref0::angle <- angle,
								stm_ref0::gyroX <- gyroX,
								stm_ref0::gyroY <- gyroY,
								stm_ref0::gyroZ <- gyroZ,
								stm_ref0::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
								stm_ref0::setRightMotorSpeedCall <- setRightMotorSpeedCall,
								stm_ref0::disableInterruptsCall <- disableInterruptsCall,
								stm_ref0::enableInterruptsCall <- enableInterruptsCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
				)
			)
			
			HEXT(id__,
					    const_Segway_SegwayController_stm_ref0_maxAngle,
					    const_Segway_SegwayController_stm_ref0_loopTime,
					    const_Segway_SegwayController_stm_ref0_startupDelay,
					    const_Segway_SegwayController_stm_ref0_speedUpdate,
					    const_Segway_SegwayController_stm_ref0_rotationUpdate,
					    const_Segway_SegwayController_stm_ref0_angleBudget,
					    const_Segway_SegwayController_stm_ref0_speedBudget,
					    const_Segway_SegwayController_stm_ref0_rotationBudget,
					    const_Segway_SegwayController_stm_ref0_motorBudget,
					   	const_Segway_SegwayController_op_ref0_P,
					   	const_Segway_SegwayController_op_ref0_D,
					   	const_Segway_SegwayController_op_ref1_P,
					   	const_Segway_SegwayController_op_ref1_I,
					   	const_Segway_SegwayController_op_ref1_maxIntegral,
					   	const_Segway_SegwayController_op_ref2_D) = O__(id__,
					    const_Segway_SegwayController_stm_ref0_maxAngle,
					    const_Segway_SegwayController_stm_ref0_loopTime,
					    const_Segway_SegwayController_stm_ref0_startupDelay,
					    const_Segway_SegwayController_stm_ref0_speedUpdate,
					    const_Segway_SegwayController_stm_ref0_rotationUpdate,
					    const_Segway_SegwayController_stm_ref0_angleBudget,
					    const_Segway_SegwayController_stm_ref0_speedBudget,
					    const_Segway_SegwayController_stm_ref0_rotationBudget,
					    const_Segway_SegwayController_stm_ref0_motorBudget,
					   	const_Segway_SegwayController_op_ref0_P,
					   	const_Segway_SegwayController_op_ref0_D,
					   	const_Segway_SegwayController_op_ref1_P,
					   	const_Segway_SegwayController_op_ref1_I,
					   	const_Segway_SegwayController_op_ref1_maxIntegral,
					   	const_Segway_SegwayController_op_ref2_D) [|shared_variable_events|] SKIP	
		endmodule
				
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D) = 		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						SegwayController::D__(id__,
								    const_Segway_SegwayController_stm_ref0_maxAngle,
								    const_Segway_SegwayController_stm_ref0_loopTime,
								    const_Segway_SegwayController_stm_ref0_startupDelay,
								    const_Segway_SegwayController_stm_ref0_speedUpdate,
								    const_Segway_SegwayController_stm_ref0_rotationUpdate,
								    const_Segway_SegwayController_stm_ref0_angleBudget,
								    const_Segway_SegwayController_stm_ref0_speedBudget,
								    const_Segway_SegwayController_stm_ref0_rotationBudget,
								    const_Segway_SegwayController_stm_ref0_motorBudget,
								   	const_Segway_SegwayController_op_ref0_P,
								   	const_Segway_SegwayController_op_ref0_D,
								   	const_Segway_SegwayController_op_ref1_P,
								   	const_Segway_SegwayController_op_ref1_I,
								   	const_Segway_SegwayController_op_ref1_maxIntegral,
								   	const_Segway_SegwayController_op_ref2_D)[[
							SegwayController::terminate <- terminate,
							SegwayController::angle <- angle,
							SegwayController::gyroX <- gyroX,
							SegwayController::gyroY <- gyroY,
							SegwayController::gyroZ <- gyroZ,
							SegwayController::leftMotorVelocity <- leftMotorVelocity,
							SegwayController::rightMotorVelocity <- rightMotorVelocity,
							SegwayController::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
							SegwayController::setRightMotorSpeedCall <- setRightMotorSpeedCall,
							SegwayController::disableInterruptsCall <- disableInterruptsCall,
							SegwayController::enableInterruptsCall <- enableInterruptsCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D) = 		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						SegwayController::VS__(id__,
								    const_Segway_SegwayController_stm_ref0_maxAngle,
								    const_Segway_SegwayController_stm_ref0_loopTime,
								    const_Segway_SegwayController_stm_ref0_startupDelay,
								    const_Segway_SegwayController_stm_ref0_speedUpdate,
								    const_Segway_SegwayController_stm_ref0_rotationUpdate,
								    const_Segway_SegwayController_stm_ref0_angleBudget,
								    const_Segway_SegwayController_stm_ref0_speedBudget,
								    const_Segway_SegwayController_stm_ref0_rotationBudget,
								    const_Segway_SegwayController_stm_ref0_motorBudget,
								   	const_Segway_SegwayController_op_ref0_P,
								   	const_Segway_SegwayController_op_ref0_D,
								   	const_Segway_SegwayController_op_ref1_P,
								   	const_Segway_SegwayController_op_ref1_I,
								   	const_Segway_SegwayController_op_ref1_maxIntegral,
								   	const_Segway_SegwayController_op_ref2_D)[[
							SegwayController::terminate <- terminate,
							SegwayController::angle <- angle,
							SegwayController::gyroX <- gyroX,
							SegwayController::gyroY <- gyroY,
							SegwayController::gyroZ <- gyroZ,
							SegwayController::leftMotorVelocity <- leftMotorVelocity,
							SegwayController::rightMotorVelocity <- rightMotorVelocity,
							SegwayController::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
							SegwayController::setRightMotorSpeedCall <- setRightMotorSpeedCall,
							SegwayController::disableInterruptsCall <- disableInterruptsCall,
							SegwayController::enableInterruptsCall <- enableInterruptsCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}	
	
	-- O version (optimised)
	
	O__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D) = sbisim(diamond(		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						SegwayController::O__(id__,
								    const_Segway_SegwayController_stm_ref0_maxAngle,
								    const_Segway_SegwayController_stm_ref0_loopTime,
								    const_Segway_SegwayController_stm_ref0_startupDelay,
								    const_Segway_SegwayController_stm_ref0_speedUpdate,
								    const_Segway_SegwayController_stm_ref0_rotationUpdate,
								    const_Segway_SegwayController_stm_ref0_angleBudget,
								    const_Segway_SegwayController_stm_ref0_speedBudget,
								    const_Segway_SegwayController_stm_ref0_rotationBudget,
								    const_Segway_SegwayController_stm_ref0_motorBudget,
								   	const_Segway_SegwayController_op_ref0_P,
								   	const_Segway_SegwayController_op_ref0_D,
								   	const_Segway_SegwayController_op_ref1_P,
								   	const_Segway_SegwayController_op_ref1_I,
								   	const_Segway_SegwayController_op_ref1_maxIntegral,
								   	const_Segway_SegwayController_op_ref2_D)[[
							SegwayController::terminate <- terminate,
							SegwayController::angle <- angle,
							SegwayController::gyroX <- gyroX,
							SegwayController::gyroY <- gyroY,
							SegwayController::gyroZ <- gyroZ,
							SegwayController::leftMotorVelocity <- leftMotorVelocity,
							SegwayController::rightMotorVelocity <- rightMotorVelocity,
							SegwayController::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
							SegwayController::setRightMotorSpeedCall <- setRightMotorSpeedCall,
							SegwayController::disableInterruptsCall <- disableInterruptsCall,
							SegwayController::enableInterruptsCall <- enableInterruptsCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}			
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D) = sbisim(diamond(		(
			(
				(SKIP)
					[|{||}|]
				(
					(
						SegwayController::VS_O__(id__,
								    const_Segway_SegwayController_stm_ref0_maxAngle,
								    const_Segway_SegwayController_stm_ref0_loopTime,
								    const_Segway_SegwayController_stm_ref0_startupDelay,
								    const_Segway_SegwayController_stm_ref0_speedUpdate,
								    const_Segway_SegwayController_stm_ref0_rotationUpdate,
								    const_Segway_SegwayController_stm_ref0_angleBudget,
								    const_Segway_SegwayController_stm_ref0_speedBudget,
								    const_Segway_SegwayController_stm_ref0_rotationBudget,
								    const_Segway_SegwayController_stm_ref0_motorBudget,
								   	const_Segway_SegwayController_op_ref0_P,
								   	const_Segway_SegwayController_op_ref0_D,
								   	const_Segway_SegwayController_op_ref1_P,
								   	const_Segway_SegwayController_op_ref1_I,
								   	const_Segway_SegwayController_op_ref1_maxIntegral,
								   	const_Segway_SegwayController_op_ref2_D)[[
							SegwayController::terminate <- terminate,
							SegwayController::angle <- angle,
							SegwayController::gyroX <- gyroX,
							SegwayController::gyroY <- gyroY,
							SegwayController::gyroZ <- gyroZ,
							SegwayController::leftMotorVelocity <- leftMotorVelocity,
							SegwayController::rightMotorVelocity <- rightMotorVelocity,
							SegwayController::setLeftMotorSpeedCall <- setLeftMotorSpeedCall,
							SegwayController::setRightMotorSpeedCall <- setRightMotorSpeedCall,
							SegwayController::disableInterruptsCall <- disableInterruptsCall,
							SegwayController::enableInterruptsCall <- enableInterruptsCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}			
	))	
endmodule		
