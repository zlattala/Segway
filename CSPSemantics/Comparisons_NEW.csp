--This file has EXACTLY the same assertions as the old one, but we 1. choose specifically only those assertions we want to run. 
--2. We use the semantics from the final comparison version. 

--Imports for Parallel version P1. 
include "FINAL_compsegway_csp/defs/file_AnglePID_defs.csp"
include "FINAL_compsegway_csp/defs/file_BalanceSTM_P1_defs.csp"
include "FINAL_compsegway_csp/defs/file_RotationPID_S_defs.csp"
include "FINAL_compsegway_csp/defs/file_Segway_P1.csp"
include "FINAL_compsegway_csp/defs/file_SpeedPID_defs.csp"
include "FINAL_compsegway_csp/defs/file_Segway_P1_defs.csp"
include "FINAL_compsegway_csp/defs/file_SpeedPID_S_defs.csp"
include "FINAL_compsegway_csp/defs/file_BalanceSTM_defs.csp"
include "FINAL_compsegway_csp/defs/file_RotationPID_defs.csp"
include "FINAL_compsegway_csp/defs/file_AnglePID_S_defs.csp"
include "FINAL_compsegway_csp/defs/file_Segway_defs.csp"
include "FINAL_compsegway_csp/defs/file_SegwayRP_defs.csp"

--Imports for Sequential version. 
include "FINAL_compsegway_csp/defs/file_Segway.csp"

--Imports for P2 parallel version. 
include "FINAL_compsegway_csp/defs/file_BalanceSTM_P2_defs.csp"
include "FINAL_compsegway_csp/defs/file_Segway_P2_defs.csp"
include "FINAL_compsegway_csp/defs/file_Segway_P2.csp"

--Imports for P3 parallel version 
include "FINAL_compsegway_csp/defs/file_Segway_P3_defs.csp"
include "FINAL_compsegway_csp/defs/file_Segway_P3.csp"

--Adding ANN controller semantics
include "ANN_semantics/ANNController_simplified.csp"

--Universal Imports
include "FINAL_compsegway_csp/defs/state_defs.csp"
include "FINAL_compsegway_csp/defs/core_defs.csp"
include "FINAL_compsegway_csp/defs/robochart_defs.csp"
include "FINAL_compsegway_csp/instantiations.csp"
channel r__

--PROCESS DEFINITIONS --

--SEQUENTIAL: Version4 semantics, Segway model --

-- generate Segway
P_Segway = let
	id__ = 0
	const_Segway_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_maxAngle
	const_Segway_SegwayController_stm_ref0_loopTime = const_BalanceSTM_loopTime
	const_Segway_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_startupDelay
	const_Segway_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_speedUpdate
	const_Segway_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_rotationUpdate
	const_Segway_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_angleBudget
	const_Segway_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_speedBudget
	const_Segway_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_rotationBudget
	const_Segway_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_motorBudget
		
	const_Segway_SegwayController_op_ref1_P = const_SpeedPID_P
	const_Segway_SegwayController_op_ref1_I = const_SpeedPID_I
	const_Segway_SegwayController_op_ref1_maxIntegral = const_SpeedPID_maxIntegral
	const_Segway_SegwayController_op_ref2_D = const_RotationPID_D
	const_Segway_SegwayController_op_ref0_P = 2
	const_Segway_SegwayController_op_ref0_D = const_AnglePID_D
	
within
	Segway::O__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D)

-- generate Segway_P1, which is the Parallel Segway module semantics, version 1. 
P_Segway_P1 = let
	id__ = 0
	const_Segway_P1_SegwayController_stm_ref1_P = const_AnglePID_S_P
	const_Segway_P1_SegwayController_stm_ref1_D = const_AnglePID_S_D
	const_Segway_P1_SegwayController_stm_ref2_P = const_SpeedPID_S_P
	const_Segway_P1_SegwayController_stm_ref2_I = const_SpeedPID_S_I
	const_Segway_P1_SegwayController_stm_ref2_maxIntegral = const_SpeedPID_S_maxIntegral
	const_Segway_P1_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_P1_maxAngle
	const_Segway_P1_SegwayController_stm_ref0_loopTime = const_BalanceSTM_P1_loopTime
	const_Segway_P1_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_P1_startupDelay
	const_Segway_P1_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_P1_speedUpdate
	const_Segway_P1_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_P1_rotationUpdate
	const_Segway_P1_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_P1_motorBudget
	const_Segway_P1_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_P1_angleBudget
	const_Segway_P1_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_P1_speedBudget
	const_Segway_P1_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_P1_rotationBudget
	const_Segway_P1_SegwayController_stm_ref3_D = const_RotationPID_S_D
		
	
within
	Segway_P1::O__(id__,
			    const_Segway_P1_SegwayController_stm_ref0_maxAngle,
			    const_Segway_P1_SegwayController_stm_ref0_loopTime,
			    const_Segway_P1_SegwayController_stm_ref0_startupDelay,
			    const_Segway_P1_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_P1_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_P1_SegwayController_stm_ref0_motorBudget,
			    const_Segway_P1_SegwayController_stm_ref0_angleBudget,
			    const_Segway_P1_SegwayController_stm_ref0_speedBudget,
			    const_Segway_P1_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_P1_SegwayController_stm_ref1_P,
			    const_Segway_P1_SegwayController_stm_ref1_D,
			    const_Segway_P1_SegwayController_stm_ref2_P,
			    const_Segway_P1_SegwayController_stm_ref2_I,
			    const_Segway_P1_SegwayController_stm_ref2_maxIntegral,
			    const_Segway_P1_SegwayController_stm_ref3_D)

--Generate process for segway sequential: 

-- generate Segway_P2
P_Segway_P2 = let
	id__ = 0
	const_Segway_P2_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_P2_maxAngle
	const_Segway_P2_SegwayController_stm_ref0_loopTime = const_BalanceSTM_P2_loopTime
	const_Segway_P2_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_P2_startupDelay
	const_Segway_P2_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_P2_speedUpdate
	const_Segway_P2_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_P2_rotationUpdate
	const_Segway_P2_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_P2_motorBudget
	const_Segway_P2_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_P2_angleBudget
	const_Segway_P2_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_P2_speedBudget
	const_Segway_P2_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_P2_rotationBudget
	const_Segway_P2_SegwayController_stm_ref2_P = const_SpeedPID_S_P
	const_Segway_P2_SegwayController_stm_ref2_I = const_SpeedPID_S_I
	const_Segway_P2_SegwayController_stm_ref2_maxIntegral = const_SpeedPID_S_maxIntegral
	const_Segway_P2_SegwayController_stm_ref1_P = const_AnglePID_S_P
	const_Segway_P2_SegwayController_stm_ref1_D = const_AnglePID_S_D
	const_Segway_P2_SegwayController_stm_ref3_D = const_RotationPID_S_D
		
	
within
	Segway_P2::O__(id__,
			    const_Segway_P2_SegwayController_stm_ref0_maxAngle,
			    const_Segway_P2_SegwayController_stm_ref0_loopTime,
			    const_Segway_P2_SegwayController_stm_ref0_startupDelay,
			    const_Segway_P2_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_P2_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_P2_SegwayController_stm_ref0_motorBudget,
			    const_Segway_P2_SegwayController_stm_ref0_angleBudget,
			    const_Segway_P2_SegwayController_stm_ref0_speedBudget,
			    const_Segway_P2_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_P2_SegwayController_stm_ref1_P,
			    const_Segway_P2_SegwayController_stm_ref1_D,
			    const_Segway_P2_SegwayController_stm_ref2_P,
			    const_Segway_P2_SegwayController_stm_ref2_I,
			    const_Segway_P2_SegwayController_stm_ref2_maxIntegral,
			    const_Segway_P2_SegwayController_stm_ref3_D)

--P3 Parallel segway

-- generate Segway_P3
P_Segway_P3 = let
	id__ = 0
	const_Segway_P3_AnglePID_C_stm_ref0_P = const_AnglePID_S_P
	const_Segway_P3_AnglePID_C_stm_ref0_D = const_AnglePID_S_D
	const_Segway_P3_SegwayController_stm_ref2_P = const_SpeedPID_S_P
	const_Segway_P3_SegwayController_stm_ref2_I = const_SpeedPID_S_I
	const_Segway_P3_SegwayController_stm_ref2_maxIntegral = const_SpeedPID_S_maxIntegral
	const_Segway_P3_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_P2_maxAngle
	const_Segway_P3_SegwayController_stm_ref0_loopTime = const_BalanceSTM_P2_loopTime
	const_Segway_P3_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_P2_startupDelay
	const_Segway_P3_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_P2_speedUpdate
	const_Segway_P3_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_P2_rotationUpdate
	const_Segway_P3_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_P2_motorBudget
	const_Segway_P3_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_P2_angleBudget
	const_Segway_P3_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_P2_speedBudget
	const_Segway_P3_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_P2_rotationBudget
	const_Segway_P3_SegwayController_stm_ref3_D = const_RotationPID_S_D
		
	
within
	Segway_P3::O__(id__,
			    const_Segway_P3_SegwayController_stm_ref0_maxAngle,
			    const_Segway_P3_SegwayController_stm_ref0_loopTime,
			    const_Segway_P3_SegwayController_stm_ref0_startupDelay,
			    const_Segway_P3_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_P3_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_P3_SegwayController_stm_ref0_motorBudget,
			    const_Segway_P3_SegwayController_stm_ref0_angleBudget,
			    const_Segway_P3_SegwayController_stm_ref0_speedBudget,
			    const_Segway_P3_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_P3_SegwayController_stm_ref2_P,
			    const_Segway_P3_SegwayController_stm_ref2_I,
			    const_Segway_P3_SegwayController_stm_ref2_maxIntegral,
			    const_Segway_P3_SegwayController_stm_ref3_D,
			    const_Segway_P3_AnglePID_C_stm_ref0_P,
			    const_Segway_P3_AnglePID_C_stm_ref0_D)


--RENAMED PARALLEL SEGWAYs, to be in line with Segway original names: --

P_Segway_P1_Renamed = P_Segway_P1[[
  Segway_P1::leftMotorVelocity <- Segway::leftMotorVelocity,
  Segway_P1::rightMotorVelocity <- Segway::rightMotorVelocity,
  Segway_P1::angle <- Segway::angle,
  Segway_P1::gyroX <- Segway::gyroX,
  Segway_P1::gyroY <- Segway::gyroY,
  Segway_P1::gyroZ <- Segway::gyroZ,
  Segway_P1::setLeftMotorSpeedCall <- Segway::setLeftMotorSpeedCall,
  Segway_P1::setRightMotorSpeedCall <- Segway::setRightMotorSpeedCall,
  Segway_P1::enableInterruptsCall <- Segway::enableInterruptsCall,
  Segway_P1::disableInterruptsCall <- Segway::disableInterruptsCall
  ]]
  
P_Segway_P2_Renamed = P_Segway_P2[[
  Segway_P2::leftMotorVelocity <- Segway::leftMotorVelocity,
  Segway_P2::rightMotorVelocity <- Segway::rightMotorVelocity,
  Segway_P2::angle <- Segway::angle,
  Segway_P2::gyroX <- Segway::gyroX,
  Segway_P2::gyroY <- Segway::gyroY,
  Segway_P2::gyroZ <- Segway::gyroZ,
  Segway_P2::setLeftMotorSpeedCall <- Segway::setLeftMotorSpeedCall,
  Segway_P2::setRightMotorSpeedCall <- Segway::setRightMotorSpeedCall,
  Segway_P2::enableInterruptsCall <- Segway::enableInterruptsCall,
  Segway_P2::disableInterruptsCall <- Segway::disableInterruptsCall
  ]]
  
P_Segway_P3_Renamed = P_Segway_P3[[
  Segway_P3::leftMotorVelocity <- Segway::leftMotorVelocity,
  Segway_P3::rightMotorVelocity <- Segway::rightMotorVelocity,
  Segway_P3::angle <- Segway::angle,
  Segway_P3::gyroX <- Segway::gyroX,
  Segway_P3::gyroY <- Segway::gyroY,
  Segway_P3::gyroZ <- Segway::gyroZ,
  Segway_P3::setLeftMotorSpeedCall <- Segway::setLeftMotorSpeedCall,
  Segway_P3::setRightMotorSpeedCall <- Segway::setRightMotorSpeedCall,
  Segway_P3::enableInterruptsCall <- Segway::enableInterruptsCall,
  Segway_P3::disableInterruptsCall <- Segway::disableInterruptsCall
  ]]
 
--ASSERTIONS --

--BASIC ASSERTIONS --
assert P_Segway :[deadlock-free] --this passes.
assert P_Segway_P1 :[deadlock-free]	
assert P_Segway_P2 :[deadlock-free]	--This fails? How in the hell did we prove equivalence? 
assert P_Segway_P3 :[deadlock-free] --FAILS, does it fail on segway too? 


--REFINEMENT/EQUALITY ASSERTIONS --

--This should hold. THIS PASSES. 20/08/23, passes. 
assert P_Segway_P1_Renamed [T= P_Segway
--This won't hold. FAILED. 20/08/23, 
assert P_Segway [T= P_Segway_P1_Renamed


--P2 and Segway assertions. There is still a deadlock in P2 also? 
--This should hold. HOLDS. Passes, 20/08/23
assert P_Segway_P2_Renamed [T= P_Segway
--This should hold. HOLDS. Passes, 20/08/23
assert P_Segway [T= P_Segway_P2_Renamed

--This should hold. 
assert P_Segway_P3_Renamed [T= P_Segway  --PASSED 20/08/23
assert P_Segway [T= P_Segway_P3_Renamed --PASSED 20/08/23

--ANN component. 
P_ANN = ANNSimp::Full

--Passes all checks. 
assert P_ANN :[deadlock-free]	
assert P_ANN;RUN({r__}) :[deadlock-free]
assert P_ANN :[deterministic]
assert P_ANN :[divergence-free]

--Rename it. 
--Might need to add one more renaming, because we are relating to a component called ANN in original. We will be using AnglePID, so may need to rename
--All send events, as in AngleOutputE, to be in terms of what we are, which is AnglePID
--Might need ANNSimp::angleOutputE.out <- AnglePID_C::angleOutputE.out
--P_ANN_Renamed = P_ANN[[
--  ANNSimp::adiff.in <- SegwayController::adiff.out,
--  ANNSimp::adiff.out <- SegwayController::adiff.in,
--  ANNSimp::anewError.in <- SegwayController::anewError.out,
--  ANNSimp::anewError.out <- SegwayController::anewError.in]]

