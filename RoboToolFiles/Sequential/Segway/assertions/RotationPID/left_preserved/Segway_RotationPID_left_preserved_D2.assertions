timed csp constrain
csp-begin
	constrain(x, min, max) = if x < min then min else if x > max then max else x
csp-end

timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end

// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end

// When RotationPID::D is set to one (and all other PID constants are zero), 
// after the first (rotationUpdate-1) times setLeftMotorSpeed() has occurred,
// the next value passed to setLeftMotorSpeed()
//		when the value communicated by angle is greater than or equal to -maxAngle and less than or equal to maxAngle
// is passed to setLeftMotorSpeed()
//		whenever the value communicated by angle is greater than or equal to -maxAngle and less than or equal to maxAngle
//		until rotationUpdate further occurrences of setLeftMotorSpeed() (after the initial rotationUpdate-1) have happened, after which it repeats (from "the next value passed...")
timed csp RotationPIDProp5
csp-begin
	Timed(OneStep) {
		RotationPIDProp5 = RotationPIDProp5Count(0)
		
		-- RotationPIDProp5Count represents the state when fewer than rotationUpdate motor settings have occurred and we count the left motor settings
		RotationPIDProp5Count(count) =
			-- allow any events other than setting left speed
			([] e : diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall|}) @ e -> RotationPIDProp5Count(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values and update the count for the first rotationUpdate-2 times
			(count < const_BalanceSTM_rotationUpdate-2) & Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5Count(count+1)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values for the (rotationUpdate-1)th time,
			-- then we reset the count and check the angle
			(count == const_BalanceSTM_rotationUpdate-2) & Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5AngleCheck(0)
			
		-- RotationPIDProp5AngleCheck represents the state in which we are waiting for the angle to be in range before we can record the setLeftMotorSpeed() value
		RotationPIDProp5AngleCheck(count) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> RotationPIDProp5AngleCheck(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values, since we haven't had an angle in range, and update the count mod rotationUpdate
			Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5AngleCheck(if count < const_BalanceSTM_rotationUpdate-1 then count+1 else 0)
			 []
			-- if the angle is out of range, continue
			Segway::angle.in?x : OutsideAngleRange -> RotationPIDProp5AngleCheck(count)
			 []
			-- if the angle is in range, go to a state where we can record the next value of setLeftMotorSpeedCall
			Segway::angle.in?x : AngleRange -> RotationPIDProp5RecordValue(count)
			
		-- RotationPIDProp5RecordValue represents the state in which angle is in range and we are waiting to record the setLeftMotorSpeed() value
		RotationPIDProp5RecordValue(count) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> RotationPIDProp5RecordValue(count))
			 []
			-- if an angle in range occurs, continue
			Segway::angle.in?x : AngleRange -> RotationPIDProp5RecordValue(count)
			 []
			-- if an angle out of range occurs, return to checking for an angle in range
			Segway::angle.in?x : OutsideAngleRange -> RotationPIDProp5AngleCheck(count)
			 []
			-- if this isn't the rotationUpdate-th occurrence, when setLeftMotorSpeedCall occurs, record the value and increment the count
			(count < const_BalanceSTM_rotationUpdate-1) & Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5InRange(count+1, x)
			 []
			-- if this is the rotationUpdate-th occurrence of setLeftMotorSpeedCall, go back to checking the angle to start a new cycle
			(count == const_BalanceSTM_rotationUpdate-1) & Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5AngleCheck(0)
			
		-- RotationPIDProp5InRange represents the state where the angle is in range and the same value is repeatedly output for setLeftMotorSpeed()
		RotationPIDProp5InRange(count, value) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> RotationPIDProp5InRange(count, value))
			 []
			-- allow setLeftMotorSpeedCall to occur outputting value and update the count for the first rotationUpdate-1 times
			(count < const_BalanceSTM_rotationUpdate-1) & Segway::setLeftMotorSpeedCall!value -> RotationPIDProp5InRange(count+1, value)
			 []
			-- allow setLeftMotorSpeedCall to occur outputting value for the rotationUpdate-th time, then discard the value and reset the count
			(count == const_BalanceSTM_rotationUpdate-1) & Segway::setLeftMotorSpeedCall!value -> RotationPIDProp5AngleCheck(0)
			 []
			-- if angle is in range, continue
			Segway::angle.in?x : AngleRange -> RotationPIDProp5InRange(count, value)
			 []
			-- if angle is out of range, switch to have no bounds on the setLeftMotorSpeed() value, but keep value recorded
			Segway::angle.in?x : OutsideAngleRange -> RotationPIDProp5OutOfRange(count, value)
		
		-- RotationPIDProp5InRange represents the state where the angle is out of range and setLeftMotorSpeed() is unrestricted
		RotationPIDProp5OutOfRange(count, value) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> RotationPIDProp5OutOfRange(count, value))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values, since we haven't had an angle in range, and update the count
			(count < const_BalanceSTM_rotationUpdate-1) & Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5OutOfRange(count+1, value)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values, since we haven't had an angle in range, and reset the count and discard the value
			(count == const_BalanceSTM_rotationUpdate-1) & Segway::setLeftMotorSpeedCall?x -> RotationPIDProp5AngleCheck(0)
			 []
			-- if angle is out of range, continue
			Segway::angle.in?x : OutsideAngleRange -> RotationPIDProp5OutOfRange(count, value)
			 []
			-- if angle is in range, switch to constrain setLeftMotorSpeed() value
			Segway::angle.in?x : AngleRange -> RotationPIDProp5InRange(count, value)
	}
csp-end
timed assertion RotationPIDProp5_refines: Segway refines RotationPIDProp5
	in the traces model
	with constant ^P of AnglePID    set to 0,
	     constant D  of AnglePID    set to 0,
	     constant ^P of SpeedPID    set to 0,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 2