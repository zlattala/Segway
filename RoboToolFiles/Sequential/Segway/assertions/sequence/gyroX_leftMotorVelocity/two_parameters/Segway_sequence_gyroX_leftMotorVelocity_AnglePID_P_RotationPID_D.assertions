timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end

// After an occurrence of gyroX,
// if a multiple of speedUpdate occurrences of gyroX have happened
// a leftMotorVelocity event must occur after no more that angleBudget time units, with no other events inbetween.
timed csp SequenceGyroXLeftMotorVelocity
csp-begin
	Timed(OneStep) {
		SequenceGyroXLeftMotorVelocity = SequenceGyroXLeftMotorVelocityCount(0)
	
		-- count occurrences of gyroX
		SequenceGyroXLeftMotorVelocityCount(count) =
			-- allow any events other than gyroX
			([] e : diff(SegwayRPEvents, {| Segway::gyroX |}) @ e -> SequenceGyroXLeftMotorVelocityCount(count))
			 []
			-- count the first speedUpdate-1 occurrences of gyroX
			(count < const_BalanceSTM_speedUpdate-1) & Segway::gyroX.in?x -> SequenceGyroXLeftMotorVelocityCount(count+1)
			 []
			-- after the speedUpdate-th occurrence of gyroX, enter the restricted state
			(count == const_BalanceSTM_speedUpdate-1) & Segway::gyroX.in?x -> SequenceGyroXLeftMotorVelocityRestrict(0)
	}
	
	-- outside a timed section so tock events can be counted
	-- in the restricted state, only leftMotorVelocity and tock events are allowed
	SequenceGyroXLeftMotorVelocityRestrict(tockCount) =
		-- allow tock events if fewer than angleBudget have happened
		(tockCount < const_BalanceSTM_angleBudget) & tock -> SequenceGyroXLeftMotorVelocityRestrict(tockCount+1)
		 []
		-- go back to allowing other events when a leftMotorVelocity event occurs
		Segway::leftMotorVelocity.in?x -> SequenceGyroXLeftMotorVelocityCount(0)
csp-end
	
timed assertion SequenceGyroXLeftMotorVelocity_refines: Segway refines SequenceGyroXLeftMotorVelocity
	in the traces model
	with constant ^P of AnglePID    set to 1,
	     constant D  of AnglePID    set to 0,
	     constant ^P of SpeedPID    set to 0,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 1