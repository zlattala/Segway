timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end
	     
// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end

// After the first (speedUpdate-1) times setLeftMotorSpeed() has occurred,
// the difference of the next value passed to setLeftMotorSpeed() and the next value communicated by the angle event
//		when the value communicated by angle is greater than or equal to -maxAngle and less than or equal to maxAngle
// is added to the last value communicated by angle and the sum is passed to setLeftMotorSpeed()
//		whenever the value communicated by angle is greater than or equal to -maxAngle and less than or equal to maxAngle
//		until speedUpdate further occurrences of setLeftMotorSpeed() (after the initial (speedUpdate-1)) have happened,
// after which it repeats (from "the next value passed...")
timed csp AnglePIDSpeedPIDLeftNotSpeedUpdate
csp-begin
	Timed(OneStep) {
		AnglePIDSpeedPIDLeftNotSpeedUpdate = AnglePIDSpeedPIDLeftNotSpeedUpdateCount(0)
		
		-- AnglePIDSpeedPIDLeftNotSpeedUpdateCount represents the state when fewer than speedUpdate motor settings have occurred
		-- and we count the left motor settings
		AnglePIDSpeedPIDLeftNotSpeedUpdateCount(0) =
			-- allow any events other than setting left speed
			([] e : diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall|}) @ e -> AnglePIDSpeedPIDLeftNotSpeedUpdateCount(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values and update the count for the first speedUpdate-2 times
			(count < const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftNotSpeedUpdateCount(count+1)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values for the (speedUpdate-1)th time,
			-- then we reset the count and check the angle
			(count == const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftNotSpeedUpdateAngleCheck(0)
			
		
		
	}
csp-end
timed assertion AnglePIDSpeedPIDLeftNotSpeedUpdate_refines: Segway refines AnglePIDSpeedPIDLeftNotSpeedUpdate
	in the traces model
	with constant ^P of AnglePID    set to 1, // this assertion applies when only the P AnglePID component is active
	     constant D  of AnglePID    set to 0,
	     constant ^P of SpeedPID    set to 1,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 0     