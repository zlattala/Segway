timed csp minimum
csp-begin
	minimum(a,b) = if a < b then a else b
csp-end

timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end

// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end

// When AnglePID::P=2 and SpeedPID::P=1 (and all other PID constants are zero),
// after setLeftMotorSpeed() has occurred (speedUpdate-1) times,
// if values greater than or equal to -maxAngle and less than or equal to maxAngle are communicated by the event angle,
// the next value passed to setLeftMotorSpeed() is the sum of twice the value communicated by angle and the values communicated by leftMotorVelocity and rightMotorVelocity.
// This repeats every speedUpdate calls to setLeftMotorSpeed().
timed csp AnglePIDSpeedPIDLeftSpeedUpdate
csp-begin
	Timed(OneStep) {
		AnglePIDSpeedPIDLeftSpeedUpdate = AnglePIDSpeedPIDLeftSpeedUpdateCount(0)
		
		-- AnglePIDSpeedPIDLeftSpeedUpdateCount represents the state when fewer than four motor settings have occurred
		-- and we count the left motor settings
		AnglePIDSpeedPIDLeftSpeedUpdateCount(count) =
			-- allow any events other than setting left speed
			([] e : diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall|}) @ e -> AnglePIDSpeedPIDLeftSpeedUpdateCount(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values and update the count for the first speedUpdate-2 times
			(count < const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftSpeedUpdateCount(count+1)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values for the (const_BalanceSTM_speedUpdate-1)th time,
			-- then go to check angle since we are into the first part of the precondition
			(count == const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(0, 0)
			
		-- AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck checks whether angle is correct to determine whether to constrain setLeftMotorSpeedCall
		-- records the values from leftMotorVelocity and rightMotorVelocity while this is occurring - stored in lspeed and rspeed
		AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(lspeed, rspeed) = 
			-- allow any events other than getting speed, setting left speed and checking the angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::setLeftMotorSpeedCall|})
					@ e -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(lspeed, rspeed))
			 []
			-- record values from leftMotorVelocity and rightMotorVelocity
			Segway::leftMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(x, rspeed)
			 []
			Segway::rightMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(lspeed, x)
			 []
			-- if setLeftMotorSpeedCall occurs without an angle being set, the precondition is broken so the values are not constrained, then we return to the beginning
			Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftSpeedUpdate
			 []
			-- if angle is in AngleRange, go to the restricted state, passing the current recorded values of lspeed and rspeed, and the angle value
			Segway::angle.in?x : AngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(lspeed, rspeed, x)
			 []
			-- if angle is outside AngleRange, the precondition does not hold, so continue
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(lspeed, rspeed)

		AnglePIDSpeedPIDLeftSpeedUpdateRestrict(lspeed, rspeed, a) =
			-- allow any events other than getting speed and setting left speed (ignore further occurrences of angle)
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::setLeftMotorSpeedCall|})
					@ e -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(lspeed, rspeed, a))
			 []
			-- record values from leftMotorVelocity and rightMotorVelocity
			Segway::leftMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(x, rspeed, a)
			 []
			Segway::rightMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(lspeed, x, a)
			 []
			-- if angle occurs again in AngleRange, record the new angle
			Segway::angle.in?x : AngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(lspeed, rspeed, x)
			 []
			-- if angle occurs again outside AngleRange, return to looking for an angle in range
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(lspeed, rspeed)
			 []
			-- setLeftMotorSpeedCall must occur with a value equal to the sum of the recorded speeds and angle, then we return to the beginning
			Segway::setLeftMotorSpeedCall!Plus(Mult(2, a, core_real), Plus(lspeed, rspeed, core_real), core_real) -> AnglePIDSpeedPIDLeftSpeedUpdate
	}
csp-end
timed assertion AnglePIDSpeedPIDLeftSpeedUpdate_refines: Segway refines AnglePIDSpeedPIDLeftSpeedUpdate
	in the traces model
	with constant ^P of AnglePID    set to 2,
	     constant D  of AnglePID    set to 0,
	     constant ^P of SpeedPID    set to 1,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 0