timed csp minimum
csp-begin
	minimum(a,b) = if a < b then a else b
csp-end

timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end

// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end

// When AnglePID::D=1 and SpeedPID::P=1 (and all other PID constants are zero),
// after setRightMotorSpeed() has occurred (speedUpdate-1) times,
// if values greater than or equal to -maxAngle and less than or equal to maxAngle are communicated by the event angle,
// the next value passed to setRightMotorSpeed() is the sum of the values communicated by gyroX, leftMotorVelocity and rightMotorVelocity.
// This repeats every speedUpdate calls to setRightMotorSpeed().
timed csp AnglePIDSpeedPIDRightSpeedUpdate
csp-begin
	Timed(OneStep) {
		AnglePIDSpeedPIDRightSpeedUpdate = AnglePIDSpeedPIDRightSpeedUpdateCount(0)
		
		-- AnglePIDSpeedPIDRightSpeedUpdateCount represents the state when fewer than four motor settings have occurred
		-- and we count the Right motor settings
		AnglePIDSpeedPIDRightSpeedUpdateCount(count) =
			-- allow any events other than setting Right speed
			([] e : diff(SegwayRPEvents, {|Segway::setRightMotorSpeedCall|}) @ e -> AnglePIDSpeedPIDRightSpeedUpdateCount(count))
			 []
			-- allow setRightMotorSpeedCall to occur with any values and update the count for the first speedUpdate-2 times
			(count < const_BalanceSTM_speedUpdate-2) & Segway::setRightMotorSpeedCall?x -> AnglePIDSpeedPIDRightSpeedUpdateCount(count+1)
			 []
			-- allow setRightMotorSpeedCall to occur with any values for the (const_BalanceSTM_speedUpdate-1)th time,
			-- then go to check angle since we are into the first part of the precondition
			(count == const_BalanceSTM_speedUpdate-2) & Segway::setRightMotorSpeedCall?x -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(0, 0, 0)
			
		-- AnglePIDSpeedPIDRightSpeedUpdateAngleCheck checks whether angle is correct to determine whether to constrain setRightMotorSpeedCall
		-- records the values from leftMotorVelocity and rightMotorVelocity while this is occurring - stored in lspeed and rspeed
		AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(gx, lspeed, rspeed) = 
			-- allow any events other than getting speed, setting left speed and checking the angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::setRightMotorSpeedCall|})
					@ e -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(gx, lspeed, rspeed))
			 []
			-- record values from gyroX, leftMotorVelocity and rightMotorVelocity
			Segway::leftMotorVelocity.in?x -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(gx, x, rspeed)
			 []
			Segway::rightMotorVelocity.in?x -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(gx, lspeed, x)
			 []
			Segway::gyroX.in?x -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(x, lspeed, rspeed)
			 []
			-- if setRightMotorSpeedCall occurs without an angle being set, the precondition is broken so the values are not constrained, then we return to the beginning
			Segway::setRightMotorSpeedCall?x -> AnglePIDSpeedPIDRightSpeedUpdate
			 []
			-- if angle is in AngleRange, go to the restricted state, passing the current recorded values of gx, lspeed and rspeed
			Segway::angle.in?x : AngleRange -> AnglePIDSpeedPIDRightSpeedUpdateRestrict(gx, lspeed, rspeed)
			 []
			-- if angle is outside AngleRange, the precondition does not hold, so continue
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(gx, lspeed, rspeed)

		AnglePIDSpeedPIDRightSpeedUpdateRestrict(gx, lspeed, rspeed) =
			-- allow any events other than getting speed and setting left speed (ignore further occurrences of angle)
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::setRightMotorSpeedCall|})
					@ e -> AnglePIDSpeedPIDRightSpeedUpdateRestrict(gx, lspeed, rspeed))
			 []
			-- record values from leftMotorVelocity and rightMotorVelocity
			Segway::leftMotorVelocity.in?x -> AnglePIDSpeedPIDRightSpeedUpdateRestrict(gx, x, rspeed)
			 []
			Segway::rightMotorVelocity.in?x -> AnglePIDSpeedPIDRightSpeedUpdateRestrict(gx, lspeed, x)
			 []
			Segway::gyroX.in?x -> AnglePIDSpeedPIDRightSpeedUpdateRestrict(x, lspeed, rspeed)
			 []
			-- if angle occurs again in AngleRange, record the new angle
			Segway::angle.in?x : AngleRange -> AnglePIDSpeedPIDRightSpeedUpdateRestrict(gx, lspeed, rspeed)
			 []
			-- if angle occurs again outside AngleRange, return to looking for an angle in range
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDSpeedPIDRightSpeedUpdateAngleCheck(gx, lspeed, rspeed)
			 []
			-- setRightMotorSpeedCall must occur with a value equal to the sum of the recorded speeds and angle, then we return to the beginning
			Segway::setRightMotorSpeedCall!Plus(gx, Plus(lspeed, rspeed, core_real), core_real) -> AnglePIDSpeedPIDRightSpeedUpdate
	}
csp-end
timed assertion AnglePIDSpeedPIDRightSpeedUpdate_refines: Segway refines AnglePIDSpeedPIDRightSpeedUpdate
	in the traces model
	with constant ^P of AnglePID    set to 0,
	     constant D  of AnglePID    set to 1,
	     constant ^P of SpeedPID    set to 1,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 0