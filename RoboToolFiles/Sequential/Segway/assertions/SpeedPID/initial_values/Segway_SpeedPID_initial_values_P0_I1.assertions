timed csp minimum
csp-begin
	minimum(a,b) = if a < b then a else b
csp-end

timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end

// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end

// When SpeedPID::I is set to one (and all other PID constants are zero), the 
// first speedUpdate-1 values set by each of setLeftMotorSpeed() and setRightMotorSpeed() are zero.
timed csp SpeedPIDProp1
csp-begin
	Timed(OneStep) {
		SpeedPIDProp1 = SpeedPIDProp1Count(0,0)
		
		SpeedPIDProp1Count(l, r) =
			-- allow any events other than setting speed
			([] e : diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall, Segway::setRightMotorSpeedCall|}) @ e -> SpeedPIDProp1Count(l, r))
			 []
			-- allow only setting zero for the first three, and update the count
			(l < const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall!0 -> SpeedPIDProp1Count(l+1, r)
			 []
			(r < const_BalanceSTM_speedUpdate-1) & Segway::setRightMotorSpeedCall!0 -> SpeedPIDProp1Count(l, r+1) 
			 []
			-- after the first three, allow setting any value
			(l >= const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp1Count(l, r)
			 []
			(r >= const_BalanceSTM_speedUpdate-1) & Segway::setRightMotorSpeedCall?x -> SpeedPIDProp1Count(l, r) 
	}
csp-end
timed assertion SpeedPIDProp1_refines: Segway refines SpeedPIDProp1
	in the traces model
	with constant ^P of AnglePID    set to 0,
	     constant D  of AnglePID    set to 0,
	     constant ^P of SpeedPID    set to 0,
	     constant I  of SpeedPID    set to 1 and
	     constant D  of RotationPID set to 0