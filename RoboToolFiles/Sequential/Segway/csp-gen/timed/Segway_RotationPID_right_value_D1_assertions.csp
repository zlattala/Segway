
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 18-08-2023 16:03:40
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "defs/file_AnglePID_defs.csp"
include "defs/state_timed_defs.csp"
include "defs/Segway.csp"
include "defs/core_defs.csp"
include "defs/file_AngleCalculation_defs.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/file_SpeedPID_defs.csp"
include "defs/file_BalanceSTM_defs.csp"
include "defs/file_RotationPID_defs.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "defs/core_timed_defs.csp"
include "defs/file_PID_defs.csp"
include "defs/set_toolkit_defs.csp"
include "defs/file_Segway_defs.csp"
include "instantiations.csp"
include "defs/relation_toolkit_defs.csp"
include "defs/file_SegwayRP_defs.csp"

channel r__

SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}

AngleRange = { -2..2 }

OutsideAngleRange = diff(core_real, AngleRange)

AngleInRange = { Segway::angle.in.x | x <- AngleRange}

AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}

Timed(OneStep) {
		RotationPIDProp3 = RotationPIDProp3Count(0)
		
		RotationPIDProp3Count(lcount) =
			-- events other than setting right motor speed are unconstrained
			([] e : diff(SegwayRPEvents, {|Segway::setRightMotorSpeedCall|}) @ e -> RotationPIDProp3Count(lcount))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values and update the count for the first rotationUpdate-2 times
			(lcount < const_BalanceSTM_rotationUpdate-2) & Segway::setRightMotorSpeedCall!0 -> RotationPIDProp3Count(lcount+1)
			 []
			-- allow setRightMotorSpeedCall to occur with any values for the (rotationUpdate-1)th time,
			-- then go to check angle since we are into the first part of the precondition
			(lcount >= const_BalanceSTM_rotationUpdate-2) & Segway::setRightMotorSpeedCall?x -> RotationPIDProp3AngleCheck(0)
			
		RotationPIDProp3AngleCheck(gyroz) =
			-- allow any events other than getting gyroZ, setting right speed and checking the angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::gyroZ, Segway::setRightMotorSpeedCall|})
					@ e -> RotationPIDProp3AngleCheck(gyroz))
			 []
			-- record value from gyroZ
			Segway::gyroZ.in?gz -> RotationPIDProp3AngleCheck(gz)
			 []
			-- if setRightMotorSpeedCall occurs without an angle being set, the precondition is broken so the values are not constrained, then we return to the beginning
			Segway::setRightMotorSpeedCall?x -> RotationPIDProp3
			 []
			-- if angle is in AngleRange, go to the restricted state, passing the current recorded values of gyroZ
			Segway::angle.in?x : AngleRange -> RotationPIDProp3Restrict(gyroz)
			 []
			-- if angle is outside AngleRange, the precondition does not hold, so continue
			Segway::angle.in?x : OutsideAngleRange -> RotationPIDProp3AngleCheck(gyroz)
			
		RotationPIDProp3Restrict(gyroz) =
			-- allow any events other than getting gyroZ and setting right speed (ignore further occurrences of angle)
			([] e : diff(SegwayRPEvents, {|Segway::gyroZ, Segway::setRightMotorSpeedCall|}) @ e -> RotationPIDProp3Restrict(gyroz))
			 []
			-- record value from gyroZ
			Segway::gyroZ.in?gz -> RotationPIDProp3Restrict(gz)
			 []
			-- setRightMotorSpeedCall must occur with a value equal to the sum of the recorded speeds, then we return to the beginning
			Segway::setRightMotorSpeedCall!gyroz -> RotationPIDProp3
	}

-- RotationPIDProp3_refines - refinement
assert RotationPIDProp3 [T= let 
	id__ = 0
	
	
	
	const_Segway_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_maxAngle
	const_Segway_SegwayController_stm_ref0_loopTime = const_BalanceSTM_loopTime
	const_Segway_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_startupDelay
	const_Segway_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_speedUpdate
	const_Segway_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_rotationUpdate
	const_Segway_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_angleBudget
	const_Segway_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_speedBudget
	const_Segway_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_rotationBudget
	const_Segway_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_motorBudget
		
	const_Segway_SegwayController_op_ref1_P = 0 
	const_Segway_SegwayController_op_ref1_I = 0 
	const_Segway_SegwayController_op_ref1_maxIntegral = const_SpeedPID_maxIntegral
	const_Segway_SegwayController_op_ref0_P = 0 
	const_Segway_SegwayController_op_ref0_D = 0 
	const_Segway_SegwayController_op_ref2_D = 1 
within
	Segway::D__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D)

