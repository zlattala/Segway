
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 18-08-2023 16:03:42
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "defs/file_AnglePID_defs.csp"
include "defs/state_timed_defs.csp"
include "defs/Segway.csp"
include "defs/core_defs.csp"
include "defs/file_AngleCalculation_defs.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/file_SpeedPID_defs.csp"
include "defs/file_BalanceSTM_defs.csp"
include "defs/file_RotationPID_defs.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "defs/core_timed_defs.csp"
include "defs/file_PID_defs.csp"
include "defs/set_toolkit_defs.csp"
include "defs/file_Segway_defs.csp"
include "instantiations.csp"
include "defs/relation_toolkit_defs.csp"
include "defs/file_SegwayRP_defs.csp"

channel r__

SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}

abs(x) = if x > 0 then x else -x
	gcd(a,b) =
		if a < 0 or b < 0 then 
			gcd(abs(a), abs(b))
		else if a < b then 
			gcd(b,a)
		else if b == 0 then
			a
		else if a % b == 0 then
			b
		else
			gcd(b, a % b)
	lcm(a,b) = (a/gcd(a,b))*b

AngleRange = { -const_BalanceSTM_maxAngle..const_BalanceSTM_maxAngle }

OutsideAngleRange = diff(core_real, AngleRange)

AngleInRange = { Segway::angle.in.x | x <- AngleRange}

AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}

Timed(OneStep) {
		SpeedPIDRotationPIDRightSpeedUpdateRotationUpdate = SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateCount(0)
	
		-- count the right motor speed settings until one less than a multiple of speedUpdate and rotationUpdate has occurred
		SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateCount(count) =
			-- allow events other than setting right motor speed
			([] e : diff(SegwayRPEvents, {| Segway::setRightMotorSpeedCall |})
				@ e -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateCount(count))
			 []
			-- case when fewer than one less than a multiple of speedUpdate and rotationUpdate has occurred - don't restrict values
			(count < lcm(const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate)-1) &
				Segway::setRightMotorSpeedCall?x -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateCount(count+1)
			 []
			-- case when one less than a multiple of speedUpdate and rotationUpdate has occurred - go to check angle
			(count < lcm(const_BalanceSTM_speedUpdate, const_BalanceSTM_rotationUpdate)-1) &
				SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateAngleCheck
			
		SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateAngleCheck =
			-- allow events other than setting right motor speed or checking angle
			([] e : diff(SegwayRPEvents, {| Segway::setRightMotorSpeedCall, Segway::angle |})
				@ e -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateAngleCheck)
			 []
			-- if another right motor speed is set, we haven't observed an angle in range so it is unrestricted, then return to counting
			Segway::setRightMotorSpeedCall?x -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateCount(0)
			 []
			-- if angle is out of range, continue
			Segway::angle.in?x : OutsideAngleRange -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateAngleCheck
			 []
			-- if angle is in range, enter restricted state
			Segway::angle.in?x : AngleRange -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateRestrict(0, 0, 0)
	
		SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateRestrict(lspeed, rspeed, gyroz) = 
			-- allow events other than setting right motor speed, checking motor speeds and getting gyroZ
			([] e : diff(SegwayRPEvents, {| Segway::setRightMotorSpeedCall, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::gyroZ |})
				@ e -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateRestrict(lspeed, rspeed, gyroz))
			 []
			-- record lspeed, rspeed and gyroZ
			Segway::leftMotorVelocity.in?x -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateRestrict(x, rspeed, gyroz)
			 []
			Segway::rightMotorVelocity.in?x -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateRestrict(lspeed, x, gyroz)
			 []
			Segway::gyroZ.in?x -> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateRestrict(lspeed, rspeed, x)
			 []
			-- when right motor speed is set, the value is restricted, then return to counting
			Segway::setRightMotorSpeedCall!Plus(Plus(lspeed, rspeed, core_real), gyroz, core_real)
				-> SpeedPIDRotationPIDRightSpeedUpdateRotationUpdateCount(0)
	}

-- SpeedPIDRotationPIDRightSpeedUpdateRotationUpdate_refines - refinement
assert SpeedPIDRotationPIDRightSpeedUpdateRotationUpdate [T= let 
	id__ = 0
	
	
	
	const_Segway_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_maxAngle
	const_Segway_SegwayController_stm_ref0_loopTime = const_BalanceSTM_loopTime
	const_Segway_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_startupDelay
	const_Segway_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_speedUpdate
	const_Segway_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_rotationUpdate
	const_Segway_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_angleBudget
	const_Segway_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_speedBudget
	const_Segway_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_rotationBudget
	const_Segway_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_motorBudget
		
	const_Segway_SegwayController_op_ref1_P = 1 
	const_Segway_SegwayController_op_ref1_I = 0 
	const_Segway_SegwayController_op_ref1_maxIntegral = const_SpeedPID_maxIntegral
	const_Segway_SegwayController_op_ref0_P = 0 
	const_Segway_SegwayController_op_ref0_D = 0 
	const_Segway_SegwayController_op_ref2_D = 1 
within
	Segway::D__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D)

