
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 18-08-2023 16:03:29
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "defs/file_AnglePID_defs.csp"
include "defs/state_timed_defs.csp"
include "defs/Segway.csp"
include "defs/core_defs.csp"
include "defs/file_AngleCalculation_defs.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/file_SpeedPID_defs.csp"
include "defs/file_BalanceSTM_defs.csp"
include "defs/file_RotationPID_defs.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "defs/core_timed_defs.csp"
include "defs/file_PID_defs.csp"
include "defs/set_toolkit_defs.csp"
include "defs/file_Segway_defs.csp"
include "instantiations.csp"
include "defs/relation_toolkit_defs.csp"
include "defs/file_SegwayRP_defs.csp"

channel r__

constrain(x, min, max) = if x < min then min else if x > max then max else x

SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}

AngleRange = { -2..2 }

OutsideAngleRange = diff(core_real, AngleRange)

AngleInRange = { Segway::angle.in.x | x <- AngleRange}

AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}

Timed(OneStep) {
		SpeedPIDProp6 = SpeedPIDProp6Count(0)
		
		-- SpeedPIDProp6Count represents the state when fewer than speedUpdate motor settings have occurred and we count the left motor settings
		SpeedPIDProp6Count(count) =
			-- allow any events other than setting left speed
			([] e : diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall|}) @ e -> SpeedPIDProp6Count(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values and update the count for the first speedUpdate-2 times
			(count < const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6Count(count+1)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values for the (speedUpdate-1)th time,
			-- then we reset the count and check the angle
			(count == const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6AngleCheck(0)
			
		-- SpeedPIDProp6AngleCheck represents the state in which we are waiting for the angle to be in range before we can record the setLeftMotorSpeed() value
		SpeedPIDProp6AngleCheck(count) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> SpeedPIDProp6AngleCheck(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values, since we haven't had an angle in range, and update the count mod speedUpdate
			Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6AngleCheck(if count < const_BalanceSTM_speedUpdate-1 then count+1 else 0)
			 []
			-- if the angle is out of range, continue
			Segway::angle.in?x : OutsideAngleRange -> SpeedPIDProp6AngleCheck(count)
			 []
			-- if the angle is in range, go to a state where we can record the next value of setLeftMotorSpeedCall
			Segway::angle.in?x : AngleRange -> SpeedPIDProp6RecordValue(count)
			
		-- SpeedPIDProp6RecordValue represents the state in which angle is in range and we are waiting to record the setLeftMotorSpeed() value
		SpeedPIDProp6RecordValue(count) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> SpeedPIDProp6RecordValue(count))
			 []
			-- if an angle in range occurs, continue
			Segway::angle.in?x : AngleRange -> SpeedPIDProp6RecordValue(count)
			 []
			-- if an angle out of range occurs, return to checking for an angle in range
			Segway::angle.in?x : OutsideAngleRange -> SpeedPIDProp6AngleCheck(count)
			 []
			-- if this isn't the speedUpdate-th occurrence, when setLeftMotorSpeedCall occurs, record the value and increment the count
			(count < const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6InRange(count+1, x)
			 []
			-- if this is the speedUpdate-th occurrence of setLeftMotorSpeedCall, go back to checking the angle to start a new cycle
			(count == const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6AngleCheck(0)
			
		-- SpeedPIDProp6InRange represents the state where the angle is in range and the same value is repeatedly output for setLeftMotorSpeed()
		SpeedPIDProp6InRange(count, value) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> SpeedPIDProp6InRange(count, value))
			 []
			-- allow setLeftMotorSpeedCall to occur outputting value and update the count for the first speedUpdate-1 times
			(count < const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall!value -> SpeedPIDProp6InRange(count+1, value)
			 []
			-- allow setLeftMotorSpeedCall to occur outputting value for the speedUpdate-th time, then discard the value and reset the count
			(count == const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall!value -> SpeedPIDProp6AngleCheck(0)
			 []
			-- if angle is in range, continue
			Segway::angle.in?x : AngleRange -> SpeedPIDProp6InRange(count, value)
			 []
			-- if angle is out of range, switch to have no bounds on the setLeftMotorSpeed() value, but keep value recorded
			Segway::angle.in?x : OutsideAngleRange -> SpeedPIDProp6OutOfRange(count, value)
		
		-- SpeedPIDProp6InRange represents the state where the angle is out of range and setLeftMotorSpeed() is unrestricted
		SpeedPIDProp6OutOfRange(count, value) =
			-- allow any events other than setting left speed and getting angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::setLeftMotorSpeedCall|}) @ e -> SpeedPIDProp6OutOfRange(count, value))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values, since we haven't had an angle in range, and update the count
			(count < const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6OutOfRange(count+1, value)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values, since we haven't had an angle in range, and reset the count and discard the value
			(count == const_BalanceSTM_speedUpdate-1) & Segway::setLeftMotorSpeedCall?x -> SpeedPIDProp6AngleCheck(0)
			 []
			-- if angle is out of range, continue
			Segway::angle.in?x : OutsideAngleRange -> SpeedPIDProp6OutOfRange(count, value)
			 []
			-- if angle is in range, switch to constrain setLeftMotorSpeed() value
			Segway::angle.in?x : AngleRange -> SpeedPIDProp6InRange(count, value)
	}

-- SpeedPIDProp6_refines - refinement
assert SpeedPIDProp6 [T= let 
	id__ = 0
	
	
	
	const_Segway_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_maxAngle
	const_Segway_SegwayController_stm_ref0_loopTime = const_BalanceSTM_loopTime
	const_Segway_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_startupDelay
	const_Segway_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_speedUpdate
	const_Segway_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_rotationUpdate
	const_Segway_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_angleBudget
	const_Segway_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_speedBudget
	const_Segway_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_rotationBudget
	const_Segway_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_motorBudget
		
	const_Segway_SegwayController_op_ref1_P = 1 
	const_Segway_SegwayController_op_ref1_I = 0 
	const_Segway_SegwayController_op_ref1_maxIntegral = const_SpeedPID_maxIntegral
	const_Segway_SegwayController_op_ref0_P = 0 
	const_Segway_SegwayController_op_ref0_D = 0 
	const_Segway_SegwayController_op_ref2_D = 0 
within
	Segway::D__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D)

