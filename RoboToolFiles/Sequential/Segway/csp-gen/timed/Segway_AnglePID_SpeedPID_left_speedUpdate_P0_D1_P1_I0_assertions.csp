
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 18-08-2023 16:03:18
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "defs/file_AnglePID_defs.csp"
include "defs/state_timed_defs.csp"
include "defs/Segway.csp"
include "defs/core_defs.csp"
include "defs/file_AngleCalculation_defs.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/file_SpeedPID_defs.csp"
include "defs/file_BalanceSTM_defs.csp"
include "defs/file_RotationPID_defs.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "defs/core_timed_defs.csp"
include "defs/file_PID_defs.csp"
include "defs/set_toolkit_defs.csp"
include "defs/file_Segway_defs.csp"
include "instantiations.csp"
include "defs/relation_toolkit_defs.csp"
include "defs/file_SegwayRP_defs.csp"

channel r__

minimum(a,b) = if a < b then a else b

SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}

AngleRange = { -2..2 }

OutsideAngleRange = diff(core_real, AngleRange)

AngleInRange = { Segway::angle.in.x | x <- AngleRange}

AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}

Timed(OneStep) {
		AnglePIDSpeedPIDLeftSpeedUpdate = AnglePIDSpeedPIDLeftSpeedUpdateCount(0)
		
		-- AnglePIDSpeedPIDLeftSpeedUpdateCount represents the state when fewer than four motor settings have occurred
		-- and we count the left motor settings
		AnglePIDSpeedPIDLeftSpeedUpdateCount(count) =
			-- allow any events other than setting left speed
			([] e : diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall|}) @ e -> AnglePIDSpeedPIDLeftSpeedUpdateCount(count))
			 []
			-- allow setLeftMotorSpeedCall to occur with any values and update the count for the first speedUpdate-2 times
			(count < const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftSpeedUpdateCount(count+1)
			 []
			-- allow setLeftMotorSpeedCall to occur with any values for the (const_BalanceSTM_speedUpdate-1)th time,
			-- then go to check angle since we are into the first part of the precondition
			(count == const_BalanceSTM_speedUpdate-2) & Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(0, 0, 0)
			
		-- AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck checks whether angle is correct to determine whether to constrain setLeftMotorSpeedCall
		-- records the values from leftMotorVelocity and rightMotorVelocity while this is occurring - stored in lspeed and rspeed
		AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(gx, lspeed, rspeed) = 
			-- allow any events other than getting speed, setting left speed and checking the angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::setLeftMotorSpeedCall|})
					@ e -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(gx, lspeed, rspeed))
			 []
			-- record values from gyroX, leftMotorVelocity and rightMotorVelocity
			Segway::leftMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(gx, x, rspeed)
			 []
			Segway::rightMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(gx, lspeed, x)
			 []
			Segway::gyroX.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(x, lspeed, rspeed)
			 []
			-- if setLeftMotorSpeedCall occurs without an angle being set, the precondition is broken so the values are not constrained, then we return to the beginning
			Segway::setLeftMotorSpeedCall?x -> AnglePIDSpeedPIDLeftSpeedUpdate
			 []
			-- if angle is in AngleRange, go to the restricted state, passing the current recorded values of gx, lspeed and rspeed
			Segway::angle.in?x : AngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(gx, lspeed, rspeed)
			 []
			-- if angle is outside AngleRange, the precondition does not hold, so continue
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(gx, lspeed, rspeed)

		AnglePIDSpeedPIDLeftSpeedUpdateRestrict(gx, lspeed, rspeed) =
			-- allow any events other than getting speed and setting left speed (ignore further occurrences of angle)
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::leftMotorVelocity, Segway::rightMotorVelocity, Segway::setLeftMotorSpeedCall|})
					@ e -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(gx, lspeed, rspeed))
			 []
			-- record values from leftMotorVelocity and rightMotorVelocity
			Segway::leftMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(gx, x, rspeed)
			 []
			Segway::rightMotorVelocity.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(gx, lspeed, x)
			 []
			Segway::gyroX.in?x -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(x, lspeed, rspeed)
			 []
			-- if angle occurs again in AngleRange, record the new angle
			Segway::angle.in?x : AngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateRestrict(gx, lspeed, rspeed)
			 []
			-- if angle occurs again outside AngleRange, return to looking for an angle in range
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDSpeedPIDLeftSpeedUpdateAngleCheck(gx, lspeed, rspeed)
			 []
			-- setLeftMotorSpeedCall must occur with a value equal to the sum of the recorded speeds and angle, then we return to the beginning
			Segway::setLeftMotorSpeedCall!Plus(gx, Plus(lspeed, rspeed, core_real), core_real) -> AnglePIDSpeedPIDLeftSpeedUpdate
	}

-- AnglePIDSpeedPIDLeftSpeedUpdate_refines - refinement
assert AnglePIDSpeedPIDLeftSpeedUpdate [T= let 
	id__ = 0
	
	
	
	const_Segway_SegwayController_stm_ref0_maxAngle = const_BalanceSTM_maxAngle
	const_Segway_SegwayController_stm_ref0_loopTime = const_BalanceSTM_loopTime
	const_Segway_SegwayController_stm_ref0_startupDelay = const_BalanceSTM_startupDelay
	const_Segway_SegwayController_stm_ref0_speedUpdate = const_BalanceSTM_speedUpdate
	const_Segway_SegwayController_stm_ref0_rotationUpdate = const_BalanceSTM_rotationUpdate
	const_Segway_SegwayController_stm_ref0_angleBudget = const_BalanceSTM_angleBudget
	const_Segway_SegwayController_stm_ref0_speedBudget = const_BalanceSTM_speedBudget
	const_Segway_SegwayController_stm_ref0_rotationBudget = const_BalanceSTM_rotationBudget
	const_Segway_SegwayController_stm_ref0_motorBudget = const_BalanceSTM_motorBudget
		
	const_Segway_SegwayController_op_ref1_P = 1 
	const_Segway_SegwayController_op_ref1_I = 0 
	const_Segway_SegwayController_op_ref1_maxIntegral = const_SpeedPID_maxIntegral
	const_Segway_SegwayController_op_ref0_P = 0 
	const_Segway_SegwayController_op_ref0_D = 1 
	const_Segway_SegwayController_op_ref2_D = 0 
within
	Segway::D__(id__,
			    const_Segway_SegwayController_stm_ref0_maxAngle,
			    const_Segway_SegwayController_stm_ref0_loopTime,
			    const_Segway_SegwayController_stm_ref0_startupDelay,
			    const_Segway_SegwayController_stm_ref0_speedUpdate,
			    const_Segway_SegwayController_stm_ref0_rotationUpdate,
			    const_Segway_SegwayController_stm_ref0_angleBudget,
			    const_Segway_SegwayController_stm_ref0_speedBudget,
			    const_Segway_SegwayController_stm_ref0_rotationBudget,
			    const_Segway_SegwayController_stm_ref0_motorBudget,
			   	const_Segway_SegwayController_op_ref0_P,
			   	const_Segway_SegwayController_op_ref0_D,
			   	const_Segway_SegwayController_op_ref1_P,
			   	const_Segway_SegwayController_op_ref1_I,
			   	const_Segway_SegwayController_op_ref1_maxIntegral,
			   	const_Segway_SegwayController_op_ref2_D)

