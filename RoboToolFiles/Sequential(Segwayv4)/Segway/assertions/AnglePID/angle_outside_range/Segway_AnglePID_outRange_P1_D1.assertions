timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end
	     
// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end
	     
timed csp AnglePIDProp3
csp-begin
	Timed(OneStep) {
		AnglePIDProp3 =
			([] e : diff(SegwayRPEvents, AngleOutsideRange) @ e -> AnglePIDProp3)
			 []
			Segway::angle.in?x : OutsideAngleRange -> RestrictAnglePIDProp3
			
		RestrictAnglePIDProp3 =
			([] e : diff(SegwayRPEvents, {|Segway::angle,Segway::setLeftMotorSpeedCall, Segway::setRightMotorSpeedCall|}) @ e -> RestrictAnglePIDProp3)
			 []
			Segway::setLeftMotorSpeedCall!0 -> RestrictAnglePIDProp3
			 []
			Segway::setRightMotorSpeedCall!0 -> RestrictAnglePIDProp3
			 []
			-- only remain in the restricted state when outside the AngleRange
			Segway::angle.in?y : OutsideAngleRange -> RestrictAnglePIDProp3
			 []
			Segway::angle.in?y : AngleRange -> AnglePIDProp3
	}
csp-end
timed assertion AnglePIDProp3_refines: Segway refines AnglePIDProp3
	in the traces model
	with constant ^P of AnglePID    set to 1,
	     constant D  of AnglePID    set to 1,
	     constant ^P of SpeedPID    set to 0,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 0