timed csp SegwayRPEvents
csp-begin
	SegwayRPEvents = {| 
		Segway::angle.in,
		Segway::gyroX.in,
		Segway::gyroY.in,
		Segway::gyroZ.in,
		Segway::leftMotorVelocity.in,
		Segway::rightMotorVelocity.in,
		Segway::setLeftMotorSpeedCall,
		Segway::setRightMotorSpeedCall,
		Segway::disableInterruptsCall,
		Segway::enableInterruptsCall
	|}
csp-end

// define range from -maxAngle to maxAngle and its complement
timed csp AngleRange
csp-begin
	AngleRange = { -2..2 } 
csp-end
timed csp OutsideAngleRange
csp-begin
	OutsideAngleRange = diff(core_real, AngleRange)
csp-end

timed csp AngleInRange
csp-begin
	AngleInRange = { Segway::angle.in.x | x <- AngleRange}
csp-end

timed csp AngleOutsideRange
csp-begin
	AngleOutsideRange = { Segway::angle.in.x | x <- OutsideAngleRange}
csp-end

// When AnglePID::P=1 and RotationPID::D=2 (and the other PID constants are set to zero), 
// after the first (rotationUpdate-1) times setRightMotorSpeed() has occurred,
// if values greater than or equal to -maxAngle and less than or equal to maxAngle are communicated by the event angle,
// the next value passed to setRightMotorSpeed() is the sum of
//     the value communicated by angle
//     and twice the value communicated by gyroZ.
// This repeats every rotationUpdate calls to setRightMotorSpeed().
timed csp AnglePIDRotationPIDRightRotationUpdate
csp-begin
	Timed(OneStep) {
		AnglePIDRotationPIDRightRotationUpdate = AnglePIDRotationPIDRightRotationUpdateCount(0)
		
		AnglePIDRotationPIDRightRotationUpdateCount(lcount) =
			-- events other than setting motor speeds are unconstrained
			([] e : diff(SegwayRPEvents, {|Segway::setRightMotorSpeedCall|}) @ e -> AnglePIDRotationPIDRightRotationUpdateCount(lcount))
			 []
			-- allow setRightMotorSpeedCall to occur with any values and update the count for the first rotationUpdate-2 times
			(lcount < const_BalanceSTM_rotationUpdate-2) & Segway::setRightMotorSpeedCall!0 -> AnglePIDRotationPIDRightRotationUpdateCount(lcount+1)
			 []
			-- allow setRightMotorSpeedCall to occur with any values for the (rotationUpdate-1)th time,
			-- then go to check angle since we are into the first part of the precondition
			(lcount >= const_BalanceSTM_rotationUpdate-2) & Segway::setRightMotorSpeedCall?x -> AnglePIDRotationPIDRightRotationUpdateAngleCheck(0)
			
		AnglePIDRotationPIDRightRotationUpdateAngleCheck(gyroz) =
			-- allow any events other than getting gyroZ, setting left speed and checking the angle
			([] e : diff(SegwayRPEvents, {|Segway::angle, Segway::gyroZ, Segway::setRightMotorSpeedCall|})
					@ e -> AnglePIDRotationPIDRightRotationUpdateAngleCheck(gyroz))
			 []
			-- record value from gyroZ
			Segway::gyroZ.in?gz -> AnglePIDRotationPIDRightRotationUpdateAngleCheck(gz)
			 []
			-- if setRightMotorSpeedCall occurs without an angle being set, the precondition is broken so the values are not constrained, then we return to the beginning
			Segway::setRightMotorSpeedCall?x -> AnglePIDRotationPIDRightRotationUpdate
			 []
			-- if angle is in AngleRange, go to the restricted state, passing the current recorded values of gyroZ and the angle value
			Segway::angle.in?x : AngleRange -> AnglePIDRotationPIDRightRotationUpdateRestrict(gyroz, x)
			 []
			-- if angle is outside AngleRange, the precondition does not hold, so continue
			Segway::angle.in?x : OutsideAngleRange -> AnglePIDRotationPIDRightRotationUpdateAngleCheck(gyroz)
			
		AnglePIDRotationPIDRightRotationUpdateRestrict(gyroz, a) =
			-- allow any events other than getting gyroZ and setting left speed (ignore further occurrences of angle)
			([] e : diff(SegwayRPEvents, {|Segway::gyroZ, Segway::setRightMotorSpeedCall|}) @ e -> AnglePIDRotationPIDRightRotationUpdateRestrict(gyroz, a))
			 []
			-- record value from gyroZ
			Segway::gyroZ.in?gz -> AnglePIDRotationPIDRightRotationUpdateRestrict(gz, a)
			 []
			-- setRightMotorSpeedCall must occur with a value equal to the sum of the recorded speeds, then we return to the beginning
			Segway::setRightMotorSpeedCall!Plus(a, Mult(2, gyroz, core_real), core_real) -> AnglePIDRotationPIDRightRotationUpdate
	}
csp-end
timed assertion AnglePIDRotationPIDRightRotationUpdate_refines: Segway refines AnglePIDRotationPIDRightRotationUpdate
	in the traces model
	with constant ^P of AnglePID    set to 1,
	     constant D  of AnglePID    set to 0,
	     constant ^P of SpeedPID    set to 0,
	     constant I  of SpeedPID    set to 0 and
	     constant D  of RotationPID set to 2