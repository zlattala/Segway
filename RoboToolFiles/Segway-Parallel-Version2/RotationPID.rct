diagram RotationPID

interface RotationPIDVars {
	event rdiff:real
	event rotationOutputE:real
}

stm RotationPID {
	uses RotationPIDVars const D : real
	var currRotationOut:real, currDiff:real
	
	initial i0
	state Read {
		
	}
	state UpdateOutput {
		entry currRotationOut = D * currDiff
	}
	transition t0 {
		from i0
		to Read
	}
	transition t1 {
		from Read
		to UpdateOutput
		trigger rdiff?currDiff
	}
	transition t2 {
		from UpdateOutput 
		to Read
		action rotationOutputE!currRotationOut
	}
}

